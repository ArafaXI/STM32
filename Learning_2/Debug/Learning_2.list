
Learning_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003754  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003918  08003918  00004918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800394c  0800394c  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800394c  0800394c  0000494c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003954  08003954  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003954  08003954  00004954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003958  08003958  00004958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800395c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  080039c4  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080039c4  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6d5  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0f  00000000  00000000  0001276d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00014580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0d  00000000  00000000  00015260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229f4  00000000  00000000  00015c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed8a  00000000  00000000  00038661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2a2c  00000000  00000000  000473eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119e17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c64  00000000  00000000  00119e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0011dac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003900 	.word	0x08003900

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08003900 	.word	0x08003900

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <_write>:
/* USER CODE BEGIN 0 */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart
	int _write(int fd, char* ptr, int len) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
		HAL_StatusTypeDef hstatus;

		if (fd == 1 || fd == 2) {
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d002      	beq.n	8000548 <_write+0x18>
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	2b02      	cmp	r3, #2
 8000546:	d111      	bne.n	800056c <_write+0x3c>
			hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	b29a      	uxth	r2, r3
 800054c:	f04f 33ff 	mov.w	r3, #4294967295
 8000550:	68b9      	ldr	r1, [r7, #8]
 8000552:	4809      	ldr	r0, [pc, #36]	@ (8000578 <_write+0x48>)
 8000554:	f002 f96c 	bl	8002830 <HAL_UART_Transmit>
 8000558:	4603      	mov	r3, r0
 800055a:	75fb      	strb	r3, [r7, #23]
			if (hstatus == HAL_OK)
 800055c:	7dfb      	ldrb	r3, [r7, #23]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <_write+0x36>
				return len;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	e004      	b.n	8000570 <_write+0x40>
			else
				return -1;
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	e001      	b.n	8000570 <_write+0x40>
		}
		return -1;
 800056c:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200000cc 	.word	0x200000cc

0800057c <HAL_GPIO_EXTI_Callback>:

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]

	  }
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <HAL_TIM_PeriodElapsedCallback>:

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
		TIM_FLAG = 1;
 800059c:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
	}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000115 	.word	0x20000115

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fb2e 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f82e 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f910 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 f8e4 	bl	8000790 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80005c8:	f000 f894 	bl	80006f4 <MX_TIM4_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 80005cc:	480d      	ldr	r0, [pc, #52]	@ (8000604 <main+0x50>)
 80005ce:	f001 fcbf 	bl	8001f50 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN 2 */
  /* Private user code ---------------------------------------------------------*/
  /* USER CODE BEGIN 0 */
  printf("First App\r\n");
 80005d2:	480d      	ldr	r0, [pc, #52]	@ (8000608 <main+0x54>)
 80005d4:	f002 fe00 	bl	80031d8 <puts>
  while (1)
  {
	  // now = HAL_GetTick();


	  if(BTN_FLAG){
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <main+0x58>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d005      	beq.n	80005ec <main+0x38>
		  printf("Button Pressed\r\n");
 80005e0:	480b      	ldr	r0, [pc, #44]	@ (8000610 <main+0x5c>)
 80005e2:	f002 fdf9 	bl	80031d8 <puts>
		  BTN_FLAG = 0;
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <main+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
	  }

	  if(TIM_FLAG){
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <main+0x60>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0f1      	beq.n	80005d8 <main+0x24>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005f4:	2120      	movs	r1, #32
 80005f6:	4808      	ldr	r0, [pc, #32]	@ (8000618 <main+0x64>)
 80005f8:	f000 fe3f 	bl	800127a <HAL_GPIO_TogglePin>
		  TIM_FLAG = 0;
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <main+0x60>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
	  if(BTN_FLAG){
 8000602:	e7e9      	b.n	80005d8 <main+0x24>
 8000604:	20000084 	.word	0x20000084
 8000608:	08003918 	.word	0x08003918
 800060c:	20000114 	.word	0x20000114
 8000610:	08003924 	.word	0x08003924
 8000614:	20000115 	.word	0x20000115
 8000618:	40020000 	.word	0x40020000

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2234      	movs	r2, #52	@ 0x34
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 feb4 	bl	8003398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a28      	ldr	r2, [pc, #160]	@ (80006ec <SystemClock_Config+0xd0>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b26      	ldr	r3, [pc, #152]	@ (80006ec <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000668:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <SystemClock_Config+0xd4>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000684:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800068e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000694:	2332      	movs	r3, #50	@ 0x32
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 f963 	bl	8001974 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b4:	f000 f90c 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	2101      	movs	r1, #1
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fe03 	bl	80012e0 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006e0:	f000 f8f6 	bl	80008d0 <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	@ 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000710:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <MX_TIM4_Init+0x94>)
 8000712:	4a1e      	ldr	r2, [pc, #120]	@ (800078c <MX_TIM4_Init+0x98>)
 8000714:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 8000716:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <MX_TIM4_Init+0x94>)
 8000718:	f242 720f 	movw	r2, #9999	@ 0x270f
 800071c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_TIM4_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2499;
 8000724:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_TIM4_Init+0x94>)
 8000726:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800072a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_TIM4_Init+0x94>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_TIM4_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000738:	4813      	ldr	r0, [pc, #76]	@ (8000788 <MX_TIM4_Init+0x94>)
 800073a:	f001 fbb9 	bl	8001eb0 <HAL_TIM_Base_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000744:	f000 f8c4 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <MX_TIM4_Init+0x94>)
 8000756:	f001 fd5b 	bl	8002210 <HAL_TIM_ConfigClockSource>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 f8b6 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_TIM4_Init+0x94>)
 8000772:	f001 ff7d 	bl	8002670 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800077c:	f000 f8a8 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000084 	.word	0x20000084
 800078c:	40000800 	.word	0x40000800

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <MX_USART2_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 800079c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c8:	f001 ffe2 	bl	8002790 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f87d 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000cc 	.word	0x200000cc
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b31      	ldr	r3, [pc, #196]	@ (80008c4 <MX_GPIO_Init+0xe0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a30      	ldr	r2, [pc, #192]	@ (80008c4 <MX_GPIO_Init+0xe0>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b2e      	ldr	r3, [pc, #184]	@ (80008c4 <MX_GPIO_Init+0xe0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b2a      	ldr	r3, [pc, #168]	@ (80008c4 <MX_GPIO_Init+0xe0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a29      	ldr	r2, [pc, #164]	@ (80008c4 <MX_GPIO_Init+0xe0>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b27      	ldr	r3, [pc, #156]	@ (80008c4 <MX_GPIO_Init+0xe0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b23      	ldr	r3, [pc, #140]	@ (80008c4 <MX_GPIO_Init+0xe0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a22      	ldr	r2, [pc, #136]	@ (80008c4 <MX_GPIO_Init+0xe0>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b20      	ldr	r3, [pc, #128]	@ (80008c4 <MX_GPIO_Init+0xe0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <MX_GPIO_Init+0xe0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a1b      	ldr	r2, [pc, #108]	@ (80008c4 <MX_GPIO_Init+0xe0>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <MX_GPIO_Init+0xe0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	4816      	ldr	r0, [pc, #88]	@ (80008c8 <MX_GPIO_Init+0xe4>)
 8000870:	f000 fcea 	bl	8001248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4810      	ldr	r0, [pc, #64]	@ (80008cc <MX_GPIO_Init+0xe8>)
 800088c:	f000 fb48 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000890:	2320      	movs	r3, #32
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4808      	ldr	r0, [pc, #32]	@ (80008c8 <MX_GPIO_Init+0xe4>)
 80008a8:	f000 fb3a 	bl	8000f20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	2028      	movs	r0, #40	@ 0x28
 80008b2:	f000 fafe 	bl	8000eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b6:	2028      	movs	r0, #40	@ 0x28
 80008b8:	f000 fb17 	bl	8000eea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	@ 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020800 	.word	0x40020800

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000928 <HAL_MspInit+0x4c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	@ 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800091a:	2007      	movs	r0, #7
 800091c:	f000 fabe 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0e      	ldr	r2, [pc, #56]	@ (8000974 <HAL_TIM_Base_MspInit+0x48>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d115      	bne.n	800096a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <HAL_TIM_Base_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a0c      	ldr	r2, [pc, #48]	@ (8000978 <HAL_TIM_Base_MspInit+0x4c>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <HAL_TIM_Base_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	201e      	movs	r0, #30
 8000960:	f000 faa7 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000964:	201e      	movs	r0, #30
 8000966:	f000 fac0 	bl	8000eea <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40000800 	.word	0x40000800
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <HAL_UART_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12b      	bne.n	80009f6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	4a17      	ldr	r2, [pc, #92]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d6:	230c      	movs	r3, #12
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e6:	2307      	movs	r3, #7
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <HAL_UART_MspInit+0x8c>)
 80009f2:	f000 fa95 	bl	8000f20 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	@ 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <NMI_Handler+0x4>

08000a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <MemManage_Handler+0x4>

08000a24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a62:	f000 f92b 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a70:	4802      	ldr	r0, [pc, #8]	@ (8000a7c <TIM4_IRQHandler+0x10>)
 8000a72:	f001 fadd 	bl	8002030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000084 	.word	0x20000084

08000a80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a84:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a88:	f000 fc12 	bl	80012b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e00a      	b.n	8000ab8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aa2:	f3af 8000 	nop.w
 8000aa6:	4601      	mov	r1, r0
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	b2ca      	uxtb	r2, r1
 8000ab0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	dbf0      	blt.n	8000aa2 <_read+0x12>
  }

  return len;
 8000ac0:	687b      	ldr	r3, [r7, #4]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af2:	605a      	str	r2, [r3, #4]
  return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <_isatty>:

int _isatty(int file)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	@ (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f002 fc66 	bl	8003434 <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20020000 	.word	0x20020000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	20000118 	.word	0x20000118
 8000b9c:	20000270 	.word	0x20000270

08000ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bfc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bc8:	f7ff ffea 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	@ (8000c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f002 fc25 	bl	8003440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf6:	f7ff fcdd 	bl	80005b4 <main>
  bx  lr    
 8000bfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c08:	0800395c 	.word	0x0800395c
  ldr r2, =_sbss
 8000c0c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c10:	2000026c 	.word	0x2000026c

08000c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	@ (8000c58 <HAL_Init+0x40>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c28:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <HAL_Init+0x40>)
 8000c2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <HAL_Init+0x40>)
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f92b 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f808 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fe46 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023c00 	.word	0x40023c00

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <HAL_InitTick+0x54>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_InitTick+0x58>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f943 	bl	8000f06 <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00e      	b.n	8000ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d80a      	bhi.n	8000ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 f90b 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	@ (8000cb8 <HAL_InitTick+0x5c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	2000011c 	.word	0x2000011c

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	@ (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	2000011c 	.word	0x2000011c

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4907      	ldr	r1, [pc, #28]	@ (8000d98 <__NVIC_EnableIRQ+0x38>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	@ (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	@ (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	@ 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	@ 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff29 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff3e 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff8e 	bl	8000df0 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff31 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa2 	bl	8000e58 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	e165      	b.n	8001208 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	f040 8154 	bne.w	8001202 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d005      	beq.n	8000f72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d130      	bne.n	8000fd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	f003 0201 	and.w	r2, r3, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d017      	beq.n	8001010 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d123      	bne.n	8001064 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	691a      	ldr	r2, [r3, #16]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	08da      	lsrs	r2, r3, #3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3208      	adds	r2, #8
 800105e:	69b9      	ldr	r1, [r7, #24]
 8001060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0203 	and.w	r2, r3, #3
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 80ae 	beq.w	8001202 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001220 <HAL_GPIO_Init+0x300>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4a5c      	ldr	r2, [pc, #368]	@ (8001220 <HAL_GPIO_Init+0x300>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001220 <HAL_GPIO_Init+0x300>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c2:	4a58      	ldr	r2, [pc, #352]	@ (8001224 <HAL_GPIO_Init+0x304>)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	220f      	movs	r2, #15
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001228 <HAL_GPIO_Init+0x308>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d025      	beq.n	800113a <HAL_GPIO_Init+0x21a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4e      	ldr	r2, [pc, #312]	@ (800122c <HAL_GPIO_Init+0x30c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d01f      	beq.n	8001136 <HAL_GPIO_Init+0x216>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001230 <HAL_GPIO_Init+0x310>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d019      	beq.n	8001132 <HAL_GPIO_Init+0x212>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4c      	ldr	r2, [pc, #304]	@ (8001234 <HAL_GPIO_Init+0x314>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0x20e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4b      	ldr	r2, [pc, #300]	@ (8001238 <HAL_GPIO_Init+0x318>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00d      	beq.n	800112a <HAL_GPIO_Init+0x20a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4a      	ldr	r2, [pc, #296]	@ (800123c <HAL_GPIO_Init+0x31c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0x206>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a49      	ldr	r2, [pc, #292]	@ (8001240 <HAL_GPIO_Init+0x320>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_GPIO_Init+0x202>
 800111e:	2306      	movs	r3, #6
 8001120:	e00c      	b.n	800113c <HAL_GPIO_Init+0x21c>
 8001122:	2307      	movs	r3, #7
 8001124:	e00a      	b.n	800113c <HAL_GPIO_Init+0x21c>
 8001126:	2305      	movs	r3, #5
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x21c>
 800112a:	2304      	movs	r3, #4
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x21c>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x21c>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x21c>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x21c>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114c:	4935      	ldr	r1, [pc, #212]	@ (8001224 <HAL_GPIO_Init+0x304>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b3a      	ldr	r3, [pc, #232]	@ (8001244 <HAL_GPIO_Init+0x324>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a31      	ldr	r2, [pc, #196]	@ (8001244 <HAL_GPIO_Init+0x324>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <HAL_GPIO_Init+0x324>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ae:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fc:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f ae96 	bls.w	8000f3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40021400 	.word	0x40021400
 8001240:	40021800 	.word	0x40021800
 8001244:	40013c00 	.word	0x40013c00

08001248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
 8001254:	4613      	mov	r3, r2
 8001256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001258:	787b      	ldrb	r3, [r7, #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001264:	e003      	b.n	800126e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	619a      	str	r2, [r3, #24]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800127a:	b480      	push	{r7}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800128c:	887a      	ldrh	r2, [r7, #2]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	041a      	lsls	r2, r3, #16
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43d9      	mvns	r1, r3
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	400b      	ands	r3, r1
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	619a      	str	r2, [r3, #24]
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012ba:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012c6:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f954 	bl	800057c <HAL_GPIO_EXTI_Callback>
  }
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e0cc      	b.n	800148e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012f4:	4b68      	ldr	r3, [pc, #416]	@ (8001498 <HAL_RCC_ClockConfig+0x1b8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d90c      	bls.n	800131c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b65      	ldr	r3, [pc, #404]	@ (8001498 <HAL_RCC_ClockConfig+0x1b8>)
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b63      	ldr	r3, [pc, #396]	@ (8001498 <HAL_RCC_ClockConfig+0x1b8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e0b8      	b.n	800148e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d020      	beq.n	800136a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001334:	4b59      	ldr	r3, [pc, #356]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4a58      	ldr	r2, [pc, #352]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 800133a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800133e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	2b00      	cmp	r3, #0
 800134a:	d005      	beq.n	8001358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800134c:	4b53      	ldr	r3, [pc, #332]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4a52      	ldr	r2, [pc, #328]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001358:	4b50      	ldr	r3, [pc, #320]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	494d      	ldr	r1, [pc, #308]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 8001366:	4313      	orrs	r3, r2
 8001368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d044      	beq.n	8001400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d107      	bne.n	800138e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4b47      	ldr	r3, [pc, #284]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d119      	bne.n	80013be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e07f      	b.n	800148e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d003      	beq.n	800139e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800139a:	2b03      	cmp	r3, #3
 800139c:	d107      	bne.n	80013ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139e:	4b3f      	ldr	r3, [pc, #252]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e06f      	b.n	800148e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ae:	4b3b      	ldr	r3, [pc, #236]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e067      	b.n	800148e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013be:	4b37      	ldr	r3, [pc, #220]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f023 0203 	bic.w	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4934      	ldr	r1, [pc, #208]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d0:	f7ff fc88 	bl	8000ce4 <HAL_GetTick>
 80013d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d8:	f7ff fc84 	bl	8000ce4 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e04f      	b.n	800148e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ee:	4b2b      	ldr	r3, [pc, #172]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 020c 	and.w	r2, r3, #12
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d1eb      	bne.n	80013d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001400:	4b25      	ldr	r3, [pc, #148]	@ (8001498 <HAL_RCC_ClockConfig+0x1b8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d20c      	bcs.n	8001428 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140e:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <HAL_RCC_ClockConfig+0x1b8>)
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <HAL_RCC_ClockConfig+0x1b8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d001      	beq.n	8001428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e032      	b.n	800148e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4916      	ldr	r1, [pc, #88]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	4313      	orrs	r3, r2
 8001444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d009      	beq.n	8001466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001452:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	490e      	ldr	r1, [pc, #56]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	4313      	orrs	r3, r2
 8001464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001466:	f000 f855 	bl	8001514 <HAL_RCC_GetSysClockFreq>
 800146a:	4602      	mov	r2, r0
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	490a      	ldr	r1, [pc, #40]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	5ccb      	ldrb	r3, [r1, r3]
 800147a:	fa22 f303 	lsr.w	r3, r2, r3
 800147e:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fbe8 	bl	8000c5c <HAL_InitTick>

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00
 800149c:	40023800 	.word	0x40023800
 80014a0:	08003934 	.word	0x08003934
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014b0:	4b03      	ldr	r3, [pc, #12]	@ (80014c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000000 	.word	0x20000000

080014c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014c8:	f7ff fff0 	bl	80014ac <HAL_RCC_GetHCLKFreq>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	0a9b      	lsrs	r3, r3, #10
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	4903      	ldr	r1, [pc, #12]	@ (80014e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014da:	5ccb      	ldrb	r3, [r1, r3]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	08003944 	.word	0x08003944

080014ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014f0:	f7ff ffdc 	bl	80014ac <HAL_RCC_GetHCLKFreq>
 80014f4:	4602      	mov	r2, r0
 80014f6:	4b05      	ldr	r3, [pc, #20]	@ (800150c <HAL_RCC_GetPCLK2Freq+0x20>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	0b5b      	lsrs	r3, r3, #13
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	4903      	ldr	r1, [pc, #12]	@ (8001510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001502:	5ccb      	ldrb	r3, [r1, r3]
 8001504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40023800 	.word	0x40023800
 8001510:	08003944 	.word	0x08003944

08001514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001518:	b0ae      	sub	sp, #184	@ 0xb8
 800151a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800153a:	4bcb      	ldr	r3, [pc, #812]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x354>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b0c      	cmp	r3, #12
 8001544:	f200 8206 	bhi.w	8001954 <HAL_RCC_GetSysClockFreq+0x440>
 8001548:	a201      	add	r2, pc, #4	@ (adr r2, 8001550 <HAL_RCC_GetSysClockFreq+0x3c>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	08001585 	.word	0x08001585
 8001554:	08001955 	.word	0x08001955
 8001558:	08001955 	.word	0x08001955
 800155c:	08001955 	.word	0x08001955
 8001560:	0800158d 	.word	0x0800158d
 8001564:	08001955 	.word	0x08001955
 8001568:	08001955 	.word	0x08001955
 800156c:	08001955 	.word	0x08001955
 8001570:	08001595 	.word	0x08001595
 8001574:	08001955 	.word	0x08001955
 8001578:	08001955 	.word	0x08001955
 800157c:	08001955 	.word	0x08001955
 8001580:	08001785 	.word	0x08001785
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001584:	4bb9      	ldr	r3, [pc, #740]	@ (800186c <HAL_RCC_GetSysClockFreq+0x358>)
 8001586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800158a:	e1e7      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800158c:	4bb8      	ldr	r3, [pc, #736]	@ (8001870 <HAL_RCC_GetSysClockFreq+0x35c>)
 800158e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001592:	e1e3      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001594:	4bb4      	ldr	r3, [pc, #720]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x354>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800159c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a0:	4bb1      	ldr	r3, [pc, #708]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x354>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d071      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ac:	4bae      	ldr	r3, [pc, #696]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015d2:	4622      	mov	r2, r4
 80015d4:	462b      	mov	r3, r5
 80015d6:	f04f 0000 	mov.w	r0, #0
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	0159      	lsls	r1, r3, #5
 80015e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015e4:	0150      	lsls	r0, r2, #5
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4621      	mov	r1, r4
 80015ec:	1a51      	subs	r1, r2, r1
 80015ee:	6439      	str	r1, [r7, #64]	@ 0x40
 80015f0:	4629      	mov	r1, r5
 80015f2:	eb63 0301 	sbc.w	r3, r3, r1
 80015f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001604:	4649      	mov	r1, r9
 8001606:	018b      	lsls	r3, r1, #6
 8001608:	4641      	mov	r1, r8
 800160a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800160e:	4641      	mov	r1, r8
 8001610:	018a      	lsls	r2, r1, #6
 8001612:	4641      	mov	r1, r8
 8001614:	1a51      	subs	r1, r2, r1
 8001616:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001618:	4649      	mov	r1, r9
 800161a:	eb63 0301 	sbc.w	r3, r3, r1
 800161e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800162c:	4649      	mov	r1, r9
 800162e:	00cb      	lsls	r3, r1, #3
 8001630:	4641      	mov	r1, r8
 8001632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001636:	4641      	mov	r1, r8
 8001638:	00ca      	lsls	r2, r1, #3
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	4603      	mov	r3, r0
 8001640:	4622      	mov	r2, r4
 8001642:	189b      	adds	r3, r3, r2
 8001644:	633b      	str	r3, [r7, #48]	@ 0x30
 8001646:	462b      	mov	r3, r5
 8001648:	460a      	mov	r2, r1
 800164a:	eb42 0303 	adc.w	r3, r2, r3
 800164e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800165c:	4629      	mov	r1, r5
 800165e:	024b      	lsls	r3, r1, #9
 8001660:	4621      	mov	r1, r4
 8001662:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001666:	4621      	mov	r1, r4
 8001668:	024a      	lsls	r2, r1, #9
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001672:	2200      	movs	r2, #0
 8001674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001678:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800167c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001680:	f7fe fdc0 	bl	8000204 <__aeabi_uldivmod>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4613      	mov	r3, r2
 800168a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800168e:	e067      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001690:	4b75      	ldr	r3, [pc, #468]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x354>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	099b      	lsrs	r3, r3, #6
 8001696:	2200      	movs	r2, #0
 8001698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800169c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80016a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016aa:	2300      	movs	r3, #0
 80016ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016b2:	4622      	mov	r2, r4
 80016b4:	462b      	mov	r3, r5
 80016b6:	f04f 0000 	mov.w	r0, #0
 80016ba:	f04f 0100 	mov.w	r1, #0
 80016be:	0159      	lsls	r1, r3, #5
 80016c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c4:	0150      	lsls	r0, r2, #5
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4621      	mov	r1, r4
 80016cc:	1a51      	subs	r1, r2, r1
 80016ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016d0:	4629      	mov	r1, r5
 80016d2:	eb63 0301 	sbc.w	r3, r3, r1
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016e4:	4649      	mov	r1, r9
 80016e6:	018b      	lsls	r3, r1, #6
 80016e8:	4641      	mov	r1, r8
 80016ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ee:	4641      	mov	r1, r8
 80016f0:	018a      	lsls	r2, r1, #6
 80016f2:	4641      	mov	r1, r8
 80016f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80016f8:	4649      	mov	r1, r9
 80016fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800170a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800170e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001712:	4692      	mov	sl, r2
 8001714:	469b      	mov	fp, r3
 8001716:	4623      	mov	r3, r4
 8001718:	eb1a 0303 	adds.w	r3, sl, r3
 800171c:	623b      	str	r3, [r7, #32]
 800171e:	462b      	mov	r3, r5
 8001720:	eb4b 0303 	adc.w	r3, fp, r3
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001732:	4629      	mov	r1, r5
 8001734:	028b      	lsls	r3, r1, #10
 8001736:	4621      	mov	r1, r4
 8001738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800173c:	4621      	mov	r1, r4
 800173e:	028a      	lsls	r2, r1, #10
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001748:	2200      	movs	r2, #0
 800174a:	673b      	str	r3, [r7, #112]	@ 0x70
 800174c:	677a      	str	r2, [r7, #116]	@ 0x74
 800174e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001752:	f7fe fd57 	bl	8000204 <__aeabi_uldivmod>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4613      	mov	r3, r2
 800175c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001760:	4b41      	ldr	r3, [pc, #260]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x354>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	0c1b      	lsrs	r3, r3, #16
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	3301      	adds	r3, #1
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001782:	e0eb      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001784:	4b38      	ldr	r3, [pc, #224]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x354>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800178c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001790:	4b35      	ldr	r3, [pc, #212]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x354>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d06b      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800179c:	4b32      	ldr	r3, [pc, #200]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x354>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	099b      	lsrs	r3, r3, #6
 80017a2:	2200      	movs	r2, #0
 80017a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80017b0:	2300      	movs	r3, #0
 80017b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80017b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017b8:	4622      	mov	r2, r4
 80017ba:	462b      	mov	r3, r5
 80017bc:	f04f 0000 	mov.w	r0, #0
 80017c0:	f04f 0100 	mov.w	r1, #0
 80017c4:	0159      	lsls	r1, r3, #5
 80017c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ca:	0150      	lsls	r0, r2, #5
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4621      	mov	r1, r4
 80017d2:	1a51      	subs	r1, r2, r1
 80017d4:	61b9      	str	r1, [r7, #24]
 80017d6:	4629      	mov	r1, r5
 80017d8:	eb63 0301 	sbc.w	r3, r3, r1
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017ea:	4659      	mov	r1, fp
 80017ec:	018b      	lsls	r3, r1, #6
 80017ee:	4651      	mov	r1, sl
 80017f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017f4:	4651      	mov	r1, sl
 80017f6:	018a      	lsls	r2, r1, #6
 80017f8:	4651      	mov	r1, sl
 80017fa:	ebb2 0801 	subs.w	r8, r2, r1
 80017fe:	4659      	mov	r1, fp
 8001800:	eb63 0901 	sbc.w	r9, r3, r1
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001810:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001814:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001818:	4690      	mov	r8, r2
 800181a:	4699      	mov	r9, r3
 800181c:	4623      	mov	r3, r4
 800181e:	eb18 0303 	adds.w	r3, r8, r3
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	462b      	mov	r3, r5
 8001826:	eb49 0303 	adc.w	r3, r9, r3
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001838:	4629      	mov	r1, r5
 800183a:	024b      	lsls	r3, r1, #9
 800183c:	4621      	mov	r1, r4
 800183e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001842:	4621      	mov	r1, r4
 8001844:	024a      	lsls	r2, r1, #9
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800184e:	2200      	movs	r2, #0
 8001850:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001852:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001854:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001858:	f7fe fcd4 	bl	8000204 <__aeabi_uldivmod>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4613      	mov	r3, r2
 8001862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001866:	e065      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x420>
 8001868:	40023800 	.word	0x40023800
 800186c:	00f42400 	.word	0x00f42400
 8001870:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001874:	4b3d      	ldr	r3, [pc, #244]	@ (800196c <HAL_RCC_GetSysClockFreq+0x458>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	099b      	lsrs	r3, r3, #6
 800187a:	2200      	movs	r2, #0
 800187c:	4618      	mov	r0, r3
 800187e:	4611      	mov	r1, r2
 8001880:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001884:	653b      	str	r3, [r7, #80]	@ 0x50
 8001886:	2300      	movs	r3, #0
 8001888:	657b      	str	r3, [r7, #84]	@ 0x54
 800188a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800188e:	4642      	mov	r2, r8
 8001890:	464b      	mov	r3, r9
 8001892:	f04f 0000 	mov.w	r0, #0
 8001896:	f04f 0100 	mov.w	r1, #0
 800189a:	0159      	lsls	r1, r3, #5
 800189c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a0:	0150      	lsls	r0, r2, #5
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4641      	mov	r1, r8
 80018a8:	1a51      	subs	r1, r2, r1
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	4649      	mov	r1, r9
 80018ae:	eb63 0301 	sbc.w	r3, r3, r1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018c0:	4659      	mov	r1, fp
 80018c2:	018b      	lsls	r3, r1, #6
 80018c4:	4651      	mov	r1, sl
 80018c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ca:	4651      	mov	r1, sl
 80018cc:	018a      	lsls	r2, r1, #6
 80018ce:	4651      	mov	r1, sl
 80018d0:	1a54      	subs	r4, r2, r1
 80018d2:	4659      	mov	r1, fp
 80018d4:	eb63 0501 	sbc.w	r5, r3, r1
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	00eb      	lsls	r3, r5, #3
 80018e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e6:	00e2      	lsls	r2, r4, #3
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	4643      	mov	r3, r8
 80018ee:	18e3      	adds	r3, r4, r3
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	464b      	mov	r3, r9
 80018f4:	eb45 0303 	adc.w	r3, r5, r3
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001906:	4629      	mov	r1, r5
 8001908:	028b      	lsls	r3, r1, #10
 800190a:	4621      	mov	r1, r4
 800190c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001910:	4621      	mov	r1, r4
 8001912:	028a      	lsls	r2, r1, #10
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800191c:	2200      	movs	r2, #0
 800191e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001920:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001922:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001926:	f7fe fc6d 	bl	8000204 <__aeabi_uldivmod>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4613      	mov	r3, r2
 8001930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001934:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <HAL_RCC_GetSysClockFreq+0x458>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	0f1b      	lsrs	r3, r3, #28
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001952:	e003      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001956:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800195a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001960:	4618      	mov	r0, r3
 8001962:	37b8      	adds	r7, #184	@ 0xb8
 8001964:	46bd      	mov	sp, r7
 8001966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	00f42400 	.word	0x00f42400

08001974 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e28d      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8083 	beq.w	8001a9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001994:	4b94      	ldr	r3, [pc, #592]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b04      	cmp	r3, #4
 800199e:	d019      	beq.n	80019d4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019a0:	4b91      	ldr	r3, [pc, #580]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
        || \
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019ac:	4b8e      	ldr	r3, [pc, #568]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019b8:	d00c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ba:	4b8b      	ldr	r3, [pc, #556]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d112      	bne.n	80019ec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c6:	4b88      	ldr	r3, [pc, #544]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019d2:	d10b      	bne.n	80019ec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	4b84      	ldr	r3, [pc, #528]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d05b      	beq.n	8001a98 <HAL_RCC_OscConfig+0x124>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d157      	bne.n	8001a98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e25a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f4:	d106      	bne.n	8001a04 <HAL_RCC_OscConfig+0x90>
 80019f6:	4b7c      	ldr	r3, [pc, #496]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a7b      	ldr	r2, [pc, #492]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e01d      	b.n	8001a40 <HAL_RCC_OscConfig+0xcc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0xb4>
 8001a0e:	4b76      	ldr	r3, [pc, #472]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a75      	ldr	r2, [pc, #468]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b73      	ldr	r3, [pc, #460]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a72      	ldr	r2, [pc, #456]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0xcc>
 8001a28:	4b6f      	ldr	r3, [pc, #444]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b6c      	ldr	r3, [pc, #432]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a6b      	ldr	r2, [pc, #428]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d013      	beq.n	8001a70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f94c 	bl	8000ce4 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff f948 	bl	8000ce4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	@ 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e21f      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	4b61      	ldr	r3, [pc, #388]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0xdc>
 8001a6e:	e014      	b.n	8001a9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff f938 	bl	8000ce4 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff f934 	bl	8000ce4 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	@ 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e20b      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	4b57      	ldr	r3, [pc, #348]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x104>
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d06f      	beq.n	8001b86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001aa6:	4b50      	ldr	r3, [pc, #320]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d017      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ab2:	4b4d      	ldr	r3, [pc, #308]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
        || \
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001abe:	4b4a      	ldr	r3, [pc, #296]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aca:	4b47      	ldr	r3, [pc, #284]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d11c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad6:	4b44      	ldr	r3, [pc, #272]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d116      	bne.n	8001b10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	4b41      	ldr	r3, [pc, #260]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <HAL_RCC_OscConfig+0x186>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d001      	beq.n	8001afa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e1d3      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b3b      	ldr	r3, [pc, #236]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4937      	ldr	r1, [pc, #220]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	e03a      	b.n	8001b86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b18:	4b34      	ldr	r3, [pc, #208]	@ (8001bec <HAL_RCC_OscConfig+0x278>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f8e1 	bl	8000ce4 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff f8dd 	bl	8000ce4 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1b4      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b28      	ldr	r3, [pc, #160]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4925      	ldr	r1, [pc, #148]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e015      	b.n	8001b86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5a:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <HAL_RCC_OscConfig+0x278>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff f8c0 	bl	8000ce4 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b68:	f7ff f8bc 	bl	8000ce4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e193      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d036      	beq.n	8001c00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d016      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba0:	f7ff f8a0 	bl	8000ce4 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff f89c 	bl	8000ce4 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e173      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x234>
 8001bc6:	e01b      	b.n	8001c00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc8:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bce:	f7ff f889 	bl	8000ce4 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	e00e      	b.n	8001bf4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd6:	f7ff f885 	bl	8000ce4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d907      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e15c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
 8001be8:	40023800 	.word	0x40023800
 8001bec:	42470000 	.word	0x42470000
 8001bf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	4b8a      	ldr	r3, [pc, #552]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ea      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8097 	beq.w	8001d3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c12:	4b83      	ldr	r3, [pc, #524]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10f      	bne.n	8001c3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b7f      	ldr	r3, [pc, #508]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	4a7e      	ldr	r2, [pc, #504]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b79      	ldr	r3, [pc, #484]	@ (8001e24 <HAL_RCC_OscConfig+0x4b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4a:	4b76      	ldr	r3, [pc, #472]	@ (8001e24 <HAL_RCC_OscConfig+0x4b0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a75      	ldr	r2, [pc, #468]	@ (8001e24 <HAL_RCC_OscConfig+0x4b0>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7ff f845 	bl	8000ce4 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7ff f841 	bl	8000ce4 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e118      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b6c      	ldr	r3, [pc, #432]	@ (8001e24 <HAL_RCC_OscConfig+0x4b0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x31e>
 8001c84:	4b66      	ldr	r3, [pc, #408]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c88:	4a65      	ldr	r2, [pc, #404]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c90:	e01c      	b.n	8001ccc <HAL_RCC_OscConfig+0x358>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b05      	cmp	r3, #5
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x340>
 8001c9a:	4b61      	ldr	r3, [pc, #388]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9e:	4a60      	ldr	r2, [pc, #384]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca6:	4b5e      	ldr	r3, [pc, #376]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001caa:	4a5d      	ldr	r2, [pc, #372]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0x358>
 8001cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb8:	4a59      	ldr	r2, [pc, #356]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cc0:	4b57      	ldr	r3, [pc, #348]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc4:	4a56      	ldr	r2, [pc, #344]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001cc6:	f023 0304 	bic.w	r3, r3, #4
 8001cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d015      	beq.n	8001d00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff f806 	bl	8000ce4 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7ff f802 	bl	8000ce4 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0d7      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0ee      	beq.n	8001cdc <HAL_RCC_OscConfig+0x368>
 8001cfe:	e014      	b.n	8001d2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7fe fff0 	bl	8000ce4 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7fe ffec 	bl	8000ce4 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e0c1      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1e:	4b40      	ldr	r3, [pc, #256]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ee      	bne.n	8001d08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d105      	bne.n	8001d3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d30:	4b3b      	ldr	r3, [pc, #236]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	4a3a      	ldr	r2, [pc, #232]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80ad 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d46:	4b36      	ldr	r3, [pc, #216]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d060      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d145      	bne.n	8001de6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b33      	ldr	r3, [pc, #204]	@ (8001e28 <HAL_RCC_OscConfig+0x4b4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7fe ffc0 	bl	8000ce4 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe ffbc 	bl	8000ce4 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e093      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7a:	4b29      	ldr	r3, [pc, #164]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d94:	019b      	lsls	r3, r3, #6
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	085b      	lsrs	r3, r3, #1
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	041b      	lsls	r3, r3, #16
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	071b      	lsls	r3, r3, #28
 8001db2:	491b      	ldr	r1, [pc, #108]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e28 <HAL_RCC_OscConfig+0x4b4>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7fe ff91 	bl	8000ce4 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe ff8d 	bl	8000ce4 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e064      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x452>
 8001de4:	e05c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <HAL_RCC_OscConfig+0x4b4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7fe ff7a 	bl	8000ce4 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7fe ff76 	bl	8000ce4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e04d      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_RCC_OscConfig+0x4ac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x480>
 8001e12:	e045      	b.n	8001ea0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e040      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000
 8001e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001eac <HAL_RCC_OscConfig+0x538>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d030      	beq.n	8001e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d129      	bne.n	8001e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d122      	bne.n	8001e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d119      	bne.n	8001e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	3b01      	subs	r3, #1
 8001e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d10f      	bne.n	8001e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800

08001eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e041      	b.n	8001f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fd28 	bl	800092c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3304      	adds	r3, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4610      	mov	r0, r2
 8001ef0:	f000 fa7e 	bl	80023f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d001      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e04e      	b.n	8002006 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a23      	ldr	r2, [pc, #140]	@ (8002014 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d022      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f92:	d01d      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1f      	ldr	r2, [pc, #124]	@ (8002018 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d018      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800201c <HAL_TIM_Base_Start_IT+0xcc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1c      	ldr	r2, [pc, #112]	@ (8002020 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00e      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002024 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d009      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a19      	ldr	r2, [pc, #100]	@ (8002028 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d004      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a18      	ldr	r2, [pc, #96]	@ (800202c <HAL_TIM_Base_Start_IT+0xdc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d111      	bne.n	8001ff4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d010      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff2:	e007      	b.n	8002004 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	40000400 	.word	0x40000400
 800201c:	40000800 	.word	0x40000800
 8002020:	40000c00 	.word	0x40000c00
 8002024:	40010400 	.word	0x40010400
 8002028:	40014000 	.word	0x40014000
 800202c:	40001800 	.word	0x40001800

08002030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d020      	beq.n	8002094 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01b      	beq.n	8002094 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0202 	mvn.w	r2, #2
 8002064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f999 	bl	80023b2 <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f98b 	bl	800239e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f99c 	bl	80023c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d020      	beq.n	80020e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01b      	beq.n	80020e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0204 	mvn.w	r2, #4
 80020b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2202      	movs	r2, #2
 80020b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f973 	bl	80023b2 <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f965 	bl	800239e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f976 	bl	80023c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d020      	beq.n	800212c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0208 	mvn.w	r2, #8
 80020fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2204      	movs	r2, #4
 8002102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f94d 	bl	80023b2 <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f93f 	bl	800239e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f950 	bl	80023c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d020      	beq.n	8002178 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01b      	beq.n	8002178 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0210 	mvn.w	r2, #16
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2208      	movs	r2, #8
 800214e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f927 	bl	80023b2 <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f919 	bl	800239e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f92a 	bl	80023c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0201 	mvn.w	r2, #1
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe f9fc 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fade 	bl	800277c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00c      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f8fb 	bl	80023da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00c      	beq.n	8002208 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d007      	beq.n	8002208 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0220 	mvn.w	r2, #32
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fab0 	bl	8002768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_TIM_ConfigClockSource+0x1c>
 8002228:	2302      	movs	r3, #2
 800222a:	e0b4      	b.n	8002396 <HAL_TIM_ConfigClockSource+0x186>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800224a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002264:	d03e      	beq.n	80022e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800226a:	f200 8087 	bhi.w	800237c <HAL_TIM_ConfigClockSource+0x16c>
 800226e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002272:	f000 8086 	beq.w	8002382 <HAL_TIM_ConfigClockSource+0x172>
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800227a:	d87f      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 800227c:	2b70      	cmp	r3, #112	@ 0x70
 800227e:	d01a      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002280:	2b70      	cmp	r3, #112	@ 0x70
 8002282:	d87b      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 8002284:	2b60      	cmp	r3, #96	@ 0x60
 8002286:	d050      	beq.n	800232a <HAL_TIM_ConfigClockSource+0x11a>
 8002288:	2b60      	cmp	r3, #96	@ 0x60
 800228a:	d877      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 800228c:	2b50      	cmp	r3, #80	@ 0x50
 800228e:	d03c      	beq.n	800230a <HAL_TIM_ConfigClockSource+0xfa>
 8002290:	2b50      	cmp	r3, #80	@ 0x50
 8002292:	d873      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 8002294:	2b40      	cmp	r3, #64	@ 0x40
 8002296:	d058      	beq.n	800234a <HAL_TIM_ConfigClockSource+0x13a>
 8002298:	2b40      	cmp	r3, #64	@ 0x40
 800229a:	d86f      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 800229c:	2b30      	cmp	r3, #48	@ 0x30
 800229e:	d064      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x15a>
 80022a0:	2b30      	cmp	r3, #48	@ 0x30
 80022a2:	d86b      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d060      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x15a>
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d867      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d05c      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x15a>
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d05a      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x15a>
 80022b4:	e062      	b.n	800237c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022c6:	f000 f9b3 	bl	8002630 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80022d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	609a      	str	r2, [r3, #8]
      break;
 80022e2:	e04f      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022f4:	f000 f99c 	bl	8002630 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002306:	609a      	str	r2, [r3, #8]
      break;
 8002308:	e03c      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002316:	461a      	mov	r2, r3
 8002318:	f000 f910 	bl	800253c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2150      	movs	r1, #80	@ 0x50
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f969 	bl	80025fa <TIM_ITRx_SetConfig>
      break;
 8002328:	e02c      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002336:	461a      	mov	r2, r3
 8002338:	f000 f92f 	bl	800259a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2160      	movs	r1, #96	@ 0x60
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f959 	bl	80025fa <TIM_ITRx_SetConfig>
      break;
 8002348:	e01c      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002356:	461a      	mov	r2, r3
 8002358:	f000 f8f0 	bl	800253c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2140      	movs	r1, #64	@ 0x40
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f949 	bl	80025fa <TIM_ITRx_SetConfig>
      break;
 8002368:	e00c      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f000 f940 	bl	80025fa <TIM_ITRx_SetConfig>
      break;
 800237a:	e003      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      break;
 8002380:	e000      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a43      	ldr	r2, [pc, #268]	@ (8002510 <TIM_Base_SetConfig+0x120>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800240e:	d00f      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a40      	ldr	r2, [pc, #256]	@ (8002514 <TIM_Base_SetConfig+0x124>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00b      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a3f      	ldr	r2, [pc, #252]	@ (8002518 <TIM_Base_SetConfig+0x128>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3e      	ldr	r2, [pc, #248]	@ (800251c <TIM_Base_SetConfig+0x12c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d003      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a3d      	ldr	r2, [pc, #244]	@ (8002520 <TIM_Base_SetConfig+0x130>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d108      	bne.n	8002442 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a32      	ldr	r2, [pc, #200]	@ (8002510 <TIM_Base_SetConfig+0x120>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d02b      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002450:	d027      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a2f      	ldr	r2, [pc, #188]	@ (8002514 <TIM_Base_SetConfig+0x124>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d023      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a2e      	ldr	r2, [pc, #184]	@ (8002518 <TIM_Base_SetConfig+0x128>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01f      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a2d      	ldr	r2, [pc, #180]	@ (800251c <TIM_Base_SetConfig+0x12c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01b      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a2c      	ldr	r2, [pc, #176]	@ (8002520 <TIM_Base_SetConfig+0x130>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d017      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a2b      	ldr	r2, [pc, #172]	@ (8002524 <TIM_Base_SetConfig+0x134>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a2a      	ldr	r2, [pc, #168]	@ (8002528 <TIM_Base_SetConfig+0x138>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00f      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a29      	ldr	r2, [pc, #164]	@ (800252c <TIM_Base_SetConfig+0x13c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00b      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a28      	ldr	r2, [pc, #160]	@ (8002530 <TIM_Base_SetConfig+0x140>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a27      	ldr	r2, [pc, #156]	@ (8002534 <TIM_Base_SetConfig+0x144>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d003      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a26      	ldr	r2, [pc, #152]	@ (8002538 <TIM_Base_SetConfig+0x148>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d108      	bne.n	80024b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002510 <TIM_Base_SetConfig+0x120>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d003      	beq.n	80024e2 <TIM_Base_SetConfig+0xf2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a10      	ldr	r2, [pc, #64]	@ (8002520 <TIM_Base_SetConfig+0x130>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d103      	bne.n	80024ea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f043 0204 	orr.w	r2, r3, #4
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	601a      	str	r2, [r3, #0]
}
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40010000 	.word	0x40010000
 8002514:	40000400 	.word	0x40000400
 8002518:	40000800 	.word	0x40000800
 800251c:	40000c00 	.word	0x40000c00
 8002520:	40010400 	.word	0x40010400
 8002524:	40014000 	.word	0x40014000
 8002528:	40014400 	.word	0x40014400
 800252c:	40014800 	.word	0x40014800
 8002530:	40001800 	.word	0x40001800
 8002534:	40001c00 	.word	0x40001c00
 8002538:	40002000 	.word	0x40002000

0800253c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	f023 0201 	bic.w	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f023 030a 	bic.w	r3, r3, #10
 8002578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	621a      	str	r2, [r3, #32]
}
 800258e:	bf00      	nop
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800259a:	b480      	push	{r7}
 800259c:	b087      	sub	sp, #28
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f023 0210 	bic.w	r2, r3, #16
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80025c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	031b      	lsls	r3, r3, #12
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80025d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	621a      	str	r2, [r3, #32]
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	f043 0307 	orr.w	r3, r3, #7
 800261c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	609a      	str	r2, [r3, #8]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800264a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	021a      	lsls	r2, r3, #8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	431a      	orrs	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	609a      	str	r2, [r3, #8]
}
 8002664:	bf00      	nop
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002684:	2302      	movs	r3, #2
 8002686:	e05a      	b.n	800273e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a21      	ldr	r2, [pc, #132]	@ (800274c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d022      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d4:	d01d      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1d      	ldr	r2, [pc, #116]	@ (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d018      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00e      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a18      	ldr	r2, [pc, #96]	@ (800275c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d009      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a17      	ldr	r2, [pc, #92]	@ (8002760 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d004      	beq.n	8002712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a15      	ldr	r2, [pc, #84]	@ (8002764 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10c      	bne.n	800272c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	4313      	orrs	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40010000 	.word	0x40010000
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800
 8002758:	40000c00 	.word	0x40000c00
 800275c:	40010400 	.word	0x40010400
 8002760:	40014000 	.word	0x40014000
 8002764:	40001800 	.word	0x40001800

08002768 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e042      	b.n	8002828 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe f8e0 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2224      	movs	r2, #36	@ 0x24
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f973 	bl	8002ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	@ 0x28
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b20      	cmp	r3, #32
 800284e:	d175      	bne.n	800293c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_UART_Transmit+0x2c>
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e06e      	b.n	800293e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2221      	movs	r2, #33	@ 0x21
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286e:	f7fe fa39 	bl	8000ce4 <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002888:	d108      	bne.n	800289c <HAL_UART_Transmit+0x6c>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e003      	b.n	80028a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028a4:	e02e      	b.n	8002904 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2180      	movs	r1, #128	@ 0x80
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f848 	bl	8002946 <UART_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e03a      	b.n	800293e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	3302      	adds	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	e007      	b.n	80028f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	781a      	ldrb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1cb      	bne.n	80028a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2140      	movs	r1, #64	@ 0x40
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f814 	bl	8002946 <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e006      	b.n	800293e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4613      	mov	r3, r2
 8002954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002956:	e03b      	b.n	80029d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d037      	beq.n	80029d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002960:	f7fe f9c0 	bl	8000ce4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	6a3a      	ldr	r2, [r7, #32]
 800296c:	429a      	cmp	r2, r3
 800296e:	d302      	bcc.n	8002976 <UART_WaitOnFlagUntilTimeout+0x30>
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e03a      	b.n	80029f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d023      	beq.n	80029d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b80      	cmp	r3, #128	@ 0x80
 800298c:	d020      	beq.n	80029d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b40      	cmp	r3, #64	@ 0x40
 8002992:	d01d      	beq.n	80029d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d116      	bne.n	80029d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f81d 	bl	80029f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2208      	movs	r2, #8
 80029c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e00f      	b.n	80029f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4013      	ands	r3, r2
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	429a      	cmp	r2, r3
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d0b4      	beq.n	8002958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b095      	sub	sp, #84	@ 0x54
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0a:	e853 3f00 	ldrex	r3, [r3]
 8002a0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a20:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a28:	e841 2300 	strex	r3, r2, [r1]
 8002a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e5      	bne.n	8002a00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3314      	adds	r3, #20
 8002a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	e853 3f00 	ldrex	r3, [r3]
 8002a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3314      	adds	r3, #20
 8002a52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a5c:	e841 2300 	strex	r3, r2, [r1]
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e5      	bne.n	8002a34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d119      	bne.n	8002aa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	e853 3f00 	ldrex	r3, [r3]
 8002a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f023 0310 	bic.w	r3, r3, #16
 8002a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a90:	61ba      	str	r2, [r7, #24]
 8002a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a94:	6979      	ldr	r1, [r7, #20]
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	e841 2300 	strex	r3, r2, [r1]
 8002a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e5      	bne.n	8002a70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ab2:	bf00      	nop
 8002ab4:	3754      	adds	r7, #84	@ 0x54
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac4:	b0c0      	sub	sp, #256	@ 0x100
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002adc:	68d9      	ldr	r1, [r3, #12]
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	ea40 0301 	orr.w	r3, r0, r1
 8002ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b18:	f021 010c 	bic.w	r1, r1, #12
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b26:	430b      	orrs	r3, r1
 8002b28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3a:	6999      	ldr	r1, [r3, #24]
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	ea40 0301 	orr.w	r3, r0, r1
 8002b46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b8f      	ldr	r3, [pc, #572]	@ (8002d8c <UART_SetConfig+0x2cc>)
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d005      	beq.n	8002b60 <UART_SetConfig+0xa0>
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8002d90 <UART_SetConfig+0x2d0>)
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d104      	bne.n	8002b6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b60:	f7fe fcc4 	bl	80014ec <HAL_RCC_GetPCLK2Freq>
 8002b64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b68:	e003      	b.n	8002b72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b6a:	f7fe fcab 	bl	80014c4 <HAL_RCC_GetPCLK1Freq>
 8002b6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b7c:	f040 810c 	bne.w	8002d98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b84:	2200      	movs	r2, #0
 8002b86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b92:	4622      	mov	r2, r4
 8002b94:	462b      	mov	r3, r5
 8002b96:	1891      	adds	r1, r2, r2
 8002b98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b9a:	415b      	adcs	r3, r3
 8002b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	eb12 0801 	adds.w	r8, r2, r1
 8002ba8:	4629      	mov	r1, r5
 8002baa:	eb43 0901 	adc.w	r9, r3, r1
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bc2:	4690      	mov	r8, r2
 8002bc4:	4699      	mov	r9, r3
 8002bc6:	4623      	mov	r3, r4
 8002bc8:	eb18 0303 	adds.w	r3, r8, r3
 8002bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	eb49 0303 	adc.w	r3, r9, r3
 8002bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002be6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002bea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002bee:	460b      	mov	r3, r1
 8002bf0:	18db      	adds	r3, r3, r3
 8002bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	eb42 0303 	adc.w	r3, r2, r3
 8002bfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c04:	f7fd fafe 	bl	8000204 <__aeabi_uldivmod>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4b61      	ldr	r3, [pc, #388]	@ (8002d94 <UART_SetConfig+0x2d4>)
 8002c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	011c      	lsls	r4, r3, #4
 8002c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c28:	4642      	mov	r2, r8
 8002c2a:	464b      	mov	r3, r9
 8002c2c:	1891      	adds	r1, r2, r2
 8002c2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c30:	415b      	adcs	r3, r3
 8002c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c38:	4641      	mov	r1, r8
 8002c3a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c3e:	4649      	mov	r1, r9
 8002c40:	eb43 0b01 	adc.w	fp, r3, r1
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c58:	4692      	mov	sl, r2
 8002c5a:	469b      	mov	fp, r3
 8002c5c:	4643      	mov	r3, r8
 8002c5e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c66:	464b      	mov	r3, r9
 8002c68:	eb4b 0303 	adc.w	r3, fp, r3
 8002c6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c84:	460b      	mov	r3, r1
 8002c86:	18db      	adds	r3, r3, r3
 8002c88:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	eb42 0303 	adc.w	r3, r2, r3
 8002c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c9a:	f7fd fab3 	bl	8000204 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8002d94 <UART_SetConfig+0x2d4>)
 8002ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2264      	movs	r2, #100	@ 0x64
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	1acb      	subs	r3, r1, r3
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002cba:	4b36      	ldr	r3, [pc, #216]	@ (8002d94 <UART_SetConfig+0x2d4>)
 8002cbc:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cc8:	441c      	add	r4, r3
 8002cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002cd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002cdc:	4642      	mov	r2, r8
 8002cde:	464b      	mov	r3, r9
 8002ce0:	1891      	adds	r1, r2, r2
 8002ce2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ce4:	415b      	adcs	r3, r3
 8002ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002cec:	4641      	mov	r1, r8
 8002cee:	1851      	adds	r1, r2, r1
 8002cf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	414b      	adcs	r3, r1
 8002cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d04:	4659      	mov	r1, fp
 8002d06:	00cb      	lsls	r3, r1, #3
 8002d08:	4651      	mov	r1, sl
 8002d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d0e:	4651      	mov	r1, sl
 8002d10:	00ca      	lsls	r2, r1, #3
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	4642      	mov	r2, r8
 8002d1a:	189b      	adds	r3, r3, r2
 8002d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d20:	464b      	mov	r3, r9
 8002d22:	460a      	mov	r2, r1
 8002d24:	eb42 0303 	adc.w	r3, r2, r3
 8002d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d40:	460b      	mov	r3, r1
 8002d42:	18db      	adds	r3, r3, r3
 8002d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d46:	4613      	mov	r3, r2
 8002d48:	eb42 0303 	adc.w	r3, r2, r3
 8002d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d56:	f7fd fa55 	bl	8000204 <__aeabi_uldivmod>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <UART_SetConfig+0x2d4>)
 8002d60:	fba3 1302 	umull	r1, r3, r3, r2
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	2164      	movs	r1, #100	@ 0x64
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	3332      	adds	r3, #50	@ 0x32
 8002d72:	4a08      	ldr	r2, [pc, #32]	@ (8002d94 <UART_SetConfig+0x2d4>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	f003 0207 	and.w	r2, r3, #7
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4422      	add	r2, r4
 8002d86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d88:	e106      	b.n	8002f98 <UART_SetConfig+0x4d8>
 8002d8a:	bf00      	nop
 8002d8c:	40011000 	.word	0x40011000
 8002d90:	40011400 	.word	0x40011400
 8002d94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002da2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002da6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002daa:	4642      	mov	r2, r8
 8002dac:	464b      	mov	r3, r9
 8002dae:	1891      	adds	r1, r2, r2
 8002db0:	6239      	str	r1, [r7, #32]
 8002db2:	415b      	adcs	r3, r3
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dba:	4641      	mov	r1, r8
 8002dbc:	1854      	adds	r4, r2, r1
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	eb43 0501 	adc.w	r5, r3, r1
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	00eb      	lsls	r3, r5, #3
 8002dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dd2:	00e2      	lsls	r2, r4, #3
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	461d      	mov	r5, r3
 8002dd8:	4643      	mov	r3, r8
 8002dda:	18e3      	adds	r3, r4, r3
 8002ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002de0:	464b      	mov	r3, r9
 8002de2:	eb45 0303 	adc.w	r3, r5, r3
 8002de6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002df6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e06:	4629      	mov	r1, r5
 8002e08:	008b      	lsls	r3, r1, #2
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e10:	4621      	mov	r1, r4
 8002e12:	008a      	lsls	r2, r1, #2
 8002e14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e18:	f7fd f9f4 	bl	8000204 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4b60      	ldr	r3, [pc, #384]	@ (8002fa4 <UART_SetConfig+0x4e4>)
 8002e22:	fba3 2302 	umull	r2, r3, r3, r2
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	011c      	lsls	r4, r3, #4
 8002e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e3c:	4642      	mov	r2, r8
 8002e3e:	464b      	mov	r3, r9
 8002e40:	1891      	adds	r1, r2, r2
 8002e42:	61b9      	str	r1, [r7, #24]
 8002e44:	415b      	adcs	r3, r3
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e4c:	4641      	mov	r1, r8
 8002e4e:	1851      	adds	r1, r2, r1
 8002e50:	6139      	str	r1, [r7, #16]
 8002e52:	4649      	mov	r1, r9
 8002e54:	414b      	adcs	r3, r1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e64:	4659      	mov	r1, fp
 8002e66:	00cb      	lsls	r3, r1, #3
 8002e68:	4651      	mov	r1, sl
 8002e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e6e:	4651      	mov	r1, sl
 8002e70:	00ca      	lsls	r2, r1, #3
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	4642      	mov	r2, r8
 8002e7a:	189b      	adds	r3, r3, r2
 8002e7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e80:	464b      	mov	r3, r9
 8002e82:	460a      	mov	r2, r1
 8002e84:	eb42 0303 	adc.w	r3, r2, r3
 8002e88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ea4:	4649      	mov	r1, r9
 8002ea6:	008b      	lsls	r3, r1, #2
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eae:	4641      	mov	r1, r8
 8002eb0:	008a      	lsls	r2, r1, #2
 8002eb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002eb6:	f7fd f9a5 	bl	8000204 <__aeabi_uldivmod>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4b38      	ldr	r3, [pc, #224]	@ (8002fa4 <UART_SetConfig+0x4e4>)
 8002ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2264      	movs	r2, #100	@ 0x64
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	1acb      	subs	r3, r1, r3
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	3332      	adds	r3, #50	@ 0x32
 8002ed4:	4a33      	ldr	r2, [pc, #204]	@ (8002fa4 <UART_SetConfig+0x4e4>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ee0:	441c      	add	r4, r3
 8002ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002eea:	677a      	str	r2, [r7, #116]	@ 0x74
 8002eec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ef0:	4642      	mov	r2, r8
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	1891      	adds	r1, r2, r2
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	415b      	adcs	r3, r3
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f00:	4641      	mov	r1, r8
 8002f02:	1851      	adds	r1, r2, r1
 8002f04:	6039      	str	r1, [r7, #0]
 8002f06:	4649      	mov	r1, r9
 8002f08:	414b      	adcs	r3, r1
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f18:	4659      	mov	r1, fp
 8002f1a:	00cb      	lsls	r3, r1, #3
 8002f1c:	4651      	mov	r1, sl
 8002f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f22:	4651      	mov	r1, sl
 8002f24:	00ca      	lsls	r2, r1, #3
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4642      	mov	r2, r8
 8002f2e:	189b      	adds	r3, r3, r2
 8002f30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f32:	464b      	mov	r3, r9
 8002f34:	460a      	mov	r2, r1
 8002f36:	eb42 0303 	adc.w	r3, r2, r3
 8002f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f46:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f54:	4649      	mov	r1, r9
 8002f56:	008b      	lsls	r3, r1, #2
 8002f58:	4641      	mov	r1, r8
 8002f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f5e:	4641      	mov	r1, r8
 8002f60:	008a      	lsls	r2, r1, #2
 8002f62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f66:	f7fd f94d 	bl	8000204 <__aeabi_uldivmod>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa4 <UART_SetConfig+0x4e4>)
 8002f70:	fba3 1302 	umull	r1, r3, r3, r2
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	2164      	movs	r1, #100	@ 0x64
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	3332      	adds	r3, #50	@ 0x32
 8002f82:	4a08      	ldr	r2, [pc, #32]	@ (8002fa4 <UART_SetConfig+0x4e4>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	f003 020f 	and.w	r2, r3, #15
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4422      	add	r2, r4
 8002f96:	609a      	str	r2, [r3, #8]
}
 8002f98:	bf00      	nop
 8002f9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fa4:	51eb851f 	.word	0x51eb851f

08002fa8 <std>:
 8002fa8:	2300      	movs	r3, #0
 8002faa:	b510      	push	{r4, lr}
 8002fac:	4604      	mov	r4, r0
 8002fae:	e9c0 3300 	strd	r3, r3, [r0]
 8002fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fb6:	6083      	str	r3, [r0, #8]
 8002fb8:	8181      	strh	r1, [r0, #12]
 8002fba:	6643      	str	r3, [r0, #100]	@ 0x64
 8002fbc:	81c2      	strh	r2, [r0, #14]
 8002fbe:	6183      	str	r3, [r0, #24]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	305c      	adds	r0, #92	@ 0x5c
 8002fc6:	f000 f9e7 	bl	8003398 <memset>
 8002fca:	4b0d      	ldr	r3, [pc, #52]	@ (8003000 <std+0x58>)
 8002fcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8002fce:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <std+0x5c>)
 8002fd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <std+0x60>)
 8002fd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <std+0x64>)
 8002fd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8002fda:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <std+0x68>)
 8002fdc:	6224      	str	r4, [r4, #32]
 8002fde:	429c      	cmp	r4, r3
 8002fe0:	d006      	beq.n	8002ff0 <std+0x48>
 8002fe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002fe6:	4294      	cmp	r4, r2
 8002fe8:	d002      	beq.n	8002ff0 <std+0x48>
 8002fea:	33d0      	adds	r3, #208	@ 0xd0
 8002fec:	429c      	cmp	r4, r3
 8002fee:	d105      	bne.n	8002ffc <std+0x54>
 8002ff0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff8:	f000 ba46 	b.w	8003488 <__retarget_lock_init_recursive>
 8002ffc:	bd10      	pop	{r4, pc}
 8002ffe:	bf00      	nop
 8003000:	080031e9 	.word	0x080031e9
 8003004:	0800320b 	.word	0x0800320b
 8003008:	08003243 	.word	0x08003243
 800300c:	08003267 	.word	0x08003267
 8003010:	20000120 	.word	0x20000120

08003014 <stdio_exit_handler>:
 8003014:	4a02      	ldr	r2, [pc, #8]	@ (8003020 <stdio_exit_handler+0xc>)
 8003016:	4903      	ldr	r1, [pc, #12]	@ (8003024 <stdio_exit_handler+0x10>)
 8003018:	4803      	ldr	r0, [pc, #12]	@ (8003028 <stdio_exit_handler+0x14>)
 800301a:	f000 b869 	b.w	80030f0 <_fwalk_sglue>
 800301e:	bf00      	nop
 8003020:	2000000c 	.word	0x2000000c
 8003024:	08003789 	.word	0x08003789
 8003028:	2000001c 	.word	0x2000001c

0800302c <cleanup_stdio>:
 800302c:	6841      	ldr	r1, [r0, #4]
 800302e:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <cleanup_stdio+0x34>)
 8003030:	4299      	cmp	r1, r3
 8003032:	b510      	push	{r4, lr}
 8003034:	4604      	mov	r4, r0
 8003036:	d001      	beq.n	800303c <cleanup_stdio+0x10>
 8003038:	f000 fba6 	bl	8003788 <_fflush_r>
 800303c:	68a1      	ldr	r1, [r4, #8]
 800303e:	4b09      	ldr	r3, [pc, #36]	@ (8003064 <cleanup_stdio+0x38>)
 8003040:	4299      	cmp	r1, r3
 8003042:	d002      	beq.n	800304a <cleanup_stdio+0x1e>
 8003044:	4620      	mov	r0, r4
 8003046:	f000 fb9f 	bl	8003788 <_fflush_r>
 800304a:	68e1      	ldr	r1, [r4, #12]
 800304c:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <cleanup_stdio+0x3c>)
 800304e:	4299      	cmp	r1, r3
 8003050:	d004      	beq.n	800305c <cleanup_stdio+0x30>
 8003052:	4620      	mov	r0, r4
 8003054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003058:	f000 bb96 	b.w	8003788 <_fflush_r>
 800305c:	bd10      	pop	{r4, pc}
 800305e:	bf00      	nop
 8003060:	20000120 	.word	0x20000120
 8003064:	20000188 	.word	0x20000188
 8003068:	200001f0 	.word	0x200001f0

0800306c <global_stdio_init.part.0>:
 800306c:	b510      	push	{r4, lr}
 800306e:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <global_stdio_init.part.0+0x30>)
 8003070:	4c0b      	ldr	r4, [pc, #44]	@ (80030a0 <global_stdio_init.part.0+0x34>)
 8003072:	4a0c      	ldr	r2, [pc, #48]	@ (80030a4 <global_stdio_init.part.0+0x38>)
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	4620      	mov	r0, r4
 8003078:	2200      	movs	r2, #0
 800307a:	2104      	movs	r1, #4
 800307c:	f7ff ff94 	bl	8002fa8 <std>
 8003080:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003084:	2201      	movs	r2, #1
 8003086:	2109      	movs	r1, #9
 8003088:	f7ff ff8e 	bl	8002fa8 <std>
 800308c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003090:	2202      	movs	r2, #2
 8003092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003096:	2112      	movs	r1, #18
 8003098:	f7ff bf86 	b.w	8002fa8 <std>
 800309c:	20000258 	.word	0x20000258
 80030a0:	20000120 	.word	0x20000120
 80030a4:	08003015 	.word	0x08003015

080030a8 <__sfp_lock_acquire>:
 80030a8:	4801      	ldr	r0, [pc, #4]	@ (80030b0 <__sfp_lock_acquire+0x8>)
 80030aa:	f000 b9ee 	b.w	800348a <__retarget_lock_acquire_recursive>
 80030ae:	bf00      	nop
 80030b0:	20000261 	.word	0x20000261

080030b4 <__sfp_lock_release>:
 80030b4:	4801      	ldr	r0, [pc, #4]	@ (80030bc <__sfp_lock_release+0x8>)
 80030b6:	f000 b9e9 	b.w	800348c <__retarget_lock_release_recursive>
 80030ba:	bf00      	nop
 80030bc:	20000261 	.word	0x20000261

080030c0 <__sinit>:
 80030c0:	b510      	push	{r4, lr}
 80030c2:	4604      	mov	r4, r0
 80030c4:	f7ff fff0 	bl	80030a8 <__sfp_lock_acquire>
 80030c8:	6a23      	ldr	r3, [r4, #32]
 80030ca:	b11b      	cbz	r3, 80030d4 <__sinit+0x14>
 80030cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d0:	f7ff bff0 	b.w	80030b4 <__sfp_lock_release>
 80030d4:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <__sinit+0x28>)
 80030d6:	6223      	str	r3, [r4, #32]
 80030d8:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <__sinit+0x2c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f5      	bne.n	80030cc <__sinit+0xc>
 80030e0:	f7ff ffc4 	bl	800306c <global_stdio_init.part.0>
 80030e4:	e7f2      	b.n	80030cc <__sinit+0xc>
 80030e6:	bf00      	nop
 80030e8:	0800302d 	.word	0x0800302d
 80030ec:	20000258 	.word	0x20000258

080030f0 <_fwalk_sglue>:
 80030f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030f4:	4607      	mov	r7, r0
 80030f6:	4688      	mov	r8, r1
 80030f8:	4614      	mov	r4, r2
 80030fa:	2600      	movs	r6, #0
 80030fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003100:	f1b9 0901 	subs.w	r9, r9, #1
 8003104:	d505      	bpl.n	8003112 <_fwalk_sglue+0x22>
 8003106:	6824      	ldr	r4, [r4, #0]
 8003108:	2c00      	cmp	r4, #0
 800310a:	d1f7      	bne.n	80030fc <_fwalk_sglue+0xc>
 800310c:	4630      	mov	r0, r6
 800310e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003112:	89ab      	ldrh	r3, [r5, #12]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d907      	bls.n	8003128 <_fwalk_sglue+0x38>
 8003118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800311c:	3301      	adds	r3, #1
 800311e:	d003      	beq.n	8003128 <_fwalk_sglue+0x38>
 8003120:	4629      	mov	r1, r5
 8003122:	4638      	mov	r0, r7
 8003124:	47c0      	blx	r8
 8003126:	4306      	orrs	r6, r0
 8003128:	3568      	adds	r5, #104	@ 0x68
 800312a:	e7e9      	b.n	8003100 <_fwalk_sglue+0x10>

0800312c <_puts_r>:
 800312c:	6a03      	ldr	r3, [r0, #32]
 800312e:	b570      	push	{r4, r5, r6, lr}
 8003130:	6884      	ldr	r4, [r0, #8]
 8003132:	4605      	mov	r5, r0
 8003134:	460e      	mov	r6, r1
 8003136:	b90b      	cbnz	r3, 800313c <_puts_r+0x10>
 8003138:	f7ff ffc2 	bl	80030c0 <__sinit>
 800313c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800313e:	07db      	lsls	r3, r3, #31
 8003140:	d405      	bmi.n	800314e <_puts_r+0x22>
 8003142:	89a3      	ldrh	r3, [r4, #12]
 8003144:	0598      	lsls	r0, r3, #22
 8003146:	d402      	bmi.n	800314e <_puts_r+0x22>
 8003148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800314a:	f000 f99e 	bl	800348a <__retarget_lock_acquire_recursive>
 800314e:	89a3      	ldrh	r3, [r4, #12]
 8003150:	0719      	lsls	r1, r3, #28
 8003152:	d502      	bpl.n	800315a <_puts_r+0x2e>
 8003154:	6923      	ldr	r3, [r4, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d135      	bne.n	80031c6 <_puts_r+0x9a>
 800315a:	4621      	mov	r1, r4
 800315c:	4628      	mov	r0, r5
 800315e:	f000 f8c5 	bl	80032ec <__swsetup_r>
 8003162:	b380      	cbz	r0, 80031c6 <_puts_r+0x9a>
 8003164:	f04f 35ff 	mov.w	r5, #4294967295
 8003168:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800316a:	07da      	lsls	r2, r3, #31
 800316c:	d405      	bmi.n	800317a <_puts_r+0x4e>
 800316e:	89a3      	ldrh	r3, [r4, #12]
 8003170:	059b      	lsls	r3, r3, #22
 8003172:	d402      	bmi.n	800317a <_puts_r+0x4e>
 8003174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003176:	f000 f989 	bl	800348c <__retarget_lock_release_recursive>
 800317a:	4628      	mov	r0, r5
 800317c:	bd70      	pop	{r4, r5, r6, pc}
 800317e:	2b00      	cmp	r3, #0
 8003180:	da04      	bge.n	800318c <_puts_r+0x60>
 8003182:	69a2      	ldr	r2, [r4, #24]
 8003184:	429a      	cmp	r2, r3
 8003186:	dc17      	bgt.n	80031b8 <_puts_r+0x8c>
 8003188:	290a      	cmp	r1, #10
 800318a:	d015      	beq.n	80031b8 <_puts_r+0x8c>
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	6022      	str	r2, [r4, #0]
 8003192:	7019      	strb	r1, [r3, #0]
 8003194:	68a3      	ldr	r3, [r4, #8]
 8003196:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800319a:	3b01      	subs	r3, #1
 800319c:	60a3      	str	r3, [r4, #8]
 800319e:	2900      	cmp	r1, #0
 80031a0:	d1ed      	bne.n	800317e <_puts_r+0x52>
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	da11      	bge.n	80031ca <_puts_r+0x9e>
 80031a6:	4622      	mov	r2, r4
 80031a8:	210a      	movs	r1, #10
 80031aa:	4628      	mov	r0, r5
 80031ac:	f000 f85f 	bl	800326e <__swbuf_r>
 80031b0:	3001      	adds	r0, #1
 80031b2:	d0d7      	beq.n	8003164 <_puts_r+0x38>
 80031b4:	250a      	movs	r5, #10
 80031b6:	e7d7      	b.n	8003168 <_puts_r+0x3c>
 80031b8:	4622      	mov	r2, r4
 80031ba:	4628      	mov	r0, r5
 80031bc:	f000 f857 	bl	800326e <__swbuf_r>
 80031c0:	3001      	adds	r0, #1
 80031c2:	d1e7      	bne.n	8003194 <_puts_r+0x68>
 80031c4:	e7ce      	b.n	8003164 <_puts_r+0x38>
 80031c6:	3e01      	subs	r6, #1
 80031c8:	e7e4      	b.n	8003194 <_puts_r+0x68>
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	6022      	str	r2, [r4, #0]
 80031d0:	220a      	movs	r2, #10
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	e7ee      	b.n	80031b4 <_puts_r+0x88>
	...

080031d8 <puts>:
 80031d8:	4b02      	ldr	r3, [pc, #8]	@ (80031e4 <puts+0xc>)
 80031da:	4601      	mov	r1, r0
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	f7ff bfa5 	b.w	800312c <_puts_r>
 80031e2:	bf00      	nop
 80031e4:	20000018 	.word	0x20000018

080031e8 <__sread>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	460c      	mov	r4, r1
 80031ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031f0:	f000 f8fc 	bl	80033ec <_read_r>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	bfab      	itete	ge
 80031f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80031fa:	89a3      	ldrhlt	r3, [r4, #12]
 80031fc:	181b      	addge	r3, r3, r0
 80031fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003202:	bfac      	ite	ge
 8003204:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003206:	81a3      	strhlt	r3, [r4, #12]
 8003208:	bd10      	pop	{r4, pc}

0800320a <__swrite>:
 800320a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800320e:	461f      	mov	r7, r3
 8003210:	898b      	ldrh	r3, [r1, #12]
 8003212:	05db      	lsls	r3, r3, #23
 8003214:	4605      	mov	r5, r0
 8003216:	460c      	mov	r4, r1
 8003218:	4616      	mov	r6, r2
 800321a:	d505      	bpl.n	8003228 <__swrite+0x1e>
 800321c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003220:	2302      	movs	r3, #2
 8003222:	2200      	movs	r2, #0
 8003224:	f000 f8d0 	bl	80033c8 <_lseek_r>
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800322e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003232:	81a3      	strh	r3, [r4, #12]
 8003234:	4632      	mov	r2, r6
 8003236:	463b      	mov	r3, r7
 8003238:	4628      	mov	r0, r5
 800323a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800323e:	f000 b8e7 	b.w	8003410 <_write_r>

08003242 <__sseek>:
 8003242:	b510      	push	{r4, lr}
 8003244:	460c      	mov	r4, r1
 8003246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800324a:	f000 f8bd 	bl	80033c8 <_lseek_r>
 800324e:	1c43      	adds	r3, r0, #1
 8003250:	89a3      	ldrh	r3, [r4, #12]
 8003252:	bf15      	itete	ne
 8003254:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003256:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800325a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800325e:	81a3      	strheq	r3, [r4, #12]
 8003260:	bf18      	it	ne
 8003262:	81a3      	strhne	r3, [r4, #12]
 8003264:	bd10      	pop	{r4, pc}

08003266 <__sclose>:
 8003266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800326a:	f000 b89d 	b.w	80033a8 <_close_r>

0800326e <__swbuf_r>:
 800326e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003270:	460e      	mov	r6, r1
 8003272:	4614      	mov	r4, r2
 8003274:	4605      	mov	r5, r0
 8003276:	b118      	cbz	r0, 8003280 <__swbuf_r+0x12>
 8003278:	6a03      	ldr	r3, [r0, #32]
 800327a:	b90b      	cbnz	r3, 8003280 <__swbuf_r+0x12>
 800327c:	f7ff ff20 	bl	80030c0 <__sinit>
 8003280:	69a3      	ldr	r3, [r4, #24]
 8003282:	60a3      	str	r3, [r4, #8]
 8003284:	89a3      	ldrh	r3, [r4, #12]
 8003286:	071a      	lsls	r2, r3, #28
 8003288:	d501      	bpl.n	800328e <__swbuf_r+0x20>
 800328a:	6923      	ldr	r3, [r4, #16]
 800328c:	b943      	cbnz	r3, 80032a0 <__swbuf_r+0x32>
 800328e:	4621      	mov	r1, r4
 8003290:	4628      	mov	r0, r5
 8003292:	f000 f82b 	bl	80032ec <__swsetup_r>
 8003296:	b118      	cbz	r0, 80032a0 <__swbuf_r+0x32>
 8003298:	f04f 37ff 	mov.w	r7, #4294967295
 800329c:	4638      	mov	r0, r7
 800329e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	6922      	ldr	r2, [r4, #16]
 80032a4:	1a98      	subs	r0, r3, r2
 80032a6:	6963      	ldr	r3, [r4, #20]
 80032a8:	b2f6      	uxtb	r6, r6
 80032aa:	4283      	cmp	r3, r0
 80032ac:	4637      	mov	r7, r6
 80032ae:	dc05      	bgt.n	80032bc <__swbuf_r+0x4e>
 80032b0:	4621      	mov	r1, r4
 80032b2:	4628      	mov	r0, r5
 80032b4:	f000 fa68 	bl	8003788 <_fflush_r>
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d1ed      	bne.n	8003298 <__swbuf_r+0x2a>
 80032bc:	68a3      	ldr	r3, [r4, #8]
 80032be:	3b01      	subs	r3, #1
 80032c0:	60a3      	str	r3, [r4, #8]
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	6022      	str	r2, [r4, #0]
 80032c8:	701e      	strb	r6, [r3, #0]
 80032ca:	6962      	ldr	r2, [r4, #20]
 80032cc:	1c43      	adds	r3, r0, #1
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d004      	beq.n	80032dc <__swbuf_r+0x6e>
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	07db      	lsls	r3, r3, #31
 80032d6:	d5e1      	bpl.n	800329c <__swbuf_r+0x2e>
 80032d8:	2e0a      	cmp	r6, #10
 80032da:	d1df      	bne.n	800329c <__swbuf_r+0x2e>
 80032dc:	4621      	mov	r1, r4
 80032de:	4628      	mov	r0, r5
 80032e0:	f000 fa52 	bl	8003788 <_fflush_r>
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d0d9      	beq.n	800329c <__swbuf_r+0x2e>
 80032e8:	e7d6      	b.n	8003298 <__swbuf_r+0x2a>
	...

080032ec <__swsetup_r>:
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4b29      	ldr	r3, [pc, #164]	@ (8003394 <__swsetup_r+0xa8>)
 80032f0:	4605      	mov	r5, r0
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	460c      	mov	r4, r1
 80032f6:	b118      	cbz	r0, 8003300 <__swsetup_r+0x14>
 80032f8:	6a03      	ldr	r3, [r0, #32]
 80032fa:	b90b      	cbnz	r3, 8003300 <__swsetup_r+0x14>
 80032fc:	f7ff fee0 	bl	80030c0 <__sinit>
 8003300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003304:	0719      	lsls	r1, r3, #28
 8003306:	d422      	bmi.n	800334e <__swsetup_r+0x62>
 8003308:	06da      	lsls	r2, r3, #27
 800330a:	d407      	bmi.n	800331c <__swsetup_r+0x30>
 800330c:	2209      	movs	r2, #9
 800330e:	602a      	str	r2, [r5, #0]
 8003310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003314:	81a3      	strh	r3, [r4, #12]
 8003316:	f04f 30ff 	mov.w	r0, #4294967295
 800331a:	e033      	b.n	8003384 <__swsetup_r+0x98>
 800331c:	0758      	lsls	r0, r3, #29
 800331e:	d512      	bpl.n	8003346 <__swsetup_r+0x5a>
 8003320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003322:	b141      	cbz	r1, 8003336 <__swsetup_r+0x4a>
 8003324:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003328:	4299      	cmp	r1, r3
 800332a:	d002      	beq.n	8003332 <__swsetup_r+0x46>
 800332c:	4628      	mov	r0, r5
 800332e:	f000 f8af 	bl	8003490 <_free_r>
 8003332:	2300      	movs	r3, #0
 8003334:	6363      	str	r3, [r4, #52]	@ 0x34
 8003336:	89a3      	ldrh	r3, [r4, #12]
 8003338:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800333c:	81a3      	strh	r3, [r4, #12]
 800333e:	2300      	movs	r3, #0
 8003340:	6063      	str	r3, [r4, #4]
 8003342:	6923      	ldr	r3, [r4, #16]
 8003344:	6023      	str	r3, [r4, #0]
 8003346:	89a3      	ldrh	r3, [r4, #12]
 8003348:	f043 0308 	orr.w	r3, r3, #8
 800334c:	81a3      	strh	r3, [r4, #12]
 800334e:	6923      	ldr	r3, [r4, #16]
 8003350:	b94b      	cbnz	r3, 8003366 <__swsetup_r+0x7a>
 8003352:	89a3      	ldrh	r3, [r4, #12]
 8003354:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800335c:	d003      	beq.n	8003366 <__swsetup_r+0x7a>
 800335e:	4621      	mov	r1, r4
 8003360:	4628      	mov	r0, r5
 8003362:	f000 fa5f 	bl	8003824 <__smakebuf_r>
 8003366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800336a:	f013 0201 	ands.w	r2, r3, #1
 800336e:	d00a      	beq.n	8003386 <__swsetup_r+0x9a>
 8003370:	2200      	movs	r2, #0
 8003372:	60a2      	str	r2, [r4, #8]
 8003374:	6962      	ldr	r2, [r4, #20]
 8003376:	4252      	negs	r2, r2
 8003378:	61a2      	str	r2, [r4, #24]
 800337a:	6922      	ldr	r2, [r4, #16]
 800337c:	b942      	cbnz	r2, 8003390 <__swsetup_r+0xa4>
 800337e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003382:	d1c5      	bne.n	8003310 <__swsetup_r+0x24>
 8003384:	bd38      	pop	{r3, r4, r5, pc}
 8003386:	0799      	lsls	r1, r3, #30
 8003388:	bf58      	it	pl
 800338a:	6962      	ldrpl	r2, [r4, #20]
 800338c:	60a2      	str	r2, [r4, #8]
 800338e:	e7f4      	b.n	800337a <__swsetup_r+0x8e>
 8003390:	2000      	movs	r0, #0
 8003392:	e7f7      	b.n	8003384 <__swsetup_r+0x98>
 8003394:	20000018 	.word	0x20000018

08003398 <memset>:
 8003398:	4402      	add	r2, r0
 800339a:	4603      	mov	r3, r0
 800339c:	4293      	cmp	r3, r2
 800339e:	d100      	bne.n	80033a2 <memset+0xa>
 80033a0:	4770      	bx	lr
 80033a2:	f803 1b01 	strb.w	r1, [r3], #1
 80033a6:	e7f9      	b.n	800339c <memset+0x4>

080033a8 <_close_r>:
 80033a8:	b538      	push	{r3, r4, r5, lr}
 80033aa:	4d06      	ldr	r5, [pc, #24]	@ (80033c4 <_close_r+0x1c>)
 80033ac:	2300      	movs	r3, #0
 80033ae:	4604      	mov	r4, r0
 80033b0:	4608      	mov	r0, r1
 80033b2:	602b      	str	r3, [r5, #0]
 80033b4:	f7fd fb89 	bl	8000aca <_close>
 80033b8:	1c43      	adds	r3, r0, #1
 80033ba:	d102      	bne.n	80033c2 <_close_r+0x1a>
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	b103      	cbz	r3, 80033c2 <_close_r+0x1a>
 80033c0:	6023      	str	r3, [r4, #0]
 80033c2:	bd38      	pop	{r3, r4, r5, pc}
 80033c4:	2000025c 	.word	0x2000025c

080033c8 <_lseek_r>:
 80033c8:	b538      	push	{r3, r4, r5, lr}
 80033ca:	4d07      	ldr	r5, [pc, #28]	@ (80033e8 <_lseek_r+0x20>)
 80033cc:	4604      	mov	r4, r0
 80033ce:	4608      	mov	r0, r1
 80033d0:	4611      	mov	r1, r2
 80033d2:	2200      	movs	r2, #0
 80033d4:	602a      	str	r2, [r5, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f7fd fb9e 	bl	8000b18 <_lseek>
 80033dc:	1c43      	adds	r3, r0, #1
 80033de:	d102      	bne.n	80033e6 <_lseek_r+0x1e>
 80033e0:	682b      	ldr	r3, [r5, #0]
 80033e2:	b103      	cbz	r3, 80033e6 <_lseek_r+0x1e>
 80033e4:	6023      	str	r3, [r4, #0]
 80033e6:	bd38      	pop	{r3, r4, r5, pc}
 80033e8:	2000025c 	.word	0x2000025c

080033ec <_read_r>:
 80033ec:	b538      	push	{r3, r4, r5, lr}
 80033ee:	4d07      	ldr	r5, [pc, #28]	@ (800340c <_read_r+0x20>)
 80033f0:	4604      	mov	r4, r0
 80033f2:	4608      	mov	r0, r1
 80033f4:	4611      	mov	r1, r2
 80033f6:	2200      	movs	r2, #0
 80033f8:	602a      	str	r2, [r5, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f7fd fb48 	bl	8000a90 <_read>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d102      	bne.n	800340a <_read_r+0x1e>
 8003404:	682b      	ldr	r3, [r5, #0]
 8003406:	b103      	cbz	r3, 800340a <_read_r+0x1e>
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	bd38      	pop	{r3, r4, r5, pc}
 800340c:	2000025c 	.word	0x2000025c

08003410 <_write_r>:
 8003410:	b538      	push	{r3, r4, r5, lr}
 8003412:	4d07      	ldr	r5, [pc, #28]	@ (8003430 <_write_r+0x20>)
 8003414:	4604      	mov	r4, r0
 8003416:	4608      	mov	r0, r1
 8003418:	4611      	mov	r1, r2
 800341a:	2200      	movs	r2, #0
 800341c:	602a      	str	r2, [r5, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	f7fd f886 	bl	8000530 <_write>
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	d102      	bne.n	800342e <_write_r+0x1e>
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	b103      	cbz	r3, 800342e <_write_r+0x1e>
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	bd38      	pop	{r3, r4, r5, pc}
 8003430:	2000025c 	.word	0x2000025c

08003434 <__errno>:
 8003434:	4b01      	ldr	r3, [pc, #4]	@ (800343c <__errno+0x8>)
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000018 	.word	0x20000018

08003440 <__libc_init_array>:
 8003440:	b570      	push	{r4, r5, r6, lr}
 8003442:	4d0d      	ldr	r5, [pc, #52]	@ (8003478 <__libc_init_array+0x38>)
 8003444:	4c0d      	ldr	r4, [pc, #52]	@ (800347c <__libc_init_array+0x3c>)
 8003446:	1b64      	subs	r4, r4, r5
 8003448:	10a4      	asrs	r4, r4, #2
 800344a:	2600      	movs	r6, #0
 800344c:	42a6      	cmp	r6, r4
 800344e:	d109      	bne.n	8003464 <__libc_init_array+0x24>
 8003450:	4d0b      	ldr	r5, [pc, #44]	@ (8003480 <__libc_init_array+0x40>)
 8003452:	4c0c      	ldr	r4, [pc, #48]	@ (8003484 <__libc_init_array+0x44>)
 8003454:	f000 fa54 	bl	8003900 <_init>
 8003458:	1b64      	subs	r4, r4, r5
 800345a:	10a4      	asrs	r4, r4, #2
 800345c:	2600      	movs	r6, #0
 800345e:	42a6      	cmp	r6, r4
 8003460:	d105      	bne.n	800346e <__libc_init_array+0x2e>
 8003462:	bd70      	pop	{r4, r5, r6, pc}
 8003464:	f855 3b04 	ldr.w	r3, [r5], #4
 8003468:	4798      	blx	r3
 800346a:	3601      	adds	r6, #1
 800346c:	e7ee      	b.n	800344c <__libc_init_array+0xc>
 800346e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003472:	4798      	blx	r3
 8003474:	3601      	adds	r6, #1
 8003476:	e7f2      	b.n	800345e <__libc_init_array+0x1e>
 8003478:	08003954 	.word	0x08003954
 800347c:	08003954 	.word	0x08003954
 8003480:	08003954 	.word	0x08003954
 8003484:	08003958 	.word	0x08003958

08003488 <__retarget_lock_init_recursive>:
 8003488:	4770      	bx	lr

0800348a <__retarget_lock_acquire_recursive>:
 800348a:	4770      	bx	lr

0800348c <__retarget_lock_release_recursive>:
 800348c:	4770      	bx	lr
	...

08003490 <_free_r>:
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	4605      	mov	r5, r0
 8003494:	2900      	cmp	r1, #0
 8003496:	d041      	beq.n	800351c <_free_r+0x8c>
 8003498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800349c:	1f0c      	subs	r4, r1, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bfb8      	it	lt
 80034a2:	18e4      	addlt	r4, r4, r3
 80034a4:	f000 f8e0 	bl	8003668 <__malloc_lock>
 80034a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003520 <_free_r+0x90>)
 80034aa:	6813      	ldr	r3, [r2, #0]
 80034ac:	b933      	cbnz	r3, 80034bc <_free_r+0x2c>
 80034ae:	6063      	str	r3, [r4, #4]
 80034b0:	6014      	str	r4, [r2, #0]
 80034b2:	4628      	mov	r0, r5
 80034b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034b8:	f000 b8dc 	b.w	8003674 <__malloc_unlock>
 80034bc:	42a3      	cmp	r3, r4
 80034be:	d908      	bls.n	80034d2 <_free_r+0x42>
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	1821      	adds	r1, r4, r0
 80034c4:	428b      	cmp	r3, r1
 80034c6:	bf01      	itttt	eq
 80034c8:	6819      	ldreq	r1, [r3, #0]
 80034ca:	685b      	ldreq	r3, [r3, #4]
 80034cc:	1809      	addeq	r1, r1, r0
 80034ce:	6021      	streq	r1, [r4, #0]
 80034d0:	e7ed      	b.n	80034ae <_free_r+0x1e>
 80034d2:	461a      	mov	r2, r3
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	b10b      	cbz	r3, 80034dc <_free_r+0x4c>
 80034d8:	42a3      	cmp	r3, r4
 80034da:	d9fa      	bls.n	80034d2 <_free_r+0x42>
 80034dc:	6811      	ldr	r1, [r2, #0]
 80034de:	1850      	adds	r0, r2, r1
 80034e0:	42a0      	cmp	r0, r4
 80034e2:	d10b      	bne.n	80034fc <_free_r+0x6c>
 80034e4:	6820      	ldr	r0, [r4, #0]
 80034e6:	4401      	add	r1, r0
 80034e8:	1850      	adds	r0, r2, r1
 80034ea:	4283      	cmp	r3, r0
 80034ec:	6011      	str	r1, [r2, #0]
 80034ee:	d1e0      	bne.n	80034b2 <_free_r+0x22>
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	6053      	str	r3, [r2, #4]
 80034f6:	4408      	add	r0, r1
 80034f8:	6010      	str	r0, [r2, #0]
 80034fa:	e7da      	b.n	80034b2 <_free_r+0x22>
 80034fc:	d902      	bls.n	8003504 <_free_r+0x74>
 80034fe:	230c      	movs	r3, #12
 8003500:	602b      	str	r3, [r5, #0]
 8003502:	e7d6      	b.n	80034b2 <_free_r+0x22>
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	1821      	adds	r1, r4, r0
 8003508:	428b      	cmp	r3, r1
 800350a:	bf04      	itt	eq
 800350c:	6819      	ldreq	r1, [r3, #0]
 800350e:	685b      	ldreq	r3, [r3, #4]
 8003510:	6063      	str	r3, [r4, #4]
 8003512:	bf04      	itt	eq
 8003514:	1809      	addeq	r1, r1, r0
 8003516:	6021      	streq	r1, [r4, #0]
 8003518:	6054      	str	r4, [r2, #4]
 800351a:	e7ca      	b.n	80034b2 <_free_r+0x22>
 800351c:	bd38      	pop	{r3, r4, r5, pc}
 800351e:	bf00      	nop
 8003520:	20000268 	.word	0x20000268

08003524 <sbrk_aligned>:
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	4e0f      	ldr	r6, [pc, #60]	@ (8003564 <sbrk_aligned+0x40>)
 8003528:	460c      	mov	r4, r1
 800352a:	6831      	ldr	r1, [r6, #0]
 800352c:	4605      	mov	r5, r0
 800352e:	b911      	cbnz	r1, 8003536 <sbrk_aligned+0x12>
 8003530:	f000 f9d6 	bl	80038e0 <_sbrk_r>
 8003534:	6030      	str	r0, [r6, #0]
 8003536:	4621      	mov	r1, r4
 8003538:	4628      	mov	r0, r5
 800353a:	f000 f9d1 	bl	80038e0 <_sbrk_r>
 800353e:	1c43      	adds	r3, r0, #1
 8003540:	d103      	bne.n	800354a <sbrk_aligned+0x26>
 8003542:	f04f 34ff 	mov.w	r4, #4294967295
 8003546:	4620      	mov	r0, r4
 8003548:	bd70      	pop	{r4, r5, r6, pc}
 800354a:	1cc4      	adds	r4, r0, #3
 800354c:	f024 0403 	bic.w	r4, r4, #3
 8003550:	42a0      	cmp	r0, r4
 8003552:	d0f8      	beq.n	8003546 <sbrk_aligned+0x22>
 8003554:	1a21      	subs	r1, r4, r0
 8003556:	4628      	mov	r0, r5
 8003558:	f000 f9c2 	bl	80038e0 <_sbrk_r>
 800355c:	3001      	adds	r0, #1
 800355e:	d1f2      	bne.n	8003546 <sbrk_aligned+0x22>
 8003560:	e7ef      	b.n	8003542 <sbrk_aligned+0x1e>
 8003562:	bf00      	nop
 8003564:	20000264 	.word	0x20000264

08003568 <_malloc_r>:
 8003568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800356c:	1ccd      	adds	r5, r1, #3
 800356e:	f025 0503 	bic.w	r5, r5, #3
 8003572:	3508      	adds	r5, #8
 8003574:	2d0c      	cmp	r5, #12
 8003576:	bf38      	it	cc
 8003578:	250c      	movcc	r5, #12
 800357a:	2d00      	cmp	r5, #0
 800357c:	4606      	mov	r6, r0
 800357e:	db01      	blt.n	8003584 <_malloc_r+0x1c>
 8003580:	42a9      	cmp	r1, r5
 8003582:	d904      	bls.n	800358e <_malloc_r+0x26>
 8003584:	230c      	movs	r3, #12
 8003586:	6033      	str	r3, [r6, #0]
 8003588:	2000      	movs	r0, #0
 800358a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800358e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003664 <_malloc_r+0xfc>
 8003592:	f000 f869 	bl	8003668 <__malloc_lock>
 8003596:	f8d8 3000 	ldr.w	r3, [r8]
 800359a:	461c      	mov	r4, r3
 800359c:	bb44      	cbnz	r4, 80035f0 <_malloc_r+0x88>
 800359e:	4629      	mov	r1, r5
 80035a0:	4630      	mov	r0, r6
 80035a2:	f7ff ffbf 	bl	8003524 <sbrk_aligned>
 80035a6:	1c43      	adds	r3, r0, #1
 80035a8:	4604      	mov	r4, r0
 80035aa:	d158      	bne.n	800365e <_malloc_r+0xf6>
 80035ac:	f8d8 4000 	ldr.w	r4, [r8]
 80035b0:	4627      	mov	r7, r4
 80035b2:	2f00      	cmp	r7, #0
 80035b4:	d143      	bne.n	800363e <_malloc_r+0xd6>
 80035b6:	2c00      	cmp	r4, #0
 80035b8:	d04b      	beq.n	8003652 <_malloc_r+0xea>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	4639      	mov	r1, r7
 80035be:	4630      	mov	r0, r6
 80035c0:	eb04 0903 	add.w	r9, r4, r3
 80035c4:	f000 f98c 	bl	80038e0 <_sbrk_r>
 80035c8:	4581      	cmp	r9, r0
 80035ca:	d142      	bne.n	8003652 <_malloc_r+0xea>
 80035cc:	6821      	ldr	r1, [r4, #0]
 80035ce:	1a6d      	subs	r5, r5, r1
 80035d0:	4629      	mov	r1, r5
 80035d2:	4630      	mov	r0, r6
 80035d4:	f7ff ffa6 	bl	8003524 <sbrk_aligned>
 80035d8:	3001      	adds	r0, #1
 80035da:	d03a      	beq.n	8003652 <_malloc_r+0xea>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	442b      	add	r3, r5
 80035e0:	6023      	str	r3, [r4, #0]
 80035e2:	f8d8 3000 	ldr.w	r3, [r8]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	bb62      	cbnz	r2, 8003644 <_malloc_r+0xdc>
 80035ea:	f8c8 7000 	str.w	r7, [r8]
 80035ee:	e00f      	b.n	8003610 <_malloc_r+0xa8>
 80035f0:	6822      	ldr	r2, [r4, #0]
 80035f2:	1b52      	subs	r2, r2, r5
 80035f4:	d420      	bmi.n	8003638 <_malloc_r+0xd0>
 80035f6:	2a0b      	cmp	r2, #11
 80035f8:	d917      	bls.n	800362a <_malloc_r+0xc2>
 80035fa:	1961      	adds	r1, r4, r5
 80035fc:	42a3      	cmp	r3, r4
 80035fe:	6025      	str	r5, [r4, #0]
 8003600:	bf18      	it	ne
 8003602:	6059      	strne	r1, [r3, #4]
 8003604:	6863      	ldr	r3, [r4, #4]
 8003606:	bf08      	it	eq
 8003608:	f8c8 1000 	streq.w	r1, [r8]
 800360c:	5162      	str	r2, [r4, r5]
 800360e:	604b      	str	r3, [r1, #4]
 8003610:	4630      	mov	r0, r6
 8003612:	f000 f82f 	bl	8003674 <__malloc_unlock>
 8003616:	f104 000b 	add.w	r0, r4, #11
 800361a:	1d23      	adds	r3, r4, #4
 800361c:	f020 0007 	bic.w	r0, r0, #7
 8003620:	1ac2      	subs	r2, r0, r3
 8003622:	bf1c      	itt	ne
 8003624:	1a1b      	subne	r3, r3, r0
 8003626:	50a3      	strne	r3, [r4, r2]
 8003628:	e7af      	b.n	800358a <_malloc_r+0x22>
 800362a:	6862      	ldr	r2, [r4, #4]
 800362c:	42a3      	cmp	r3, r4
 800362e:	bf0c      	ite	eq
 8003630:	f8c8 2000 	streq.w	r2, [r8]
 8003634:	605a      	strne	r2, [r3, #4]
 8003636:	e7eb      	b.n	8003610 <_malloc_r+0xa8>
 8003638:	4623      	mov	r3, r4
 800363a:	6864      	ldr	r4, [r4, #4]
 800363c:	e7ae      	b.n	800359c <_malloc_r+0x34>
 800363e:	463c      	mov	r4, r7
 8003640:	687f      	ldr	r7, [r7, #4]
 8003642:	e7b6      	b.n	80035b2 <_malloc_r+0x4a>
 8003644:	461a      	mov	r2, r3
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	42a3      	cmp	r3, r4
 800364a:	d1fb      	bne.n	8003644 <_malloc_r+0xdc>
 800364c:	2300      	movs	r3, #0
 800364e:	6053      	str	r3, [r2, #4]
 8003650:	e7de      	b.n	8003610 <_malloc_r+0xa8>
 8003652:	230c      	movs	r3, #12
 8003654:	6033      	str	r3, [r6, #0]
 8003656:	4630      	mov	r0, r6
 8003658:	f000 f80c 	bl	8003674 <__malloc_unlock>
 800365c:	e794      	b.n	8003588 <_malloc_r+0x20>
 800365e:	6005      	str	r5, [r0, #0]
 8003660:	e7d6      	b.n	8003610 <_malloc_r+0xa8>
 8003662:	bf00      	nop
 8003664:	20000268 	.word	0x20000268

08003668 <__malloc_lock>:
 8003668:	4801      	ldr	r0, [pc, #4]	@ (8003670 <__malloc_lock+0x8>)
 800366a:	f7ff bf0e 	b.w	800348a <__retarget_lock_acquire_recursive>
 800366e:	bf00      	nop
 8003670:	20000260 	.word	0x20000260

08003674 <__malloc_unlock>:
 8003674:	4801      	ldr	r0, [pc, #4]	@ (800367c <__malloc_unlock+0x8>)
 8003676:	f7ff bf09 	b.w	800348c <__retarget_lock_release_recursive>
 800367a:	bf00      	nop
 800367c:	20000260 	.word	0x20000260

08003680 <__sflush_r>:
 8003680:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003688:	0716      	lsls	r6, r2, #28
 800368a:	4605      	mov	r5, r0
 800368c:	460c      	mov	r4, r1
 800368e:	d454      	bmi.n	800373a <__sflush_r+0xba>
 8003690:	684b      	ldr	r3, [r1, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	dc02      	bgt.n	800369c <__sflush_r+0x1c>
 8003696:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	dd48      	ble.n	800372e <__sflush_r+0xae>
 800369c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800369e:	2e00      	cmp	r6, #0
 80036a0:	d045      	beq.n	800372e <__sflush_r+0xae>
 80036a2:	2300      	movs	r3, #0
 80036a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80036a8:	682f      	ldr	r7, [r5, #0]
 80036aa:	6a21      	ldr	r1, [r4, #32]
 80036ac:	602b      	str	r3, [r5, #0]
 80036ae:	d030      	beq.n	8003712 <__sflush_r+0x92>
 80036b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	0759      	lsls	r1, r3, #29
 80036b6:	d505      	bpl.n	80036c4 <__sflush_r+0x44>
 80036b8:	6863      	ldr	r3, [r4, #4]
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80036be:	b10b      	cbz	r3, 80036c4 <__sflush_r+0x44>
 80036c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036c2:	1ad2      	subs	r2, r2, r3
 80036c4:	2300      	movs	r3, #0
 80036c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036c8:	6a21      	ldr	r1, [r4, #32]
 80036ca:	4628      	mov	r0, r5
 80036cc:	47b0      	blx	r6
 80036ce:	1c43      	adds	r3, r0, #1
 80036d0:	89a3      	ldrh	r3, [r4, #12]
 80036d2:	d106      	bne.n	80036e2 <__sflush_r+0x62>
 80036d4:	6829      	ldr	r1, [r5, #0]
 80036d6:	291d      	cmp	r1, #29
 80036d8:	d82b      	bhi.n	8003732 <__sflush_r+0xb2>
 80036da:	4a2a      	ldr	r2, [pc, #168]	@ (8003784 <__sflush_r+0x104>)
 80036dc:	40ca      	lsrs	r2, r1
 80036de:	07d6      	lsls	r6, r2, #31
 80036e0:	d527      	bpl.n	8003732 <__sflush_r+0xb2>
 80036e2:	2200      	movs	r2, #0
 80036e4:	6062      	str	r2, [r4, #4]
 80036e6:	04d9      	lsls	r1, r3, #19
 80036e8:	6922      	ldr	r2, [r4, #16]
 80036ea:	6022      	str	r2, [r4, #0]
 80036ec:	d504      	bpl.n	80036f8 <__sflush_r+0x78>
 80036ee:	1c42      	adds	r2, r0, #1
 80036f0:	d101      	bne.n	80036f6 <__sflush_r+0x76>
 80036f2:	682b      	ldr	r3, [r5, #0]
 80036f4:	b903      	cbnz	r3, 80036f8 <__sflush_r+0x78>
 80036f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80036f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036fa:	602f      	str	r7, [r5, #0]
 80036fc:	b1b9      	cbz	r1, 800372e <__sflush_r+0xae>
 80036fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003702:	4299      	cmp	r1, r3
 8003704:	d002      	beq.n	800370c <__sflush_r+0x8c>
 8003706:	4628      	mov	r0, r5
 8003708:	f7ff fec2 	bl	8003490 <_free_r>
 800370c:	2300      	movs	r3, #0
 800370e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003710:	e00d      	b.n	800372e <__sflush_r+0xae>
 8003712:	2301      	movs	r3, #1
 8003714:	4628      	mov	r0, r5
 8003716:	47b0      	blx	r6
 8003718:	4602      	mov	r2, r0
 800371a:	1c50      	adds	r0, r2, #1
 800371c:	d1c9      	bne.n	80036b2 <__sflush_r+0x32>
 800371e:	682b      	ldr	r3, [r5, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0c6      	beq.n	80036b2 <__sflush_r+0x32>
 8003724:	2b1d      	cmp	r3, #29
 8003726:	d001      	beq.n	800372c <__sflush_r+0xac>
 8003728:	2b16      	cmp	r3, #22
 800372a:	d11e      	bne.n	800376a <__sflush_r+0xea>
 800372c:	602f      	str	r7, [r5, #0]
 800372e:	2000      	movs	r0, #0
 8003730:	e022      	b.n	8003778 <__sflush_r+0xf8>
 8003732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003736:	b21b      	sxth	r3, r3
 8003738:	e01b      	b.n	8003772 <__sflush_r+0xf2>
 800373a:	690f      	ldr	r7, [r1, #16]
 800373c:	2f00      	cmp	r7, #0
 800373e:	d0f6      	beq.n	800372e <__sflush_r+0xae>
 8003740:	0793      	lsls	r3, r2, #30
 8003742:	680e      	ldr	r6, [r1, #0]
 8003744:	bf08      	it	eq
 8003746:	694b      	ldreq	r3, [r1, #20]
 8003748:	600f      	str	r7, [r1, #0]
 800374a:	bf18      	it	ne
 800374c:	2300      	movne	r3, #0
 800374e:	eba6 0807 	sub.w	r8, r6, r7
 8003752:	608b      	str	r3, [r1, #8]
 8003754:	f1b8 0f00 	cmp.w	r8, #0
 8003758:	dde9      	ble.n	800372e <__sflush_r+0xae>
 800375a:	6a21      	ldr	r1, [r4, #32]
 800375c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800375e:	4643      	mov	r3, r8
 8003760:	463a      	mov	r2, r7
 8003762:	4628      	mov	r0, r5
 8003764:	47b0      	blx	r6
 8003766:	2800      	cmp	r0, #0
 8003768:	dc08      	bgt.n	800377c <__sflush_r+0xfc>
 800376a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800376e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003772:	81a3      	strh	r3, [r4, #12]
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800377c:	4407      	add	r7, r0
 800377e:	eba8 0800 	sub.w	r8, r8, r0
 8003782:	e7e7      	b.n	8003754 <__sflush_r+0xd4>
 8003784:	20400001 	.word	0x20400001

08003788 <_fflush_r>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	690b      	ldr	r3, [r1, #16]
 800378c:	4605      	mov	r5, r0
 800378e:	460c      	mov	r4, r1
 8003790:	b913      	cbnz	r3, 8003798 <_fflush_r+0x10>
 8003792:	2500      	movs	r5, #0
 8003794:	4628      	mov	r0, r5
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	b118      	cbz	r0, 80037a2 <_fflush_r+0x1a>
 800379a:	6a03      	ldr	r3, [r0, #32]
 800379c:	b90b      	cbnz	r3, 80037a2 <_fflush_r+0x1a>
 800379e:	f7ff fc8f 	bl	80030c0 <__sinit>
 80037a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f3      	beq.n	8003792 <_fflush_r+0xa>
 80037aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80037ac:	07d0      	lsls	r0, r2, #31
 80037ae:	d404      	bmi.n	80037ba <_fflush_r+0x32>
 80037b0:	0599      	lsls	r1, r3, #22
 80037b2:	d402      	bmi.n	80037ba <_fflush_r+0x32>
 80037b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037b6:	f7ff fe68 	bl	800348a <__retarget_lock_acquire_recursive>
 80037ba:	4628      	mov	r0, r5
 80037bc:	4621      	mov	r1, r4
 80037be:	f7ff ff5f 	bl	8003680 <__sflush_r>
 80037c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037c4:	07da      	lsls	r2, r3, #31
 80037c6:	4605      	mov	r5, r0
 80037c8:	d4e4      	bmi.n	8003794 <_fflush_r+0xc>
 80037ca:	89a3      	ldrh	r3, [r4, #12]
 80037cc:	059b      	lsls	r3, r3, #22
 80037ce:	d4e1      	bmi.n	8003794 <_fflush_r+0xc>
 80037d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037d2:	f7ff fe5b 	bl	800348c <__retarget_lock_release_recursive>
 80037d6:	e7dd      	b.n	8003794 <_fflush_r+0xc>

080037d8 <__swhatbuf_r>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	460c      	mov	r4, r1
 80037dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e0:	2900      	cmp	r1, #0
 80037e2:	b096      	sub	sp, #88	@ 0x58
 80037e4:	4615      	mov	r5, r2
 80037e6:	461e      	mov	r6, r3
 80037e8:	da0d      	bge.n	8003806 <__swhatbuf_r+0x2e>
 80037ea:	89a3      	ldrh	r3, [r4, #12]
 80037ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	bf14      	ite	ne
 80037f6:	2340      	movne	r3, #64	@ 0x40
 80037f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80037fc:	2000      	movs	r0, #0
 80037fe:	6031      	str	r1, [r6, #0]
 8003800:	602b      	str	r3, [r5, #0]
 8003802:	b016      	add	sp, #88	@ 0x58
 8003804:	bd70      	pop	{r4, r5, r6, pc}
 8003806:	466a      	mov	r2, sp
 8003808:	f000 f848 	bl	800389c <_fstat_r>
 800380c:	2800      	cmp	r0, #0
 800380e:	dbec      	blt.n	80037ea <__swhatbuf_r+0x12>
 8003810:	9901      	ldr	r1, [sp, #4]
 8003812:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003816:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800381a:	4259      	negs	r1, r3
 800381c:	4159      	adcs	r1, r3
 800381e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003822:	e7eb      	b.n	80037fc <__swhatbuf_r+0x24>

08003824 <__smakebuf_r>:
 8003824:	898b      	ldrh	r3, [r1, #12]
 8003826:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003828:	079d      	lsls	r5, r3, #30
 800382a:	4606      	mov	r6, r0
 800382c:	460c      	mov	r4, r1
 800382e:	d507      	bpl.n	8003840 <__smakebuf_r+0x1c>
 8003830:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003834:	6023      	str	r3, [r4, #0]
 8003836:	6123      	str	r3, [r4, #16]
 8003838:	2301      	movs	r3, #1
 800383a:	6163      	str	r3, [r4, #20]
 800383c:	b003      	add	sp, #12
 800383e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003840:	ab01      	add	r3, sp, #4
 8003842:	466a      	mov	r2, sp
 8003844:	f7ff ffc8 	bl	80037d8 <__swhatbuf_r>
 8003848:	9f00      	ldr	r7, [sp, #0]
 800384a:	4605      	mov	r5, r0
 800384c:	4639      	mov	r1, r7
 800384e:	4630      	mov	r0, r6
 8003850:	f7ff fe8a 	bl	8003568 <_malloc_r>
 8003854:	b948      	cbnz	r0, 800386a <__smakebuf_r+0x46>
 8003856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800385a:	059a      	lsls	r2, r3, #22
 800385c:	d4ee      	bmi.n	800383c <__smakebuf_r+0x18>
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	f043 0302 	orr.w	r3, r3, #2
 8003866:	81a3      	strh	r3, [r4, #12]
 8003868:	e7e2      	b.n	8003830 <__smakebuf_r+0xc>
 800386a:	89a3      	ldrh	r3, [r4, #12]
 800386c:	6020      	str	r0, [r4, #0]
 800386e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003872:	81a3      	strh	r3, [r4, #12]
 8003874:	9b01      	ldr	r3, [sp, #4]
 8003876:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800387a:	b15b      	cbz	r3, 8003894 <__smakebuf_r+0x70>
 800387c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003880:	4630      	mov	r0, r6
 8003882:	f000 f81d 	bl	80038c0 <_isatty_r>
 8003886:	b128      	cbz	r0, 8003894 <__smakebuf_r+0x70>
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	81a3      	strh	r3, [r4, #12]
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	431d      	orrs	r5, r3
 8003898:	81a5      	strh	r5, [r4, #12]
 800389a:	e7cf      	b.n	800383c <__smakebuf_r+0x18>

0800389c <_fstat_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4d07      	ldr	r5, [pc, #28]	@ (80038bc <_fstat_r+0x20>)
 80038a0:	2300      	movs	r3, #0
 80038a2:	4604      	mov	r4, r0
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	602b      	str	r3, [r5, #0]
 80038aa:	f7fd f91a 	bl	8000ae2 <_fstat>
 80038ae:	1c43      	adds	r3, r0, #1
 80038b0:	d102      	bne.n	80038b8 <_fstat_r+0x1c>
 80038b2:	682b      	ldr	r3, [r5, #0]
 80038b4:	b103      	cbz	r3, 80038b8 <_fstat_r+0x1c>
 80038b6:	6023      	str	r3, [r4, #0]
 80038b8:	bd38      	pop	{r3, r4, r5, pc}
 80038ba:	bf00      	nop
 80038bc:	2000025c 	.word	0x2000025c

080038c0 <_isatty_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4d06      	ldr	r5, [pc, #24]	@ (80038dc <_isatty_r+0x1c>)
 80038c4:	2300      	movs	r3, #0
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	602b      	str	r3, [r5, #0]
 80038cc:	f7fd f919 	bl	8000b02 <_isatty>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d102      	bne.n	80038da <_isatty_r+0x1a>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	b103      	cbz	r3, 80038da <_isatty_r+0x1a>
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	bd38      	pop	{r3, r4, r5, pc}
 80038dc:	2000025c 	.word	0x2000025c

080038e0 <_sbrk_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4d06      	ldr	r5, [pc, #24]	@ (80038fc <_sbrk_r+0x1c>)
 80038e4:	2300      	movs	r3, #0
 80038e6:	4604      	mov	r4, r0
 80038e8:	4608      	mov	r0, r1
 80038ea:	602b      	str	r3, [r5, #0]
 80038ec:	f7fd f922 	bl	8000b34 <_sbrk>
 80038f0:	1c43      	adds	r3, r0, #1
 80038f2:	d102      	bne.n	80038fa <_sbrk_r+0x1a>
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	b103      	cbz	r3, 80038fa <_sbrk_r+0x1a>
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	bd38      	pop	{r3, r4, r5, pc}
 80038fc:	2000025c 	.word	0x2000025c

08003900 <_init>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	bf00      	nop
 8003904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003906:	bc08      	pop	{r3}
 8003908:	469e      	mov	lr, r3
 800390a:	4770      	bx	lr

0800390c <_fini>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr
