
Learning_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080034c0  080034c0  000044c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003540  08003540  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003540  08003540  00004540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003548  08003548  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003548  08003548  00004548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800354c  0800354c  0000454c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003550  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  080035b8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080035b8  00005220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008484  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000174b  00000000  00000000  0000d51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0000ec68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a3  00000000  00000000  0000f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c43  00000000  00000000  0000f97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009968  00000000  00000000  000315be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca297  00000000  00000000  0003af26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001051bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f0  00000000  00000000  00105200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001076f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080034a8 	.word	0x080034a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080034a8 	.word	0x080034a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_write>:
/* USER CODE BEGIN 0 */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart
	int _write(int fd, char* ptr, int len) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
		HAL_StatusTypeDef hstatus;

		if (fd == 1 || fd == 2) {
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d002      	beq.n	80005f4 <_write+0x18>
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d111      	bne.n	8000618 <_write+0x3c>
			hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295
 80005fc:	68b9      	ldr	r1, [r7, #8]
 80005fe:	4809      	ldr	r0, [pc, #36]	@ (8000624 <_write+0x48>)
 8000600:	f001 fc0a 	bl	8001e18 <HAL_UART_Transmit>
 8000604:	4603      	mov	r3, r0
 8000606:	75fb      	strb	r3, [r7, #23]
			if (hstatus == HAL_OK)
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <_write+0x36>
				return len;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	e004      	b.n	800061c <_write+0x40>
			else
				return -1;
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	e001      	b.n	800061c <_write+0x40>
		}
		return -1;
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
	}
 800061c:	4618      	mov	r0, r3
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000084 	.word	0x20000084

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fa9b 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f82d 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f8c1 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063a:	f000 f895 	bl	8000768 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Private user code ---------------------------------------------------------*/
  /* USER CODE BEGIN 0 */
  printf("First App\r\n");
 800063e:	4811      	ldr	r0, [pc, #68]	@ (8000684 <main+0x5c>)
 8000640:	f002 f8d0 	bl	80027e4 <puts>
  /* USER CODE END 0 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t now = 0, last = 0, loop_cnt = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	now = HAL_GetTick();
 8000650:	f000 faf0 	bl	8000c34 <HAL_GetTick>
 8000654:	6078      	str	r0, [r7, #4]
	if(now - last >= 2000){
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000660:	d30b      	bcc.n	800067a <main+0x52>
	printf("Yeah works man, btw loop count is %ld\r\n", loop_cnt);
 8000662:	68b9      	ldr	r1, [r7, #8]
 8000664:	4808      	ldr	r0, [pc, #32]	@ (8000688 <main+0x60>)
 8000666:	f002 f855 	bl	8002714 <iprintf>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800066a:	2120      	movs	r1, #32
 800066c:	4807      	ldr	r0, [pc, #28]	@ (800068c <main+0x64>)
 800066e:	f000 fd80 	bl	8001172 <HAL_GPIO_TogglePin>
    last = now;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]
    loop_cnt = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
	}

	loop_cnt++;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	3301      	adds	r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
	now = HAL_GetTick();
 8000680:	e7e6      	b.n	8000650 <main+0x28>
 8000682:	bf00      	nop
 8000684:	080034c0 	.word	0x080034c0
 8000688:	080034cc 	.word	0x080034cc
 800068c:	40020000 	.word	0x40020000

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	@ 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	@ 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 f980 	bl	80029a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <SystemClock_Config+0xd0>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	4a28      	ldr	r2, [pc, #160]	@ (8000760 <SystemClock_Config+0xd0>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c4:	4b26      	ldr	r3, [pc, #152]	@ (8000760 <SystemClock_Config+0xd0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <SystemClock_Config+0xd4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006dc:	4a21      	ldr	r2, [pc, #132]	@ (8000764 <SystemClock_Config+0xd4>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <SystemClock_Config+0xd4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000708:	2332      	movs	r3, #50	@ 0x32
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f88d 	bl	800183c <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000728:	f000 f8b6 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2101      	movs	r1, #1
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fd2d 	bl	80011a8 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000754:	f000 f8a0 	bl	8000898 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	@ 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f001 faea 	bl	8001d78 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f875 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000084 	.word	0x20000084
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b2d      	ldr	r3, [pc, #180]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a2c      	ldr	r2, [pc, #176]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b2a      	ldr	r3, [pc, #168]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a25      	ldr	r2, [pc, #148]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b23      	ldr	r3, [pc, #140]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a1e      	ldr	r2, [pc, #120]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a17      	ldr	r2, [pc, #92]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	4812      	ldr	r0, [pc, #72]	@ (8000890 <MX_GPIO_Init+0xd4>)
 8000848:	f000 fc7a 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000852:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	@ (8000894 <MX_GPIO_Init+0xd8>)
 8000864:	f000 fad8 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000868:	2320      	movs	r3, #32
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_GPIO_Init+0xd4>)
 8000880:	f000 faca 	bl	8000e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	@ 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	40020800 	.word	0x40020800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	4a0f      	ldr	r2, [pc, #60]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e2:	2007      	movs	r0, #7
 80008e4:	f000 fa64 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a19      	ldr	r2, [pc, #100]	@ (8000978 <HAL_UART_MspInit+0x84>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d12b      	bne.n	800096e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_UART_MspInit+0x88>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	4a17      	ldr	r2, [pc, #92]	@ (800097c <HAL_UART_MspInit+0x88>)
 8000920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000924:	6413      	str	r3, [r2, #64]	@ 0x40
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <HAL_UART_MspInit+0x88>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <HAL_UART_MspInit+0x88>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a10      	ldr	r2, [pc, #64]	@ (800097c <HAL_UART_MspInit+0x88>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <HAL_UART_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800094e:	230c      	movs	r3, #12
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800095e:	2307      	movs	r3, #7
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	@ (8000980 <HAL_UART_MspInit+0x8c>)
 800096a:	f000 fa55 	bl	8000e18 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	@ 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40004400 	.word	0x40004400
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <NMI_Handler+0x4>

0800098c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <MemManage_Handler+0x4>

0800099c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <UsageFault_Handler+0x4>

080009ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009da:	f000 f917 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	e00a      	b.n	8000a0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009f4:	f3af 8000 	nop.w
 80009f8:	4601      	mov	r1, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1c5a      	adds	r2, r3, #1
 80009fe:	60ba      	str	r2, [r7, #8]
 8000a00:	b2ca      	uxtb	r2, r1
 8000a02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	3301      	adds	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	dbf0      	blt.n	80009f4 <_read+0x12>
  }

  return len;
 8000a12:	687b      	ldr	r3, [r7, #4]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a44:	605a      	str	r2, [r3, #4]
  return 0;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_isatty>:

int _isatty(int file)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a5c:	2301      	movs	r3, #1
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b085      	sub	sp, #20
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f001 ffc4 	bl	8002a40 <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20020000 	.word	0x20020000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	200000cc 	.word	0x200000cc
 8000aec:	20000220 	.word	0x20000220

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	@ (8000b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	@ (8000b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f001 ff83 	bl	8002a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fd6f 	bl	8000628 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b58:	08003550 	.word	0x08003550
  ldr r2, =_sbss
 8000b5c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b60:	20000220 	.word	0x20000220

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f90d 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fe82 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f917 	bl	8000dfe <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f8ed 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	@ (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200000d0 	.word	0x200000d0

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	200000d0 	.word	0x200000d0

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	@ (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	@ (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	@ (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	@ 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff47 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff5c 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb0 	bl	8000d6c <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e165      	b.n	8001100 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8154 	bne.w	80010fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d005      	beq.n	8000e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d130      	bne.n	8000ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	f003 0201 	and.w	r2, r3, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d017      	beq.n	8000f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d123      	bne.n	8000f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	69b9      	ldr	r1, [r7, #24]
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0203 	and.w	r2, r3, #3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80ae 	beq.w	80010fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8001118 <HAL_GPIO_Init+0x300>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a5c      	ldr	r2, [pc, #368]	@ (8001118 <HAL_GPIO_Init+0x300>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b5a      	ldr	r3, [pc, #360]	@ (8001118 <HAL_GPIO_Init+0x300>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fba:	4a58      	ldr	r2, [pc, #352]	@ (800111c <HAL_GPIO_Init+0x304>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4f      	ldr	r2, [pc, #316]	@ (8001120 <HAL_GPIO_Init+0x308>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d025      	beq.n	8001032 <HAL_GPIO_Init+0x21a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4e      	ldr	r2, [pc, #312]	@ (8001124 <HAL_GPIO_Init+0x30c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d01f      	beq.n	800102e <HAL_GPIO_Init+0x216>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4d      	ldr	r2, [pc, #308]	@ (8001128 <HAL_GPIO_Init+0x310>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d019      	beq.n	800102a <HAL_GPIO_Init+0x212>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4c      	ldr	r2, [pc, #304]	@ (800112c <HAL_GPIO_Init+0x314>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0x20e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4b      	ldr	r2, [pc, #300]	@ (8001130 <HAL_GPIO_Init+0x318>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00d      	beq.n	8001022 <HAL_GPIO_Init+0x20a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4a      	ldr	r2, [pc, #296]	@ (8001134 <HAL_GPIO_Init+0x31c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0x206>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a49      	ldr	r2, [pc, #292]	@ (8001138 <HAL_GPIO_Init+0x320>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_GPIO_Init+0x202>
 8001016:	2306      	movs	r3, #6
 8001018:	e00c      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 800101a:	2307      	movs	r3, #7
 800101c:	e00a      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 800101e:	2305      	movs	r3, #5
 8001020:	e008      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 8001022:	2304      	movs	r3, #4
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 8001026:	2303      	movs	r3, #3
 8001028:	e004      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 800102a:	2302      	movs	r3, #2
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 8001032:	2300      	movs	r3, #0
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4093      	lsls	r3, r2
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001044:	4935      	ldr	r1, [pc, #212]	@ (800111c <HAL_GPIO_Init+0x304>)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001052:	4b3a      	ldr	r3, [pc, #232]	@ (800113c <HAL_GPIO_Init+0x324>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001076:	4a31      	ldr	r2, [pc, #196]	@ (800113c <HAL_GPIO_Init+0x324>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800107c:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <HAL_GPIO_Init+0x324>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a0:	4a26      	ldr	r2, [pc, #152]	@ (800113c <HAL_GPIO_Init+0x324>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <HAL_GPIO_Init+0x324>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ca:	4a1c      	ldr	r2, [pc, #112]	@ (800113c <HAL_GPIO_Init+0x324>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <HAL_GPIO_Init+0x324>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f4:	4a11      	ldr	r2, [pc, #68]	@ (800113c <HAL_GPIO_Init+0x324>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	f67f ae96 	bls.w	8000e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3724      	adds	r7, #36	@ 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40013800 	.word	0x40013800
 8001120:	40020000 	.word	0x40020000
 8001124:	40020400 	.word	0x40020400
 8001128:	40020800 	.word	0x40020800
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40021000 	.word	0x40021000
 8001134:	40021400 	.word	0x40021400
 8001138:	40021800 	.word	0x40021800
 800113c:	40013c00 	.word	0x40013c00

08001140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
 800114c:	4613      	mov	r3, r2
 800114e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001150:	787b      	ldrb	r3, [r7, #1]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800115c:	e003      	b.n	8001166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	041a      	lsls	r2, r3, #16
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	619a      	str	r2, [r3, #24]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001184:	887a      	ldrh	r2, [r7, #2]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4013      	ands	r3, r2
 800118a:	041a      	lsls	r2, r3, #16
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43d9      	mvns	r1, r3
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	400b      	ands	r3, r1
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0cc      	b.n	8001356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011bc:	4b68      	ldr	r3, [pc, #416]	@ (8001360 <HAL_RCC_ClockConfig+0x1b8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d90c      	bls.n	80011e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ca:	4b65      	ldr	r3, [pc, #404]	@ (8001360 <HAL_RCC_ClockConfig+0x1b8>)
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d2:	4b63      	ldr	r3, [pc, #396]	@ (8001360 <HAL_RCC_ClockConfig+0x1b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d001      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0b8      	b.n	8001356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d020      	beq.n	8001232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011fc:	4b59      	ldr	r3, [pc, #356]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4a58      	ldr	r2, [pc, #352]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001206:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001214:	4b53      	ldr	r3, [pc, #332]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	4a52      	ldr	r2, [pc, #328]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800121e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001220:	4b50      	ldr	r3, [pc, #320]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	494d      	ldr	r1, [pc, #308]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	4313      	orrs	r3, r2
 8001230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d044      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d107      	bne.n	8001256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	4b47      	ldr	r3, [pc, #284]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d119      	bne.n	8001286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e07f      	b.n	8001356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d003      	beq.n	8001266 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001262:	2b03      	cmp	r3, #3
 8001264:	d107      	bne.n	8001276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001266:	4b3f      	ldr	r3, [pc, #252]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d109      	bne.n	8001286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e06f      	b.n	8001356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001276:	4b3b      	ldr	r3, [pc, #236]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e067      	b.n	8001356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001286:	4b37      	ldr	r3, [pc, #220]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f023 0203 	bic.w	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4934      	ldr	r1, [pc, #208]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	4313      	orrs	r3, r2
 8001296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001298:	f7ff fccc 	bl	8000c34 <HAL_GetTick>
 800129c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129e:	e00a      	b.n	80012b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a0:	f7ff fcc8 	bl	8000c34 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e04f      	b.n	8001356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 020c 	and.w	r2, r3, #12
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d1eb      	bne.n	80012a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012c8:	4b25      	ldr	r3, [pc, #148]	@ (8001360 <HAL_RCC_ClockConfig+0x1b8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d20c      	bcs.n	80012f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d6:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <HAL_RCC_ClockConfig+0x1b8>)
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012de:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <HAL_RCC_ClockConfig+0x1b8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d001      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e032      	b.n	8001356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d008      	beq.n	800130e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012fc:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	4916      	ldr	r1, [pc, #88]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	4313      	orrs	r3, r2
 800130c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d009      	beq.n	800132e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	490e      	ldr	r1, [pc, #56]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	4313      	orrs	r3, r2
 800132c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800132e:	f000 f855 	bl	80013dc <HAL_RCC_GetSysClockFreq>
 8001332:	4602      	mov	r2, r0
 8001334:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	490a      	ldr	r1, [pc, #40]	@ (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	5ccb      	ldrb	r3, [r1, r3]
 8001342:	fa22 f303 	lsr.w	r3, r2, r3
 8001346:	4a09      	ldr	r2, [pc, #36]	@ (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fc2c 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023c00 	.word	0x40023c00
 8001364:	40023800 	.word	0x40023800
 8001368:	080034f4 	.word	0x080034f4
 800136c:	20000000 	.word	0x20000000
 8001370:	20000004 	.word	0x20000004

08001374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <HAL_RCC_GetHCLKFreq+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000000 	.word	0x20000000

0800138c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001390:	f7ff fff0 	bl	8001374 <HAL_RCC_GetHCLKFreq>
 8001394:	4602      	mov	r2, r0
 8001396:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	0a9b      	lsrs	r3, r3, #10
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	4903      	ldr	r1, [pc, #12]	@ (80013b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013a2:	5ccb      	ldrb	r3, [r1, r3]
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	08003504 	.word	0x08003504

080013b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013b8:	f7ff ffdc 	bl	8001374 <HAL_RCC_GetHCLKFreq>
 80013bc:	4602      	mov	r2, r0
 80013be:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	0b5b      	lsrs	r3, r3, #13
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	4903      	ldr	r1, [pc, #12]	@ (80013d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	08003504 	.word	0x08003504

080013dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013e0:	b0ae      	sub	sp, #184	@ 0xb8
 80013e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001402:	4bcb      	ldr	r3, [pc, #812]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x354>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b0c      	cmp	r3, #12
 800140c:	f200 8206 	bhi.w	800181c <HAL_RCC_GetSysClockFreq+0x440>
 8001410:	a201      	add	r2, pc, #4	@ (adr r2, 8001418 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001416:	bf00      	nop
 8001418:	0800144d 	.word	0x0800144d
 800141c:	0800181d 	.word	0x0800181d
 8001420:	0800181d 	.word	0x0800181d
 8001424:	0800181d 	.word	0x0800181d
 8001428:	08001455 	.word	0x08001455
 800142c:	0800181d 	.word	0x0800181d
 8001430:	0800181d 	.word	0x0800181d
 8001434:	0800181d 	.word	0x0800181d
 8001438:	0800145d 	.word	0x0800145d
 800143c:	0800181d 	.word	0x0800181d
 8001440:	0800181d 	.word	0x0800181d
 8001444:	0800181d 	.word	0x0800181d
 8001448:	0800164d 	.word	0x0800164d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800144c:	4bb9      	ldr	r3, [pc, #740]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x358>)
 800144e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001452:	e1e7      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001454:	4bb8      	ldr	r3, [pc, #736]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800145a:	e1e3      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800145c:	4bb4      	ldr	r3, [pc, #720]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x354>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001464:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001468:	4bb1      	ldr	r3, [pc, #708]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x354>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d071      	beq.n	8001558 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001474:	4bae      	ldr	r3, [pc, #696]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x354>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	099b      	lsrs	r3, r3, #6
 800147a:	2200      	movs	r2, #0
 800147c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001480:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001484:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800148c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800149a:	4622      	mov	r2, r4
 800149c:	462b      	mov	r3, r5
 800149e:	f04f 0000 	mov.w	r0, #0
 80014a2:	f04f 0100 	mov.w	r1, #0
 80014a6:	0159      	lsls	r1, r3, #5
 80014a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014ac:	0150      	lsls	r0, r2, #5
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4621      	mov	r1, r4
 80014b4:	1a51      	subs	r1, r2, r1
 80014b6:	6439      	str	r1, [r7, #64]	@ 0x40
 80014b8:	4629      	mov	r1, r5
 80014ba:	eb63 0301 	sbc.w	r3, r3, r1
 80014be:	647b      	str	r3, [r7, #68]	@ 0x44
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80014cc:	4649      	mov	r1, r9
 80014ce:	018b      	lsls	r3, r1, #6
 80014d0:	4641      	mov	r1, r8
 80014d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014d6:	4641      	mov	r1, r8
 80014d8:	018a      	lsls	r2, r1, #6
 80014da:	4641      	mov	r1, r8
 80014dc:	1a51      	subs	r1, r2, r1
 80014de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014e0:	4649      	mov	r1, r9
 80014e2:	eb63 0301 	sbc.w	r3, r3, r1
 80014e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80014f4:	4649      	mov	r1, r9
 80014f6:	00cb      	lsls	r3, r1, #3
 80014f8:	4641      	mov	r1, r8
 80014fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014fe:	4641      	mov	r1, r8
 8001500:	00ca      	lsls	r2, r1, #3
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	4603      	mov	r3, r0
 8001508:	4622      	mov	r2, r4
 800150a:	189b      	adds	r3, r3, r2
 800150c:	633b      	str	r3, [r7, #48]	@ 0x30
 800150e:	462b      	mov	r3, r5
 8001510:	460a      	mov	r2, r1
 8001512:	eb42 0303 	adc.w	r3, r2, r3
 8001516:	637b      	str	r3, [r7, #52]	@ 0x34
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001524:	4629      	mov	r1, r5
 8001526:	024b      	lsls	r3, r1, #9
 8001528:	4621      	mov	r1, r4
 800152a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800152e:	4621      	mov	r1, r4
 8001530:	024a      	lsls	r2, r1, #9
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800153a:	2200      	movs	r2, #0
 800153c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001540:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001544:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001548:	f7fe feb2 	bl	80002b0 <__aeabi_uldivmod>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4613      	mov	r3, r2
 8001552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001556:	e067      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001558:	4b75      	ldr	r3, [pc, #468]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x354>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	099b      	lsrs	r3, r3, #6
 800155e:	2200      	movs	r2, #0
 8001560:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001564:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001568:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800156c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001570:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001572:	2300      	movs	r3, #0
 8001574:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001576:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800157a:	4622      	mov	r2, r4
 800157c:	462b      	mov	r3, r5
 800157e:	f04f 0000 	mov.w	r0, #0
 8001582:	f04f 0100 	mov.w	r1, #0
 8001586:	0159      	lsls	r1, r3, #5
 8001588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800158c:	0150      	lsls	r0, r2, #5
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4621      	mov	r1, r4
 8001594:	1a51      	subs	r1, r2, r1
 8001596:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001598:	4629      	mov	r1, r5
 800159a:	eb63 0301 	sbc.w	r3, r3, r1
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80015ac:	4649      	mov	r1, r9
 80015ae:	018b      	lsls	r3, r1, #6
 80015b0:	4641      	mov	r1, r8
 80015b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015b6:	4641      	mov	r1, r8
 80015b8:	018a      	lsls	r2, r1, #6
 80015ba:	4641      	mov	r1, r8
 80015bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80015c0:	4649      	mov	r1, r9
 80015c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015da:	4692      	mov	sl, r2
 80015dc:	469b      	mov	fp, r3
 80015de:	4623      	mov	r3, r4
 80015e0:	eb1a 0303 	adds.w	r3, sl, r3
 80015e4:	623b      	str	r3, [r7, #32]
 80015e6:	462b      	mov	r3, r5
 80015e8:	eb4b 0303 	adc.w	r3, fp, r3
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015fa:	4629      	mov	r1, r5
 80015fc:	028b      	lsls	r3, r1, #10
 80015fe:	4621      	mov	r1, r4
 8001600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001604:	4621      	mov	r1, r4
 8001606:	028a      	lsls	r2, r1, #10
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001610:	2200      	movs	r2, #0
 8001612:	673b      	str	r3, [r7, #112]	@ 0x70
 8001614:	677a      	str	r2, [r7, #116]	@ 0x74
 8001616:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800161a:	f7fe fe49 	bl	80002b0 <__aeabi_uldivmod>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4613      	mov	r3, r2
 8001624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001628:	4b41      	ldr	r3, [pc, #260]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x354>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	0c1b      	lsrs	r3, r3, #16
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	3301      	adds	r3, #1
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800163a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800163e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800164a:	e0eb      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800164c:	4b38      	ldr	r3, [pc, #224]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x354>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001654:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001658:	4b35      	ldr	r3, [pc, #212]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x354>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d06b      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001664:	4b32      	ldr	r3, [pc, #200]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x354>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	2200      	movs	r2, #0
 800166c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800166e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001670:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001676:	663b      	str	r3, [r7, #96]	@ 0x60
 8001678:	2300      	movs	r3, #0
 800167a:	667b      	str	r3, [r7, #100]	@ 0x64
 800167c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001680:	4622      	mov	r2, r4
 8001682:	462b      	mov	r3, r5
 8001684:	f04f 0000 	mov.w	r0, #0
 8001688:	f04f 0100 	mov.w	r1, #0
 800168c:	0159      	lsls	r1, r3, #5
 800168e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001692:	0150      	lsls	r0, r2, #5
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4621      	mov	r1, r4
 800169a:	1a51      	subs	r1, r2, r1
 800169c:	61b9      	str	r1, [r7, #24]
 800169e:	4629      	mov	r1, r5
 80016a0:	eb63 0301 	sbc.w	r3, r3, r1
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016b2:	4659      	mov	r1, fp
 80016b4:	018b      	lsls	r3, r1, #6
 80016b6:	4651      	mov	r1, sl
 80016b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016bc:	4651      	mov	r1, sl
 80016be:	018a      	lsls	r2, r1, #6
 80016c0:	4651      	mov	r1, sl
 80016c2:	ebb2 0801 	subs.w	r8, r2, r1
 80016c6:	4659      	mov	r1, fp
 80016c8:	eb63 0901 	sbc.w	r9, r3, r1
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016e0:	4690      	mov	r8, r2
 80016e2:	4699      	mov	r9, r3
 80016e4:	4623      	mov	r3, r4
 80016e6:	eb18 0303 	adds.w	r3, r8, r3
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	462b      	mov	r3, r5
 80016ee:	eb49 0303 	adc.w	r3, r9, r3
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001700:	4629      	mov	r1, r5
 8001702:	024b      	lsls	r3, r1, #9
 8001704:	4621      	mov	r1, r4
 8001706:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800170a:	4621      	mov	r1, r4
 800170c:	024a      	lsls	r2, r1, #9
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001716:	2200      	movs	r2, #0
 8001718:	65bb      	str	r3, [r7, #88]	@ 0x58
 800171a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800171c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001720:	f7fe fdc6 	bl	80002b0 <__aeabi_uldivmod>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4613      	mov	r3, r2
 800172a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800172e:	e065      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x420>
 8001730:	40023800 	.word	0x40023800
 8001734:	00f42400 	.word	0x00f42400
 8001738:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173c:	4b3d      	ldr	r3, [pc, #244]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x458>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	099b      	lsrs	r3, r3, #6
 8001742:	2200      	movs	r2, #0
 8001744:	4618      	mov	r0, r3
 8001746:	4611      	mov	r1, r2
 8001748:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800174c:	653b      	str	r3, [r7, #80]	@ 0x50
 800174e:	2300      	movs	r3, #0
 8001750:	657b      	str	r3, [r7, #84]	@ 0x54
 8001752:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001756:	4642      	mov	r2, r8
 8001758:	464b      	mov	r3, r9
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	0159      	lsls	r1, r3, #5
 8001764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001768:	0150      	lsls	r0, r2, #5
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4641      	mov	r1, r8
 8001770:	1a51      	subs	r1, r2, r1
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	4649      	mov	r1, r9
 8001776:	eb63 0301 	sbc.w	r3, r3, r1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001788:	4659      	mov	r1, fp
 800178a:	018b      	lsls	r3, r1, #6
 800178c:	4651      	mov	r1, sl
 800178e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001792:	4651      	mov	r1, sl
 8001794:	018a      	lsls	r2, r1, #6
 8001796:	4651      	mov	r1, sl
 8001798:	1a54      	subs	r4, r2, r1
 800179a:	4659      	mov	r1, fp
 800179c:	eb63 0501 	sbc.w	r5, r3, r1
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	00eb      	lsls	r3, r5, #3
 80017aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ae:	00e2      	lsls	r2, r4, #3
 80017b0:	4614      	mov	r4, r2
 80017b2:	461d      	mov	r5, r3
 80017b4:	4643      	mov	r3, r8
 80017b6:	18e3      	adds	r3, r4, r3
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	464b      	mov	r3, r9
 80017bc:	eb45 0303 	adc.w	r3, r5, r3
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ce:	4629      	mov	r1, r5
 80017d0:	028b      	lsls	r3, r1, #10
 80017d2:	4621      	mov	r1, r4
 80017d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017d8:	4621      	mov	r1, r4
 80017da:	028a      	lsls	r2, r1, #10
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017e4:	2200      	movs	r2, #0
 80017e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017e8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017ee:	f7fe fd5f 	bl	80002b0 <__aeabi_uldivmod>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4613      	mov	r3, r2
 80017f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x458>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	0f1b      	lsrs	r3, r3, #28
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800180a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800180e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800181a:	e003      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x45c>)
 800181e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001822:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001828:	4618      	mov	r0, r3
 800182a:	37b8      	adds	r7, #184	@ 0xb8
 800182c:	46bd      	mov	sp, r7
 800182e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	00f42400 	.word	0x00f42400

0800183c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e28d      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8083 	beq.w	8001962 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800185c:	4b94      	ldr	r3, [pc, #592]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b04      	cmp	r3, #4
 8001866:	d019      	beq.n	800189c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001868:	4b91      	ldr	r3, [pc, #580]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001870:	2b08      	cmp	r3, #8
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001874:	4b8e      	ldr	r3, [pc, #568]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800187c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001880:	d00c      	beq.n	800189c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001882:	4b8b      	ldr	r3, [pc, #556]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800188a:	2b0c      	cmp	r3, #12
 800188c:	d112      	bne.n	80018b4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188e:	4b88      	ldr	r3, [pc, #544]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800189a:	d10b      	bne.n	80018b4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	4b84      	ldr	r3, [pc, #528]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d05b      	beq.n	8001960 <HAL_RCC_OscConfig+0x124>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d157      	bne.n	8001960 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e25a      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018bc:	d106      	bne.n	80018cc <HAL_RCC_OscConfig+0x90>
 80018be:	4b7c      	ldr	r3, [pc, #496]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e01d      	b.n	8001908 <HAL_RCC_OscConfig+0xcc>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0xb4>
 80018d6:	4b76      	ldr	r3, [pc, #472]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a75      	ldr	r2, [pc, #468]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b73      	ldr	r3, [pc, #460]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a72      	ldr	r2, [pc, #456]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e00b      	b.n	8001908 <HAL_RCC_OscConfig+0xcc>
 80018f0:	4b6f      	ldr	r3, [pc, #444]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a6e      	ldr	r2, [pc, #440]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80018f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6b      	ldr	r2, [pc, #428]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d013      	beq.n	8001938 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff f990 	bl	8000c34 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff f98c 	bl	8000c34 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	@ 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e21f      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b61      	ldr	r3, [pc, #388]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0xdc>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f97c 	bl	8000c34 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff f978 	bl	8000c34 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	@ 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e20b      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	4b57      	ldr	r3, [pc, #348]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x104>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d06f      	beq.n	8001a4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800196e:	4b50      	ldr	r3, [pc, #320]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b00      	cmp	r3, #0
 8001978:	d017      	beq.n	80019aa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800197a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001982:	2b08      	cmp	r3, #8
 8001984:	d105      	bne.n	8001992 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001986:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00b      	beq.n	80019aa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001992:	4b47      	ldr	r3, [pc, #284]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d11c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199e:	4b44      	ldr	r3, [pc, #272]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d116      	bne.n	80019d8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	4b41      	ldr	r3, [pc, #260]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_RCC_OscConfig+0x186>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e1d3      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4937      	ldr	r1, [pc, #220]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	e03a      	b.n	8001a4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d020      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e0:	4b34      	ldr	r3, [pc, #208]	@ (8001ab4 <HAL_RCC_OscConfig+0x278>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff f925 	bl	8000c34 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff f921 	bl	8000c34 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1b4      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b28      	ldr	r3, [pc, #160]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4925      	ldr	r1, [pc, #148]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a22:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <HAL_RCC_OscConfig+0x278>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f904 	bl	8000c34 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a30:	f7ff f900 	bl	8000c34 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e193      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d036      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d016      	beq.n	8001a90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a62:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a68:	f7ff f8e4 	bl	8000c34 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff f8e0 	bl	8000c34 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e173      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_RCC_OscConfig+0x274>)
 8001a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x234>
 8001a8e:	e01b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a90:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a96:	f7ff f8cd 	bl	8000c34 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9c:	e00e      	b.n	8001abc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9e:	f7ff f8c9 	bl	8000c34 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d907      	bls.n	8001abc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e15c      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	42470000 	.word	0x42470000
 8001ab8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	4b8a      	ldr	r3, [pc, #552]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ea      	bne.n	8001a9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 8097 	beq.w	8001c04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ada:	4b83      	ldr	r3, [pc, #524]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10f      	bne.n	8001b06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	4a7e      	ldr	r2, [pc, #504]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b02:	2301      	movs	r3, #1
 8001b04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b06:	4b79      	ldr	r3, [pc, #484]	@ (8001cec <HAL_RCC_OscConfig+0x4b0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d118      	bne.n	8001b44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b12:	4b76      	ldr	r3, [pc, #472]	@ (8001cec <HAL_RCC_OscConfig+0x4b0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a75      	ldr	r2, [pc, #468]	@ (8001cec <HAL_RCC_OscConfig+0x4b0>)
 8001b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f889 	bl	8000c34 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b26:	f7ff f885 	bl	8000c34 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e118      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	4b6c      	ldr	r3, [pc, #432]	@ (8001cec <HAL_RCC_OscConfig+0x4b0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x31e>
 8001b4c:	4b66      	ldr	r3, [pc, #408]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b50:	4a65      	ldr	r2, [pc, #404]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b58:	e01c      	b.n	8001b94 <HAL_RCC_OscConfig+0x358>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x340>
 8001b62:	4b61      	ldr	r3, [pc, #388]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b66:	4a60      	ldr	r2, [pc, #384]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b6e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b72:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0x358>
 8001b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b80:	4a59      	ldr	r2, [pc, #356]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b88:	4b57      	ldr	r3, [pc, #348]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8c:	4a56      	ldr	r2, [pc, #344]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001b8e:	f023 0304 	bic.w	r3, r3, #4
 8001b92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d015      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9c:	f7ff f84a 	bl	8000c34 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f846 	bl	8000c34 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e0d7      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bba:	4b4b      	ldr	r3, [pc, #300]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0ee      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x368>
 8001bc6:	e014      	b.n	8001bf2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff f834 	bl	8000c34 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7ff f830 	bl	8000c34 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e0c1      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be6:	4b40      	ldr	r3, [pc, #256]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1ee      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80ad 	beq.w	8001d68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c0e:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d060      	beq.n	8001cdc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d145      	bne.n	8001cae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b33      	ldr	r3, [pc, #204]	@ (8001cf0 <HAL_RCC_OscConfig+0x4b4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff f804 	bl	8000c34 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff f800 	bl	8000c34 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e093      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	4b29      	ldr	r3, [pc, #164]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69da      	ldr	r2, [r3, #28]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5c:	019b      	lsls	r3, r3, #6
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	3b01      	subs	r3, #1
 8001c68:	041b      	lsls	r3, r3, #16
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c70:	061b      	lsls	r3, r3, #24
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c78:	071b      	lsls	r3, r3, #28
 8001c7a:	491b      	ldr	r1, [pc, #108]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c80:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <HAL_RCC_OscConfig+0x4b4>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7fe ffd5 	bl	8000c34 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7fe ffd1 	bl	8000c34 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e064      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca0:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x452>
 8001cac:	e05c      	b.n	8001d68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <HAL_RCC_OscConfig+0x4b4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7fe ffbe 	bl	8000c34 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7fe ffba 	bl	8000c34 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e04d      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_RCC_OscConfig+0x4ac>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x480>
 8001cda:	e045      	b.n	8001d68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d107      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e040      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <HAL_RCC_OscConfig+0x538>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d030      	beq.n	8001d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d129      	bne.n	8001d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d122      	bne.n	8001d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d24:	4013      	ands	r3, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d119      	bne.n	8001d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3a:	085b      	lsrs	r3, r3, #1
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d10f      	bne.n	8001d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e042      	b.n	8001e10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe fda8 	bl	80008f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2224      	movs	r2, #36	@ 0x24
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f973 	bl	80020a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	@ 0x28
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d175      	bne.n	8001f24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_UART_Transmit+0x2c>
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e06e      	b.n	8001f26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2221      	movs	r2, #33	@ 0x21
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e56:	f7fe feed 	bl	8000c34 <HAL_GetTick>
 8001e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	88fa      	ldrh	r2, [r7, #6]
 8001e60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	88fa      	ldrh	r2, [r7, #6]
 8001e66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e70:	d108      	bne.n	8001e84 <HAL_UART_Transmit+0x6c>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d104      	bne.n	8001e84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	e003      	b.n	8001e8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e8c:	e02e      	b.n	8001eec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2200      	movs	r2, #0
 8001e96:	2180      	movs	r1, #128	@ 0x80
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f848 	bl	8001f2e <UART_WaitOnFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e03a      	b.n	8001f26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10b      	bne.n	8001ece <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	3302      	adds	r3, #2
 8001eca:	61bb      	str	r3, [r7, #24]
 8001ecc:	e007      	b.n	8001ede <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	781a      	ldrb	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	3301      	adds	r3, #1
 8001edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1cb      	bne.n	8001e8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2140      	movs	r1, #64	@ 0x40
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f814 	bl	8001f2e <UART_WaitOnFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e006      	b.n	8001f26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e000      	b.n	8001f26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
  }
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f3e:	e03b      	b.n	8001fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d037      	beq.n	8001fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f48:	f7fe fe74 	bl	8000c34 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	6a3a      	ldr	r2, [r7, #32]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d302      	bcc.n	8001f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e03a      	b.n	8001fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d023      	beq.n	8001fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b80      	cmp	r3, #128	@ 0x80
 8001f74:	d020      	beq.n	8001fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b40      	cmp	r3, #64	@ 0x40
 8001f7a:	d01d      	beq.n	8001fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d116      	bne.n	8001fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f81d 	bl	8001fe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e00f      	b.n	8001fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d0b4      	beq.n	8001f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b095      	sub	sp, #84	@ 0x54
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	330c      	adds	r3, #12
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ff2:	e853 3f00 	ldrex	r3, [r3]
 8001ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	330c      	adds	r3, #12
 8002006:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002008:	643a      	str	r2, [r7, #64]	@ 0x40
 800200a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800200c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800200e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002010:	e841 2300 	strex	r3, r2, [r1]
 8002014:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e5      	bne.n	8001fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3314      	adds	r3, #20
 8002022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	e853 3f00 	ldrex	r3, [r3]
 800202a:	61fb      	str	r3, [r7, #28]
   return(result);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3314      	adds	r3, #20
 800203a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800203c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800203e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002044:	e841 2300 	strex	r3, r2, [r1]
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e5      	bne.n	800201c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	2b01      	cmp	r3, #1
 8002056:	d119      	bne.n	800208c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	330c      	adds	r3, #12
 800205e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	e853 3f00 	ldrex	r3, [r3]
 8002066:	60bb      	str	r3, [r7, #8]
   return(result);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f023 0310 	bic.w	r3, r3, #16
 800206e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	330c      	adds	r3, #12
 8002076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002078:	61ba      	str	r2, [r7, #24]
 800207a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207c:	6979      	ldr	r1, [r7, #20]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	e841 2300 	strex	r3, r2, [r1]
 8002084:	613b      	str	r3, [r7, #16]
   return(result);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1e5      	bne.n	8002058 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800209a:	bf00      	nop
 800209c:	3754      	adds	r7, #84	@ 0x54
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ac:	b0c0      	sub	sp, #256	@ 0x100
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80020c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c4:	68d9      	ldr	r1, [r3, #12]
 80020c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	ea40 0301 	orr.w	r3, r0, r1
 80020d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	431a      	orrs	r2, r3
 80020e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002100:	f021 010c 	bic.w	r1, r1, #12
 8002104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800210e:	430b      	orrs	r3, r1
 8002110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800211e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002122:	6999      	ldr	r1, [r3, #24]
 8002124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	ea40 0301 	orr.w	r3, r0, r1
 800212e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b8f      	ldr	r3, [pc, #572]	@ (8002374 <UART_SetConfig+0x2cc>)
 8002138:	429a      	cmp	r2, r3
 800213a:	d005      	beq.n	8002148 <UART_SetConfig+0xa0>
 800213c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4b8d      	ldr	r3, [pc, #564]	@ (8002378 <UART_SetConfig+0x2d0>)
 8002144:	429a      	cmp	r2, r3
 8002146:	d104      	bne.n	8002152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002148:	f7ff f934 	bl	80013b4 <HAL_RCC_GetPCLK2Freq>
 800214c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002150:	e003      	b.n	800215a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002152:	f7ff f91b 	bl	800138c <HAL_RCC_GetPCLK1Freq>
 8002156:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800215a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002164:	f040 810c 	bne.w	8002380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800216c:	2200      	movs	r2, #0
 800216e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002172:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800217a:	4622      	mov	r2, r4
 800217c:	462b      	mov	r3, r5
 800217e:	1891      	adds	r1, r2, r2
 8002180:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002182:	415b      	adcs	r3, r3
 8002184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800218a:	4621      	mov	r1, r4
 800218c:	eb12 0801 	adds.w	r8, r2, r1
 8002190:	4629      	mov	r1, r5
 8002192:	eb43 0901 	adc.w	r9, r3, r1
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021aa:	4690      	mov	r8, r2
 80021ac:	4699      	mov	r9, r3
 80021ae:	4623      	mov	r3, r4
 80021b0:	eb18 0303 	adds.w	r3, r8, r3
 80021b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80021b8:	462b      	mov	r3, r5
 80021ba:	eb49 0303 	adc.w	r3, r9, r3
 80021be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80021c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80021ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80021d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80021d6:	460b      	mov	r3, r1
 80021d8:	18db      	adds	r3, r3, r3
 80021da:	653b      	str	r3, [r7, #80]	@ 0x50
 80021dc:	4613      	mov	r3, r2
 80021de:	eb42 0303 	adc.w	r3, r2, r3
 80021e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80021e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80021ec:	f7fe f860 	bl	80002b0 <__aeabi_uldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4b61      	ldr	r3, [pc, #388]	@ (800237c <UART_SetConfig+0x2d4>)
 80021f6:	fba3 2302 	umull	r2, r3, r3, r2
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	011c      	lsls	r4, r3, #4
 80021fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002202:	2200      	movs	r2, #0
 8002204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002208:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800220c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002210:	4642      	mov	r2, r8
 8002212:	464b      	mov	r3, r9
 8002214:	1891      	adds	r1, r2, r2
 8002216:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002218:	415b      	adcs	r3, r3
 800221a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800221c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002220:	4641      	mov	r1, r8
 8002222:	eb12 0a01 	adds.w	sl, r2, r1
 8002226:	4649      	mov	r1, r9
 8002228:	eb43 0b01 	adc.w	fp, r3, r1
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800223c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002240:	4692      	mov	sl, r2
 8002242:	469b      	mov	fp, r3
 8002244:	4643      	mov	r3, r8
 8002246:	eb1a 0303 	adds.w	r3, sl, r3
 800224a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800224e:	464b      	mov	r3, r9
 8002250:	eb4b 0303 	adc.w	r3, fp, r3
 8002254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800226c:	460b      	mov	r3, r1
 800226e:	18db      	adds	r3, r3, r3
 8002270:	643b      	str	r3, [r7, #64]	@ 0x40
 8002272:	4613      	mov	r3, r2
 8002274:	eb42 0303 	adc.w	r3, r2, r3
 8002278:	647b      	str	r3, [r7, #68]	@ 0x44
 800227a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800227e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002282:	f7fe f815 	bl	80002b0 <__aeabi_uldivmod>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4611      	mov	r1, r2
 800228c:	4b3b      	ldr	r3, [pc, #236]	@ (800237c <UART_SetConfig+0x2d4>)
 800228e:	fba3 2301 	umull	r2, r3, r3, r1
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2264      	movs	r2, #100	@ 0x64
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	1acb      	subs	r3, r1, r3
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80022a2:	4b36      	ldr	r3, [pc, #216]	@ (800237c <UART_SetConfig+0x2d4>)
 80022a4:	fba3 2302 	umull	r2, r3, r3, r2
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80022b0:	441c      	add	r4, r3
 80022b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022b6:	2200      	movs	r2, #0
 80022b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80022c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80022c4:	4642      	mov	r2, r8
 80022c6:	464b      	mov	r3, r9
 80022c8:	1891      	adds	r1, r2, r2
 80022ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022cc:	415b      	adcs	r3, r3
 80022ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80022d4:	4641      	mov	r1, r8
 80022d6:	1851      	adds	r1, r2, r1
 80022d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80022da:	4649      	mov	r1, r9
 80022dc:	414b      	adcs	r3, r1
 80022de:	637b      	str	r3, [r7, #52]	@ 0x34
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80022ec:	4659      	mov	r1, fp
 80022ee:	00cb      	lsls	r3, r1, #3
 80022f0:	4651      	mov	r1, sl
 80022f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022f6:	4651      	mov	r1, sl
 80022f8:	00ca      	lsls	r2, r1, #3
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	4642      	mov	r2, r8
 8002302:	189b      	adds	r3, r3, r2
 8002304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002308:	464b      	mov	r3, r9
 800230a:	460a      	mov	r2, r1
 800230c:	eb42 0303 	adc.w	r3, r2, r3
 8002310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002320:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002328:	460b      	mov	r3, r1
 800232a:	18db      	adds	r3, r3, r3
 800232c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800232e:	4613      	mov	r3, r2
 8002330:	eb42 0303 	adc.w	r3, r2, r3
 8002334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800233a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800233e:	f7fd ffb7 	bl	80002b0 <__aeabi_uldivmod>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <UART_SetConfig+0x2d4>)
 8002348:	fba3 1302 	umull	r1, r3, r3, r2
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	2164      	movs	r1, #100	@ 0x64
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	3332      	adds	r3, #50	@ 0x32
 800235a:	4a08      	ldr	r2, [pc, #32]	@ (800237c <UART_SetConfig+0x2d4>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	f003 0207 	and.w	r2, r3, #7
 8002366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4422      	add	r2, r4
 800236e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002370:	e106      	b.n	8002580 <UART_SetConfig+0x4d8>
 8002372:	bf00      	nop
 8002374:	40011000 	.word	0x40011000
 8002378:	40011400 	.word	0x40011400
 800237c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002384:	2200      	movs	r2, #0
 8002386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800238a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800238e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002392:	4642      	mov	r2, r8
 8002394:	464b      	mov	r3, r9
 8002396:	1891      	adds	r1, r2, r2
 8002398:	6239      	str	r1, [r7, #32]
 800239a:	415b      	adcs	r3, r3
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
 800239e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023a2:	4641      	mov	r1, r8
 80023a4:	1854      	adds	r4, r2, r1
 80023a6:	4649      	mov	r1, r9
 80023a8:	eb43 0501 	adc.w	r5, r3, r1
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	00eb      	lsls	r3, r5, #3
 80023b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ba:	00e2      	lsls	r2, r4, #3
 80023bc:	4614      	mov	r4, r2
 80023be:	461d      	mov	r5, r3
 80023c0:	4643      	mov	r3, r8
 80023c2:	18e3      	adds	r3, r4, r3
 80023c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80023c8:	464b      	mov	r3, r9
 80023ca:	eb45 0303 	adc.w	r3, r5, r3
 80023ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80023d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80023ee:	4629      	mov	r1, r5
 80023f0:	008b      	lsls	r3, r1, #2
 80023f2:	4621      	mov	r1, r4
 80023f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023f8:	4621      	mov	r1, r4
 80023fa:	008a      	lsls	r2, r1, #2
 80023fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002400:	f7fd ff56 	bl	80002b0 <__aeabi_uldivmod>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4b60      	ldr	r3, [pc, #384]	@ (800258c <UART_SetConfig+0x4e4>)
 800240a:	fba3 2302 	umull	r2, r3, r3, r2
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	011c      	lsls	r4, r3, #4
 8002412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002416:	2200      	movs	r2, #0
 8002418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800241c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002424:	4642      	mov	r2, r8
 8002426:	464b      	mov	r3, r9
 8002428:	1891      	adds	r1, r2, r2
 800242a:	61b9      	str	r1, [r7, #24]
 800242c:	415b      	adcs	r3, r3
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002434:	4641      	mov	r1, r8
 8002436:	1851      	adds	r1, r2, r1
 8002438:	6139      	str	r1, [r7, #16]
 800243a:	4649      	mov	r1, r9
 800243c:	414b      	adcs	r3, r1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800244c:	4659      	mov	r1, fp
 800244e:	00cb      	lsls	r3, r1, #3
 8002450:	4651      	mov	r1, sl
 8002452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002456:	4651      	mov	r1, sl
 8002458:	00ca      	lsls	r2, r1, #3
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	4603      	mov	r3, r0
 8002460:	4642      	mov	r2, r8
 8002462:	189b      	adds	r3, r3, r2
 8002464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002468:	464b      	mov	r3, r9
 800246a:	460a      	mov	r2, r1
 800246c:	eb42 0303 	adc.w	r3, r2, r3
 8002470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800247e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800248c:	4649      	mov	r1, r9
 800248e:	008b      	lsls	r3, r1, #2
 8002490:	4641      	mov	r1, r8
 8002492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002496:	4641      	mov	r1, r8
 8002498:	008a      	lsls	r2, r1, #2
 800249a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800249e:	f7fd ff07 	bl	80002b0 <__aeabi_uldivmod>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	4b38      	ldr	r3, [pc, #224]	@ (800258c <UART_SetConfig+0x4e4>)
 80024aa:	fba3 2301 	umull	r2, r3, r3, r1
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2264      	movs	r2, #100	@ 0x64
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	1acb      	subs	r3, r1, r3
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	3332      	adds	r3, #50	@ 0x32
 80024bc:	4a33      	ldr	r2, [pc, #204]	@ (800258c <UART_SetConfig+0x4e4>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024c8:	441c      	add	r4, r3
 80024ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024ce:	2200      	movs	r2, #0
 80024d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80024d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80024d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80024d8:	4642      	mov	r2, r8
 80024da:	464b      	mov	r3, r9
 80024dc:	1891      	adds	r1, r2, r2
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	415b      	adcs	r3, r3
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024e8:	4641      	mov	r1, r8
 80024ea:	1851      	adds	r1, r2, r1
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	4649      	mov	r1, r9
 80024f0:	414b      	adcs	r3, r1
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002500:	4659      	mov	r1, fp
 8002502:	00cb      	lsls	r3, r1, #3
 8002504:	4651      	mov	r1, sl
 8002506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800250a:	4651      	mov	r1, sl
 800250c:	00ca      	lsls	r2, r1, #3
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	4603      	mov	r3, r0
 8002514:	4642      	mov	r2, r8
 8002516:	189b      	adds	r3, r3, r2
 8002518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800251a:	464b      	mov	r3, r9
 800251c:	460a      	mov	r2, r1
 800251e:	eb42 0303 	adc.w	r3, r2, r3
 8002522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	663b      	str	r3, [r7, #96]	@ 0x60
 800252e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800253c:	4649      	mov	r1, r9
 800253e:	008b      	lsls	r3, r1, #2
 8002540:	4641      	mov	r1, r8
 8002542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002546:	4641      	mov	r1, r8
 8002548:	008a      	lsls	r2, r1, #2
 800254a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800254e:	f7fd feaf 	bl	80002b0 <__aeabi_uldivmod>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <UART_SetConfig+0x4e4>)
 8002558:	fba3 1302 	umull	r1, r3, r3, r2
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	2164      	movs	r1, #100	@ 0x64
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	3332      	adds	r3, #50	@ 0x32
 800256a:	4a08      	ldr	r2, [pc, #32]	@ (800258c <UART_SetConfig+0x4e4>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	f003 020f 	and.w	r2, r3, #15
 8002576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4422      	add	r2, r4
 800257e:	609a      	str	r2, [r3, #8]
}
 8002580:	bf00      	nop
 8002582:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002586:	46bd      	mov	sp, r7
 8002588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800258c:	51eb851f 	.word	0x51eb851f

08002590 <std>:
 8002590:	2300      	movs	r3, #0
 8002592:	b510      	push	{r4, lr}
 8002594:	4604      	mov	r4, r0
 8002596:	e9c0 3300 	strd	r3, r3, [r0]
 800259a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800259e:	6083      	str	r3, [r0, #8]
 80025a0:	8181      	strh	r1, [r0, #12]
 80025a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80025a4:	81c2      	strh	r2, [r0, #14]
 80025a6:	6183      	str	r3, [r0, #24]
 80025a8:	4619      	mov	r1, r3
 80025aa:	2208      	movs	r2, #8
 80025ac:	305c      	adds	r0, #92	@ 0x5c
 80025ae:	f000 f9f9 	bl	80029a4 <memset>
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <std+0x58>)
 80025b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80025b6:	4b0d      	ldr	r3, [pc, #52]	@ (80025ec <std+0x5c>)
 80025b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80025ba:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <std+0x60>)
 80025bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80025be:	4b0d      	ldr	r3, [pc, #52]	@ (80025f4 <std+0x64>)
 80025c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80025c2:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <std+0x68>)
 80025c4:	6224      	str	r4, [r4, #32]
 80025c6:	429c      	cmp	r4, r3
 80025c8:	d006      	beq.n	80025d8 <std+0x48>
 80025ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80025ce:	4294      	cmp	r4, r2
 80025d0:	d002      	beq.n	80025d8 <std+0x48>
 80025d2:	33d0      	adds	r3, #208	@ 0xd0
 80025d4:	429c      	cmp	r4, r3
 80025d6:	d105      	bne.n	80025e4 <std+0x54>
 80025d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80025dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025e0:	f000 ba58 	b.w	8002a94 <__retarget_lock_init_recursive>
 80025e4:	bd10      	pop	{r4, pc}
 80025e6:	bf00      	nop
 80025e8:	080027f5 	.word	0x080027f5
 80025ec:	08002817 	.word	0x08002817
 80025f0:	0800284f 	.word	0x0800284f
 80025f4:	08002873 	.word	0x08002873
 80025f8:	200000d4 	.word	0x200000d4

080025fc <stdio_exit_handler>:
 80025fc:	4a02      	ldr	r2, [pc, #8]	@ (8002608 <stdio_exit_handler+0xc>)
 80025fe:	4903      	ldr	r1, [pc, #12]	@ (800260c <stdio_exit_handler+0x10>)
 8002600:	4803      	ldr	r0, [pc, #12]	@ (8002610 <stdio_exit_handler+0x14>)
 8002602:	f000 b869 	b.w	80026d8 <_fwalk_sglue>
 8002606:	bf00      	nop
 8002608:	2000000c 	.word	0x2000000c
 800260c:	08003331 	.word	0x08003331
 8002610:	2000001c 	.word	0x2000001c

08002614 <cleanup_stdio>:
 8002614:	6841      	ldr	r1, [r0, #4]
 8002616:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <cleanup_stdio+0x34>)
 8002618:	4299      	cmp	r1, r3
 800261a:	b510      	push	{r4, lr}
 800261c:	4604      	mov	r4, r0
 800261e:	d001      	beq.n	8002624 <cleanup_stdio+0x10>
 8002620:	f000 fe86 	bl	8003330 <_fflush_r>
 8002624:	68a1      	ldr	r1, [r4, #8]
 8002626:	4b09      	ldr	r3, [pc, #36]	@ (800264c <cleanup_stdio+0x38>)
 8002628:	4299      	cmp	r1, r3
 800262a:	d002      	beq.n	8002632 <cleanup_stdio+0x1e>
 800262c:	4620      	mov	r0, r4
 800262e:	f000 fe7f 	bl	8003330 <_fflush_r>
 8002632:	68e1      	ldr	r1, [r4, #12]
 8002634:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <cleanup_stdio+0x3c>)
 8002636:	4299      	cmp	r1, r3
 8002638:	d004      	beq.n	8002644 <cleanup_stdio+0x30>
 800263a:	4620      	mov	r0, r4
 800263c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002640:	f000 be76 	b.w	8003330 <_fflush_r>
 8002644:	bd10      	pop	{r4, pc}
 8002646:	bf00      	nop
 8002648:	200000d4 	.word	0x200000d4
 800264c:	2000013c 	.word	0x2000013c
 8002650:	200001a4 	.word	0x200001a4

08002654 <global_stdio_init.part.0>:
 8002654:	b510      	push	{r4, lr}
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <global_stdio_init.part.0+0x30>)
 8002658:	4c0b      	ldr	r4, [pc, #44]	@ (8002688 <global_stdio_init.part.0+0x34>)
 800265a:	4a0c      	ldr	r2, [pc, #48]	@ (800268c <global_stdio_init.part.0+0x38>)
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	4620      	mov	r0, r4
 8002660:	2200      	movs	r2, #0
 8002662:	2104      	movs	r1, #4
 8002664:	f7ff ff94 	bl	8002590 <std>
 8002668:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800266c:	2201      	movs	r2, #1
 800266e:	2109      	movs	r1, #9
 8002670:	f7ff ff8e 	bl	8002590 <std>
 8002674:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002678:	2202      	movs	r2, #2
 800267a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800267e:	2112      	movs	r1, #18
 8002680:	f7ff bf86 	b.w	8002590 <std>
 8002684:	2000020c 	.word	0x2000020c
 8002688:	200000d4 	.word	0x200000d4
 800268c:	080025fd 	.word	0x080025fd

08002690 <__sfp_lock_acquire>:
 8002690:	4801      	ldr	r0, [pc, #4]	@ (8002698 <__sfp_lock_acquire+0x8>)
 8002692:	f000 ba00 	b.w	8002a96 <__retarget_lock_acquire_recursive>
 8002696:	bf00      	nop
 8002698:	20000215 	.word	0x20000215

0800269c <__sfp_lock_release>:
 800269c:	4801      	ldr	r0, [pc, #4]	@ (80026a4 <__sfp_lock_release+0x8>)
 800269e:	f000 b9fb 	b.w	8002a98 <__retarget_lock_release_recursive>
 80026a2:	bf00      	nop
 80026a4:	20000215 	.word	0x20000215

080026a8 <__sinit>:
 80026a8:	b510      	push	{r4, lr}
 80026aa:	4604      	mov	r4, r0
 80026ac:	f7ff fff0 	bl	8002690 <__sfp_lock_acquire>
 80026b0:	6a23      	ldr	r3, [r4, #32]
 80026b2:	b11b      	cbz	r3, 80026bc <__sinit+0x14>
 80026b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026b8:	f7ff bff0 	b.w	800269c <__sfp_lock_release>
 80026bc:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <__sinit+0x28>)
 80026be:	6223      	str	r3, [r4, #32]
 80026c0:	4b04      	ldr	r3, [pc, #16]	@ (80026d4 <__sinit+0x2c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f5      	bne.n	80026b4 <__sinit+0xc>
 80026c8:	f7ff ffc4 	bl	8002654 <global_stdio_init.part.0>
 80026cc:	e7f2      	b.n	80026b4 <__sinit+0xc>
 80026ce:	bf00      	nop
 80026d0:	08002615 	.word	0x08002615
 80026d4:	2000020c 	.word	0x2000020c

080026d8 <_fwalk_sglue>:
 80026d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026dc:	4607      	mov	r7, r0
 80026de:	4688      	mov	r8, r1
 80026e0:	4614      	mov	r4, r2
 80026e2:	2600      	movs	r6, #0
 80026e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026e8:	f1b9 0901 	subs.w	r9, r9, #1
 80026ec:	d505      	bpl.n	80026fa <_fwalk_sglue+0x22>
 80026ee:	6824      	ldr	r4, [r4, #0]
 80026f0:	2c00      	cmp	r4, #0
 80026f2:	d1f7      	bne.n	80026e4 <_fwalk_sglue+0xc>
 80026f4:	4630      	mov	r0, r6
 80026f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026fa:	89ab      	ldrh	r3, [r5, #12]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d907      	bls.n	8002710 <_fwalk_sglue+0x38>
 8002700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002704:	3301      	adds	r3, #1
 8002706:	d003      	beq.n	8002710 <_fwalk_sglue+0x38>
 8002708:	4629      	mov	r1, r5
 800270a:	4638      	mov	r0, r7
 800270c:	47c0      	blx	r8
 800270e:	4306      	orrs	r6, r0
 8002710:	3568      	adds	r5, #104	@ 0x68
 8002712:	e7e9      	b.n	80026e8 <_fwalk_sglue+0x10>

08002714 <iprintf>:
 8002714:	b40f      	push	{r0, r1, r2, r3}
 8002716:	b507      	push	{r0, r1, r2, lr}
 8002718:	4906      	ldr	r1, [pc, #24]	@ (8002734 <iprintf+0x20>)
 800271a:	ab04      	add	r3, sp, #16
 800271c:	6808      	ldr	r0, [r1, #0]
 800271e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002722:	6881      	ldr	r1, [r0, #8]
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	f000 fadb 	bl	8002ce0 <_vfiprintf_r>
 800272a:	b003      	add	sp, #12
 800272c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002730:	b004      	add	sp, #16
 8002732:	4770      	bx	lr
 8002734:	20000018 	.word	0x20000018

08002738 <_puts_r>:
 8002738:	6a03      	ldr	r3, [r0, #32]
 800273a:	b570      	push	{r4, r5, r6, lr}
 800273c:	6884      	ldr	r4, [r0, #8]
 800273e:	4605      	mov	r5, r0
 8002740:	460e      	mov	r6, r1
 8002742:	b90b      	cbnz	r3, 8002748 <_puts_r+0x10>
 8002744:	f7ff ffb0 	bl	80026a8 <__sinit>
 8002748:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800274a:	07db      	lsls	r3, r3, #31
 800274c:	d405      	bmi.n	800275a <_puts_r+0x22>
 800274e:	89a3      	ldrh	r3, [r4, #12]
 8002750:	0598      	lsls	r0, r3, #22
 8002752:	d402      	bmi.n	800275a <_puts_r+0x22>
 8002754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002756:	f000 f99e 	bl	8002a96 <__retarget_lock_acquire_recursive>
 800275a:	89a3      	ldrh	r3, [r4, #12]
 800275c:	0719      	lsls	r1, r3, #28
 800275e:	d502      	bpl.n	8002766 <_puts_r+0x2e>
 8002760:	6923      	ldr	r3, [r4, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d135      	bne.n	80027d2 <_puts_r+0x9a>
 8002766:	4621      	mov	r1, r4
 8002768:	4628      	mov	r0, r5
 800276a:	f000 f8c5 	bl	80028f8 <__swsetup_r>
 800276e:	b380      	cbz	r0, 80027d2 <_puts_r+0x9a>
 8002770:	f04f 35ff 	mov.w	r5, #4294967295
 8002774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002776:	07da      	lsls	r2, r3, #31
 8002778:	d405      	bmi.n	8002786 <_puts_r+0x4e>
 800277a:	89a3      	ldrh	r3, [r4, #12]
 800277c:	059b      	lsls	r3, r3, #22
 800277e:	d402      	bmi.n	8002786 <_puts_r+0x4e>
 8002780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002782:	f000 f989 	bl	8002a98 <__retarget_lock_release_recursive>
 8002786:	4628      	mov	r0, r5
 8002788:	bd70      	pop	{r4, r5, r6, pc}
 800278a:	2b00      	cmp	r3, #0
 800278c:	da04      	bge.n	8002798 <_puts_r+0x60>
 800278e:	69a2      	ldr	r2, [r4, #24]
 8002790:	429a      	cmp	r2, r3
 8002792:	dc17      	bgt.n	80027c4 <_puts_r+0x8c>
 8002794:	290a      	cmp	r1, #10
 8002796:	d015      	beq.n	80027c4 <_puts_r+0x8c>
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	6022      	str	r2, [r4, #0]
 800279e:	7019      	strb	r1, [r3, #0]
 80027a0:	68a3      	ldr	r3, [r4, #8]
 80027a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027a6:	3b01      	subs	r3, #1
 80027a8:	60a3      	str	r3, [r4, #8]
 80027aa:	2900      	cmp	r1, #0
 80027ac:	d1ed      	bne.n	800278a <_puts_r+0x52>
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da11      	bge.n	80027d6 <_puts_r+0x9e>
 80027b2:	4622      	mov	r2, r4
 80027b4:	210a      	movs	r1, #10
 80027b6:	4628      	mov	r0, r5
 80027b8:	f000 f85f 	bl	800287a <__swbuf_r>
 80027bc:	3001      	adds	r0, #1
 80027be:	d0d7      	beq.n	8002770 <_puts_r+0x38>
 80027c0:	250a      	movs	r5, #10
 80027c2:	e7d7      	b.n	8002774 <_puts_r+0x3c>
 80027c4:	4622      	mov	r2, r4
 80027c6:	4628      	mov	r0, r5
 80027c8:	f000 f857 	bl	800287a <__swbuf_r>
 80027cc:	3001      	adds	r0, #1
 80027ce:	d1e7      	bne.n	80027a0 <_puts_r+0x68>
 80027d0:	e7ce      	b.n	8002770 <_puts_r+0x38>
 80027d2:	3e01      	subs	r6, #1
 80027d4:	e7e4      	b.n	80027a0 <_puts_r+0x68>
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	6022      	str	r2, [r4, #0]
 80027dc:	220a      	movs	r2, #10
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e7ee      	b.n	80027c0 <_puts_r+0x88>
	...

080027e4 <puts>:
 80027e4:	4b02      	ldr	r3, [pc, #8]	@ (80027f0 <puts+0xc>)
 80027e6:	4601      	mov	r1, r0
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	f7ff bfa5 	b.w	8002738 <_puts_r>
 80027ee:	bf00      	nop
 80027f0:	20000018 	.word	0x20000018

080027f4 <__sread>:
 80027f4:	b510      	push	{r4, lr}
 80027f6:	460c      	mov	r4, r1
 80027f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027fc:	f000 f8fc 	bl	80029f8 <_read_r>
 8002800:	2800      	cmp	r0, #0
 8002802:	bfab      	itete	ge
 8002804:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002806:	89a3      	ldrhlt	r3, [r4, #12]
 8002808:	181b      	addge	r3, r3, r0
 800280a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800280e:	bfac      	ite	ge
 8002810:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002812:	81a3      	strhlt	r3, [r4, #12]
 8002814:	bd10      	pop	{r4, pc}

08002816 <__swrite>:
 8002816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800281a:	461f      	mov	r7, r3
 800281c:	898b      	ldrh	r3, [r1, #12]
 800281e:	05db      	lsls	r3, r3, #23
 8002820:	4605      	mov	r5, r0
 8002822:	460c      	mov	r4, r1
 8002824:	4616      	mov	r6, r2
 8002826:	d505      	bpl.n	8002834 <__swrite+0x1e>
 8002828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800282c:	2302      	movs	r3, #2
 800282e:	2200      	movs	r2, #0
 8002830:	f000 f8d0 	bl	80029d4 <_lseek_r>
 8002834:	89a3      	ldrh	r3, [r4, #12]
 8002836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800283a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800283e:	81a3      	strh	r3, [r4, #12]
 8002840:	4632      	mov	r2, r6
 8002842:	463b      	mov	r3, r7
 8002844:	4628      	mov	r0, r5
 8002846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800284a:	f000 b8e7 	b.w	8002a1c <_write_r>

0800284e <__sseek>:
 800284e:	b510      	push	{r4, lr}
 8002850:	460c      	mov	r4, r1
 8002852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002856:	f000 f8bd 	bl	80029d4 <_lseek_r>
 800285a:	1c43      	adds	r3, r0, #1
 800285c:	89a3      	ldrh	r3, [r4, #12]
 800285e:	bf15      	itete	ne
 8002860:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002862:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002866:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800286a:	81a3      	strheq	r3, [r4, #12]
 800286c:	bf18      	it	ne
 800286e:	81a3      	strhne	r3, [r4, #12]
 8002870:	bd10      	pop	{r4, pc}

08002872 <__sclose>:
 8002872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002876:	f000 b89d 	b.w	80029b4 <_close_r>

0800287a <__swbuf_r>:
 800287a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287c:	460e      	mov	r6, r1
 800287e:	4614      	mov	r4, r2
 8002880:	4605      	mov	r5, r0
 8002882:	b118      	cbz	r0, 800288c <__swbuf_r+0x12>
 8002884:	6a03      	ldr	r3, [r0, #32]
 8002886:	b90b      	cbnz	r3, 800288c <__swbuf_r+0x12>
 8002888:	f7ff ff0e 	bl	80026a8 <__sinit>
 800288c:	69a3      	ldr	r3, [r4, #24]
 800288e:	60a3      	str	r3, [r4, #8]
 8002890:	89a3      	ldrh	r3, [r4, #12]
 8002892:	071a      	lsls	r2, r3, #28
 8002894:	d501      	bpl.n	800289a <__swbuf_r+0x20>
 8002896:	6923      	ldr	r3, [r4, #16]
 8002898:	b943      	cbnz	r3, 80028ac <__swbuf_r+0x32>
 800289a:	4621      	mov	r1, r4
 800289c:	4628      	mov	r0, r5
 800289e:	f000 f82b 	bl	80028f8 <__swsetup_r>
 80028a2:	b118      	cbz	r0, 80028ac <__swbuf_r+0x32>
 80028a4:	f04f 37ff 	mov.w	r7, #4294967295
 80028a8:	4638      	mov	r0, r7
 80028aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	6922      	ldr	r2, [r4, #16]
 80028b0:	1a98      	subs	r0, r3, r2
 80028b2:	6963      	ldr	r3, [r4, #20]
 80028b4:	b2f6      	uxtb	r6, r6
 80028b6:	4283      	cmp	r3, r0
 80028b8:	4637      	mov	r7, r6
 80028ba:	dc05      	bgt.n	80028c8 <__swbuf_r+0x4e>
 80028bc:	4621      	mov	r1, r4
 80028be:	4628      	mov	r0, r5
 80028c0:	f000 fd36 	bl	8003330 <_fflush_r>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	d1ed      	bne.n	80028a4 <__swbuf_r+0x2a>
 80028c8:	68a3      	ldr	r3, [r4, #8]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	60a3      	str	r3, [r4, #8]
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	6022      	str	r2, [r4, #0]
 80028d4:	701e      	strb	r6, [r3, #0]
 80028d6:	6962      	ldr	r2, [r4, #20]
 80028d8:	1c43      	adds	r3, r0, #1
 80028da:	429a      	cmp	r2, r3
 80028dc:	d004      	beq.n	80028e8 <__swbuf_r+0x6e>
 80028de:	89a3      	ldrh	r3, [r4, #12]
 80028e0:	07db      	lsls	r3, r3, #31
 80028e2:	d5e1      	bpl.n	80028a8 <__swbuf_r+0x2e>
 80028e4:	2e0a      	cmp	r6, #10
 80028e6:	d1df      	bne.n	80028a8 <__swbuf_r+0x2e>
 80028e8:	4621      	mov	r1, r4
 80028ea:	4628      	mov	r0, r5
 80028ec:	f000 fd20 	bl	8003330 <_fflush_r>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d0d9      	beq.n	80028a8 <__swbuf_r+0x2e>
 80028f4:	e7d6      	b.n	80028a4 <__swbuf_r+0x2a>
	...

080028f8 <__swsetup_r>:
 80028f8:	b538      	push	{r3, r4, r5, lr}
 80028fa:	4b29      	ldr	r3, [pc, #164]	@ (80029a0 <__swsetup_r+0xa8>)
 80028fc:	4605      	mov	r5, r0
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	460c      	mov	r4, r1
 8002902:	b118      	cbz	r0, 800290c <__swsetup_r+0x14>
 8002904:	6a03      	ldr	r3, [r0, #32]
 8002906:	b90b      	cbnz	r3, 800290c <__swsetup_r+0x14>
 8002908:	f7ff fece 	bl	80026a8 <__sinit>
 800290c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002910:	0719      	lsls	r1, r3, #28
 8002912:	d422      	bmi.n	800295a <__swsetup_r+0x62>
 8002914:	06da      	lsls	r2, r3, #27
 8002916:	d407      	bmi.n	8002928 <__swsetup_r+0x30>
 8002918:	2209      	movs	r2, #9
 800291a:	602a      	str	r2, [r5, #0]
 800291c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002920:	81a3      	strh	r3, [r4, #12]
 8002922:	f04f 30ff 	mov.w	r0, #4294967295
 8002926:	e033      	b.n	8002990 <__swsetup_r+0x98>
 8002928:	0758      	lsls	r0, r3, #29
 800292a:	d512      	bpl.n	8002952 <__swsetup_r+0x5a>
 800292c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800292e:	b141      	cbz	r1, 8002942 <__swsetup_r+0x4a>
 8002930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002934:	4299      	cmp	r1, r3
 8002936:	d002      	beq.n	800293e <__swsetup_r+0x46>
 8002938:	4628      	mov	r0, r5
 800293a:	f000 f8af 	bl	8002a9c <_free_r>
 800293e:	2300      	movs	r3, #0
 8002940:	6363      	str	r3, [r4, #52]	@ 0x34
 8002942:	89a3      	ldrh	r3, [r4, #12]
 8002944:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002948:	81a3      	strh	r3, [r4, #12]
 800294a:	2300      	movs	r3, #0
 800294c:	6063      	str	r3, [r4, #4]
 800294e:	6923      	ldr	r3, [r4, #16]
 8002950:	6023      	str	r3, [r4, #0]
 8002952:	89a3      	ldrh	r3, [r4, #12]
 8002954:	f043 0308 	orr.w	r3, r3, #8
 8002958:	81a3      	strh	r3, [r4, #12]
 800295a:	6923      	ldr	r3, [r4, #16]
 800295c:	b94b      	cbnz	r3, 8002972 <__swsetup_r+0x7a>
 800295e:	89a3      	ldrh	r3, [r4, #12]
 8002960:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002968:	d003      	beq.n	8002972 <__swsetup_r+0x7a>
 800296a:	4621      	mov	r1, r4
 800296c:	4628      	mov	r0, r5
 800296e:	f000 fd2d 	bl	80033cc <__smakebuf_r>
 8002972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002976:	f013 0201 	ands.w	r2, r3, #1
 800297a:	d00a      	beq.n	8002992 <__swsetup_r+0x9a>
 800297c:	2200      	movs	r2, #0
 800297e:	60a2      	str	r2, [r4, #8]
 8002980:	6962      	ldr	r2, [r4, #20]
 8002982:	4252      	negs	r2, r2
 8002984:	61a2      	str	r2, [r4, #24]
 8002986:	6922      	ldr	r2, [r4, #16]
 8002988:	b942      	cbnz	r2, 800299c <__swsetup_r+0xa4>
 800298a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800298e:	d1c5      	bne.n	800291c <__swsetup_r+0x24>
 8002990:	bd38      	pop	{r3, r4, r5, pc}
 8002992:	0799      	lsls	r1, r3, #30
 8002994:	bf58      	it	pl
 8002996:	6962      	ldrpl	r2, [r4, #20]
 8002998:	60a2      	str	r2, [r4, #8]
 800299a:	e7f4      	b.n	8002986 <__swsetup_r+0x8e>
 800299c:	2000      	movs	r0, #0
 800299e:	e7f7      	b.n	8002990 <__swsetup_r+0x98>
 80029a0:	20000018 	.word	0x20000018

080029a4 <memset>:
 80029a4:	4402      	add	r2, r0
 80029a6:	4603      	mov	r3, r0
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d100      	bne.n	80029ae <memset+0xa>
 80029ac:	4770      	bx	lr
 80029ae:	f803 1b01 	strb.w	r1, [r3], #1
 80029b2:	e7f9      	b.n	80029a8 <memset+0x4>

080029b4 <_close_r>:
 80029b4:	b538      	push	{r3, r4, r5, lr}
 80029b6:	4d06      	ldr	r5, [pc, #24]	@ (80029d0 <_close_r+0x1c>)
 80029b8:	2300      	movs	r3, #0
 80029ba:	4604      	mov	r4, r0
 80029bc:	4608      	mov	r0, r1
 80029be:	602b      	str	r3, [r5, #0]
 80029c0:	f7fe f82c 	bl	8000a1c <_close>
 80029c4:	1c43      	adds	r3, r0, #1
 80029c6:	d102      	bne.n	80029ce <_close_r+0x1a>
 80029c8:	682b      	ldr	r3, [r5, #0]
 80029ca:	b103      	cbz	r3, 80029ce <_close_r+0x1a>
 80029cc:	6023      	str	r3, [r4, #0]
 80029ce:	bd38      	pop	{r3, r4, r5, pc}
 80029d0:	20000210 	.word	0x20000210

080029d4 <_lseek_r>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4d07      	ldr	r5, [pc, #28]	@ (80029f4 <_lseek_r+0x20>)
 80029d8:	4604      	mov	r4, r0
 80029da:	4608      	mov	r0, r1
 80029dc:	4611      	mov	r1, r2
 80029de:	2200      	movs	r2, #0
 80029e0:	602a      	str	r2, [r5, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7fe f841 	bl	8000a6a <_lseek>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d102      	bne.n	80029f2 <_lseek_r+0x1e>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	b103      	cbz	r3, 80029f2 <_lseek_r+0x1e>
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	20000210 	.word	0x20000210

080029f8 <_read_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4d07      	ldr	r5, [pc, #28]	@ (8002a18 <_read_r+0x20>)
 80029fc:	4604      	mov	r4, r0
 80029fe:	4608      	mov	r0, r1
 8002a00:	4611      	mov	r1, r2
 8002a02:	2200      	movs	r2, #0
 8002a04:	602a      	str	r2, [r5, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	f7fd ffeb 	bl	80009e2 <_read>
 8002a0c:	1c43      	adds	r3, r0, #1
 8002a0e:	d102      	bne.n	8002a16 <_read_r+0x1e>
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	b103      	cbz	r3, 8002a16 <_read_r+0x1e>
 8002a14:	6023      	str	r3, [r4, #0]
 8002a16:	bd38      	pop	{r3, r4, r5, pc}
 8002a18:	20000210 	.word	0x20000210

08002a1c <_write_r>:
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	4d07      	ldr	r5, [pc, #28]	@ (8002a3c <_write_r+0x20>)
 8002a20:	4604      	mov	r4, r0
 8002a22:	4608      	mov	r0, r1
 8002a24:	4611      	mov	r1, r2
 8002a26:	2200      	movs	r2, #0
 8002a28:	602a      	str	r2, [r5, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f7fd fdd6 	bl	80005dc <_write>
 8002a30:	1c43      	adds	r3, r0, #1
 8002a32:	d102      	bne.n	8002a3a <_write_r+0x1e>
 8002a34:	682b      	ldr	r3, [r5, #0]
 8002a36:	b103      	cbz	r3, 8002a3a <_write_r+0x1e>
 8002a38:	6023      	str	r3, [r4, #0]
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
 8002a3c:	20000210 	.word	0x20000210

08002a40 <__errno>:
 8002a40:	4b01      	ldr	r3, [pc, #4]	@ (8002a48 <__errno+0x8>)
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000018 	.word	0x20000018

08002a4c <__libc_init_array>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8002a84 <__libc_init_array+0x38>)
 8002a50:	4c0d      	ldr	r4, [pc, #52]	@ (8002a88 <__libc_init_array+0x3c>)
 8002a52:	1b64      	subs	r4, r4, r5
 8002a54:	10a4      	asrs	r4, r4, #2
 8002a56:	2600      	movs	r6, #0
 8002a58:	42a6      	cmp	r6, r4
 8002a5a:	d109      	bne.n	8002a70 <__libc_init_array+0x24>
 8002a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8002a8c <__libc_init_array+0x40>)
 8002a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8002a90 <__libc_init_array+0x44>)
 8002a60:	f000 fd22 	bl	80034a8 <_init>
 8002a64:	1b64      	subs	r4, r4, r5
 8002a66:	10a4      	asrs	r4, r4, #2
 8002a68:	2600      	movs	r6, #0
 8002a6a:	42a6      	cmp	r6, r4
 8002a6c:	d105      	bne.n	8002a7a <__libc_init_array+0x2e>
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a74:	4798      	blx	r3
 8002a76:	3601      	adds	r6, #1
 8002a78:	e7ee      	b.n	8002a58 <__libc_init_array+0xc>
 8002a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7e:	4798      	blx	r3
 8002a80:	3601      	adds	r6, #1
 8002a82:	e7f2      	b.n	8002a6a <__libc_init_array+0x1e>
 8002a84:	08003548 	.word	0x08003548
 8002a88:	08003548 	.word	0x08003548
 8002a8c:	08003548 	.word	0x08003548
 8002a90:	0800354c 	.word	0x0800354c

08002a94 <__retarget_lock_init_recursive>:
 8002a94:	4770      	bx	lr

08002a96 <__retarget_lock_acquire_recursive>:
 8002a96:	4770      	bx	lr

08002a98 <__retarget_lock_release_recursive>:
 8002a98:	4770      	bx	lr
	...

08002a9c <_free_r>:
 8002a9c:	b538      	push	{r3, r4, r5, lr}
 8002a9e:	4605      	mov	r5, r0
 8002aa0:	2900      	cmp	r1, #0
 8002aa2:	d041      	beq.n	8002b28 <_free_r+0x8c>
 8002aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aa8:	1f0c      	subs	r4, r1, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bfb8      	it	lt
 8002aae:	18e4      	addlt	r4, r4, r3
 8002ab0:	f000 f8e0 	bl	8002c74 <__malloc_lock>
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b2c <_free_r+0x90>)
 8002ab6:	6813      	ldr	r3, [r2, #0]
 8002ab8:	b933      	cbnz	r3, 8002ac8 <_free_r+0x2c>
 8002aba:	6063      	str	r3, [r4, #4]
 8002abc:	6014      	str	r4, [r2, #0]
 8002abe:	4628      	mov	r0, r5
 8002ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ac4:	f000 b8dc 	b.w	8002c80 <__malloc_unlock>
 8002ac8:	42a3      	cmp	r3, r4
 8002aca:	d908      	bls.n	8002ade <_free_r+0x42>
 8002acc:	6820      	ldr	r0, [r4, #0]
 8002ace:	1821      	adds	r1, r4, r0
 8002ad0:	428b      	cmp	r3, r1
 8002ad2:	bf01      	itttt	eq
 8002ad4:	6819      	ldreq	r1, [r3, #0]
 8002ad6:	685b      	ldreq	r3, [r3, #4]
 8002ad8:	1809      	addeq	r1, r1, r0
 8002ada:	6021      	streq	r1, [r4, #0]
 8002adc:	e7ed      	b.n	8002aba <_free_r+0x1e>
 8002ade:	461a      	mov	r2, r3
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	b10b      	cbz	r3, 8002ae8 <_free_r+0x4c>
 8002ae4:	42a3      	cmp	r3, r4
 8002ae6:	d9fa      	bls.n	8002ade <_free_r+0x42>
 8002ae8:	6811      	ldr	r1, [r2, #0]
 8002aea:	1850      	adds	r0, r2, r1
 8002aec:	42a0      	cmp	r0, r4
 8002aee:	d10b      	bne.n	8002b08 <_free_r+0x6c>
 8002af0:	6820      	ldr	r0, [r4, #0]
 8002af2:	4401      	add	r1, r0
 8002af4:	1850      	adds	r0, r2, r1
 8002af6:	4283      	cmp	r3, r0
 8002af8:	6011      	str	r1, [r2, #0]
 8002afa:	d1e0      	bne.n	8002abe <_free_r+0x22>
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	6053      	str	r3, [r2, #4]
 8002b02:	4408      	add	r0, r1
 8002b04:	6010      	str	r0, [r2, #0]
 8002b06:	e7da      	b.n	8002abe <_free_r+0x22>
 8002b08:	d902      	bls.n	8002b10 <_free_r+0x74>
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	602b      	str	r3, [r5, #0]
 8002b0e:	e7d6      	b.n	8002abe <_free_r+0x22>
 8002b10:	6820      	ldr	r0, [r4, #0]
 8002b12:	1821      	adds	r1, r4, r0
 8002b14:	428b      	cmp	r3, r1
 8002b16:	bf04      	itt	eq
 8002b18:	6819      	ldreq	r1, [r3, #0]
 8002b1a:	685b      	ldreq	r3, [r3, #4]
 8002b1c:	6063      	str	r3, [r4, #4]
 8002b1e:	bf04      	itt	eq
 8002b20:	1809      	addeq	r1, r1, r0
 8002b22:	6021      	streq	r1, [r4, #0]
 8002b24:	6054      	str	r4, [r2, #4]
 8002b26:	e7ca      	b.n	8002abe <_free_r+0x22>
 8002b28:	bd38      	pop	{r3, r4, r5, pc}
 8002b2a:	bf00      	nop
 8002b2c:	2000021c 	.word	0x2000021c

08002b30 <sbrk_aligned>:
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	4e0f      	ldr	r6, [pc, #60]	@ (8002b70 <sbrk_aligned+0x40>)
 8002b34:	460c      	mov	r4, r1
 8002b36:	6831      	ldr	r1, [r6, #0]
 8002b38:	4605      	mov	r5, r0
 8002b3a:	b911      	cbnz	r1, 8002b42 <sbrk_aligned+0x12>
 8002b3c:	f000 fca4 	bl	8003488 <_sbrk_r>
 8002b40:	6030      	str	r0, [r6, #0]
 8002b42:	4621      	mov	r1, r4
 8002b44:	4628      	mov	r0, r5
 8002b46:	f000 fc9f 	bl	8003488 <_sbrk_r>
 8002b4a:	1c43      	adds	r3, r0, #1
 8002b4c:	d103      	bne.n	8002b56 <sbrk_aligned+0x26>
 8002b4e:	f04f 34ff 	mov.w	r4, #4294967295
 8002b52:	4620      	mov	r0, r4
 8002b54:	bd70      	pop	{r4, r5, r6, pc}
 8002b56:	1cc4      	adds	r4, r0, #3
 8002b58:	f024 0403 	bic.w	r4, r4, #3
 8002b5c:	42a0      	cmp	r0, r4
 8002b5e:	d0f8      	beq.n	8002b52 <sbrk_aligned+0x22>
 8002b60:	1a21      	subs	r1, r4, r0
 8002b62:	4628      	mov	r0, r5
 8002b64:	f000 fc90 	bl	8003488 <_sbrk_r>
 8002b68:	3001      	adds	r0, #1
 8002b6a:	d1f2      	bne.n	8002b52 <sbrk_aligned+0x22>
 8002b6c:	e7ef      	b.n	8002b4e <sbrk_aligned+0x1e>
 8002b6e:	bf00      	nop
 8002b70:	20000218 	.word	0x20000218

08002b74 <_malloc_r>:
 8002b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b78:	1ccd      	adds	r5, r1, #3
 8002b7a:	f025 0503 	bic.w	r5, r5, #3
 8002b7e:	3508      	adds	r5, #8
 8002b80:	2d0c      	cmp	r5, #12
 8002b82:	bf38      	it	cc
 8002b84:	250c      	movcc	r5, #12
 8002b86:	2d00      	cmp	r5, #0
 8002b88:	4606      	mov	r6, r0
 8002b8a:	db01      	blt.n	8002b90 <_malloc_r+0x1c>
 8002b8c:	42a9      	cmp	r1, r5
 8002b8e:	d904      	bls.n	8002b9a <_malloc_r+0x26>
 8002b90:	230c      	movs	r3, #12
 8002b92:	6033      	str	r3, [r6, #0]
 8002b94:	2000      	movs	r0, #0
 8002b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002c70 <_malloc_r+0xfc>
 8002b9e:	f000 f869 	bl	8002c74 <__malloc_lock>
 8002ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ba6:	461c      	mov	r4, r3
 8002ba8:	bb44      	cbnz	r4, 8002bfc <_malloc_r+0x88>
 8002baa:	4629      	mov	r1, r5
 8002bac:	4630      	mov	r0, r6
 8002bae:	f7ff ffbf 	bl	8002b30 <sbrk_aligned>
 8002bb2:	1c43      	adds	r3, r0, #1
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	d158      	bne.n	8002c6a <_malloc_r+0xf6>
 8002bb8:	f8d8 4000 	ldr.w	r4, [r8]
 8002bbc:	4627      	mov	r7, r4
 8002bbe:	2f00      	cmp	r7, #0
 8002bc0:	d143      	bne.n	8002c4a <_malloc_r+0xd6>
 8002bc2:	2c00      	cmp	r4, #0
 8002bc4:	d04b      	beq.n	8002c5e <_malloc_r+0xea>
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	4639      	mov	r1, r7
 8002bca:	4630      	mov	r0, r6
 8002bcc:	eb04 0903 	add.w	r9, r4, r3
 8002bd0:	f000 fc5a 	bl	8003488 <_sbrk_r>
 8002bd4:	4581      	cmp	r9, r0
 8002bd6:	d142      	bne.n	8002c5e <_malloc_r+0xea>
 8002bd8:	6821      	ldr	r1, [r4, #0]
 8002bda:	1a6d      	subs	r5, r5, r1
 8002bdc:	4629      	mov	r1, r5
 8002bde:	4630      	mov	r0, r6
 8002be0:	f7ff ffa6 	bl	8002b30 <sbrk_aligned>
 8002be4:	3001      	adds	r0, #1
 8002be6:	d03a      	beq.n	8002c5e <_malloc_r+0xea>
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	442b      	add	r3, r5
 8002bec:	6023      	str	r3, [r4, #0]
 8002bee:	f8d8 3000 	ldr.w	r3, [r8]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	bb62      	cbnz	r2, 8002c50 <_malloc_r+0xdc>
 8002bf6:	f8c8 7000 	str.w	r7, [r8]
 8002bfa:	e00f      	b.n	8002c1c <_malloc_r+0xa8>
 8002bfc:	6822      	ldr	r2, [r4, #0]
 8002bfe:	1b52      	subs	r2, r2, r5
 8002c00:	d420      	bmi.n	8002c44 <_malloc_r+0xd0>
 8002c02:	2a0b      	cmp	r2, #11
 8002c04:	d917      	bls.n	8002c36 <_malloc_r+0xc2>
 8002c06:	1961      	adds	r1, r4, r5
 8002c08:	42a3      	cmp	r3, r4
 8002c0a:	6025      	str	r5, [r4, #0]
 8002c0c:	bf18      	it	ne
 8002c0e:	6059      	strne	r1, [r3, #4]
 8002c10:	6863      	ldr	r3, [r4, #4]
 8002c12:	bf08      	it	eq
 8002c14:	f8c8 1000 	streq.w	r1, [r8]
 8002c18:	5162      	str	r2, [r4, r5]
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	f000 f82f 	bl	8002c80 <__malloc_unlock>
 8002c22:	f104 000b 	add.w	r0, r4, #11
 8002c26:	1d23      	adds	r3, r4, #4
 8002c28:	f020 0007 	bic.w	r0, r0, #7
 8002c2c:	1ac2      	subs	r2, r0, r3
 8002c2e:	bf1c      	itt	ne
 8002c30:	1a1b      	subne	r3, r3, r0
 8002c32:	50a3      	strne	r3, [r4, r2]
 8002c34:	e7af      	b.n	8002b96 <_malloc_r+0x22>
 8002c36:	6862      	ldr	r2, [r4, #4]
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	bf0c      	ite	eq
 8002c3c:	f8c8 2000 	streq.w	r2, [r8]
 8002c40:	605a      	strne	r2, [r3, #4]
 8002c42:	e7eb      	b.n	8002c1c <_malloc_r+0xa8>
 8002c44:	4623      	mov	r3, r4
 8002c46:	6864      	ldr	r4, [r4, #4]
 8002c48:	e7ae      	b.n	8002ba8 <_malloc_r+0x34>
 8002c4a:	463c      	mov	r4, r7
 8002c4c:	687f      	ldr	r7, [r7, #4]
 8002c4e:	e7b6      	b.n	8002bbe <_malloc_r+0x4a>
 8002c50:	461a      	mov	r2, r3
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	42a3      	cmp	r3, r4
 8002c56:	d1fb      	bne.n	8002c50 <_malloc_r+0xdc>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	6053      	str	r3, [r2, #4]
 8002c5c:	e7de      	b.n	8002c1c <_malloc_r+0xa8>
 8002c5e:	230c      	movs	r3, #12
 8002c60:	6033      	str	r3, [r6, #0]
 8002c62:	4630      	mov	r0, r6
 8002c64:	f000 f80c 	bl	8002c80 <__malloc_unlock>
 8002c68:	e794      	b.n	8002b94 <_malloc_r+0x20>
 8002c6a:	6005      	str	r5, [r0, #0]
 8002c6c:	e7d6      	b.n	8002c1c <_malloc_r+0xa8>
 8002c6e:	bf00      	nop
 8002c70:	2000021c 	.word	0x2000021c

08002c74 <__malloc_lock>:
 8002c74:	4801      	ldr	r0, [pc, #4]	@ (8002c7c <__malloc_lock+0x8>)
 8002c76:	f7ff bf0e 	b.w	8002a96 <__retarget_lock_acquire_recursive>
 8002c7a:	bf00      	nop
 8002c7c:	20000214 	.word	0x20000214

08002c80 <__malloc_unlock>:
 8002c80:	4801      	ldr	r0, [pc, #4]	@ (8002c88 <__malloc_unlock+0x8>)
 8002c82:	f7ff bf09 	b.w	8002a98 <__retarget_lock_release_recursive>
 8002c86:	bf00      	nop
 8002c88:	20000214 	.word	0x20000214

08002c8c <__sfputc_r>:
 8002c8c:	6893      	ldr	r3, [r2, #8]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	b410      	push	{r4}
 8002c94:	6093      	str	r3, [r2, #8]
 8002c96:	da08      	bge.n	8002caa <__sfputc_r+0x1e>
 8002c98:	6994      	ldr	r4, [r2, #24]
 8002c9a:	42a3      	cmp	r3, r4
 8002c9c:	db01      	blt.n	8002ca2 <__sfputc_r+0x16>
 8002c9e:	290a      	cmp	r1, #10
 8002ca0:	d103      	bne.n	8002caa <__sfputc_r+0x1e>
 8002ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ca6:	f7ff bde8 	b.w	800287a <__swbuf_r>
 8002caa:	6813      	ldr	r3, [r2, #0]
 8002cac:	1c58      	adds	r0, r3, #1
 8002cae:	6010      	str	r0, [r2, #0]
 8002cb0:	7019      	strb	r1, [r3, #0]
 8002cb2:	4608      	mov	r0, r1
 8002cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <__sfputs_r>:
 8002cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbc:	4606      	mov	r6, r0
 8002cbe:	460f      	mov	r7, r1
 8002cc0:	4614      	mov	r4, r2
 8002cc2:	18d5      	adds	r5, r2, r3
 8002cc4:	42ac      	cmp	r4, r5
 8002cc6:	d101      	bne.n	8002ccc <__sfputs_r+0x12>
 8002cc8:	2000      	movs	r0, #0
 8002cca:	e007      	b.n	8002cdc <__sfputs_r+0x22>
 8002ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cd0:	463a      	mov	r2, r7
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	f7ff ffda 	bl	8002c8c <__sfputc_r>
 8002cd8:	1c43      	adds	r3, r0, #1
 8002cda:	d1f3      	bne.n	8002cc4 <__sfputs_r+0xa>
 8002cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ce0 <_vfiprintf_r>:
 8002ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce4:	460d      	mov	r5, r1
 8002ce6:	b09d      	sub	sp, #116	@ 0x74
 8002ce8:	4614      	mov	r4, r2
 8002cea:	4698      	mov	r8, r3
 8002cec:	4606      	mov	r6, r0
 8002cee:	b118      	cbz	r0, 8002cf8 <_vfiprintf_r+0x18>
 8002cf0:	6a03      	ldr	r3, [r0, #32]
 8002cf2:	b90b      	cbnz	r3, 8002cf8 <_vfiprintf_r+0x18>
 8002cf4:	f7ff fcd8 	bl	80026a8 <__sinit>
 8002cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002cfa:	07d9      	lsls	r1, r3, #31
 8002cfc:	d405      	bmi.n	8002d0a <_vfiprintf_r+0x2a>
 8002cfe:	89ab      	ldrh	r3, [r5, #12]
 8002d00:	059a      	lsls	r2, r3, #22
 8002d02:	d402      	bmi.n	8002d0a <_vfiprintf_r+0x2a>
 8002d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d06:	f7ff fec6 	bl	8002a96 <__retarget_lock_acquire_recursive>
 8002d0a:	89ab      	ldrh	r3, [r5, #12]
 8002d0c:	071b      	lsls	r3, r3, #28
 8002d0e:	d501      	bpl.n	8002d14 <_vfiprintf_r+0x34>
 8002d10:	692b      	ldr	r3, [r5, #16]
 8002d12:	b99b      	cbnz	r3, 8002d3c <_vfiprintf_r+0x5c>
 8002d14:	4629      	mov	r1, r5
 8002d16:	4630      	mov	r0, r6
 8002d18:	f7ff fdee 	bl	80028f8 <__swsetup_r>
 8002d1c:	b170      	cbz	r0, 8002d3c <_vfiprintf_r+0x5c>
 8002d1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d20:	07dc      	lsls	r4, r3, #31
 8002d22:	d504      	bpl.n	8002d2e <_vfiprintf_r+0x4e>
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	b01d      	add	sp, #116	@ 0x74
 8002d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d2e:	89ab      	ldrh	r3, [r5, #12]
 8002d30:	0598      	lsls	r0, r3, #22
 8002d32:	d4f7      	bmi.n	8002d24 <_vfiprintf_r+0x44>
 8002d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d36:	f7ff feaf 	bl	8002a98 <__retarget_lock_release_recursive>
 8002d3a:	e7f3      	b.n	8002d24 <_vfiprintf_r+0x44>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d40:	2320      	movs	r3, #32
 8002d42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d4a:	2330      	movs	r3, #48	@ 0x30
 8002d4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002efc <_vfiprintf_r+0x21c>
 8002d50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d54:	f04f 0901 	mov.w	r9, #1
 8002d58:	4623      	mov	r3, r4
 8002d5a:	469a      	mov	sl, r3
 8002d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d60:	b10a      	cbz	r2, 8002d66 <_vfiprintf_r+0x86>
 8002d62:	2a25      	cmp	r2, #37	@ 0x25
 8002d64:	d1f9      	bne.n	8002d5a <_vfiprintf_r+0x7a>
 8002d66:	ebba 0b04 	subs.w	fp, sl, r4
 8002d6a:	d00b      	beq.n	8002d84 <_vfiprintf_r+0xa4>
 8002d6c:	465b      	mov	r3, fp
 8002d6e:	4622      	mov	r2, r4
 8002d70:	4629      	mov	r1, r5
 8002d72:	4630      	mov	r0, r6
 8002d74:	f7ff ffa1 	bl	8002cba <__sfputs_r>
 8002d78:	3001      	adds	r0, #1
 8002d7a:	f000 80a7 	beq.w	8002ecc <_vfiprintf_r+0x1ec>
 8002d7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d80:	445a      	add	r2, fp
 8002d82:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d84:	f89a 3000 	ldrb.w	r3, [sl]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 809f 	beq.w	8002ecc <_vfiprintf_r+0x1ec>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d98:	f10a 0a01 	add.w	sl, sl, #1
 8002d9c:	9304      	str	r3, [sp, #16]
 8002d9e:	9307      	str	r3, [sp, #28]
 8002da0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002da4:	931a      	str	r3, [sp, #104]	@ 0x68
 8002da6:	4654      	mov	r4, sl
 8002da8:	2205      	movs	r2, #5
 8002daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dae:	4853      	ldr	r0, [pc, #332]	@ (8002efc <_vfiprintf_r+0x21c>)
 8002db0:	f7fd fa2e 	bl	8000210 <memchr>
 8002db4:	9a04      	ldr	r2, [sp, #16]
 8002db6:	b9d8      	cbnz	r0, 8002df0 <_vfiprintf_r+0x110>
 8002db8:	06d1      	lsls	r1, r2, #27
 8002dba:	bf44      	itt	mi
 8002dbc:	2320      	movmi	r3, #32
 8002dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002dc2:	0713      	lsls	r3, r2, #28
 8002dc4:	bf44      	itt	mi
 8002dc6:	232b      	movmi	r3, #43	@ 0x2b
 8002dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dd2:	d015      	beq.n	8002e00 <_vfiprintf_r+0x120>
 8002dd4:	9a07      	ldr	r2, [sp, #28]
 8002dd6:	4654      	mov	r4, sl
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f04f 0c0a 	mov.w	ip, #10
 8002dde:	4621      	mov	r1, r4
 8002de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002de4:	3b30      	subs	r3, #48	@ 0x30
 8002de6:	2b09      	cmp	r3, #9
 8002de8:	d94b      	bls.n	8002e82 <_vfiprintf_r+0x1a2>
 8002dea:	b1b0      	cbz	r0, 8002e1a <_vfiprintf_r+0x13a>
 8002dec:	9207      	str	r2, [sp, #28]
 8002dee:	e014      	b.n	8002e1a <_vfiprintf_r+0x13a>
 8002df0:	eba0 0308 	sub.w	r3, r0, r8
 8002df4:	fa09 f303 	lsl.w	r3, r9, r3
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	9304      	str	r3, [sp, #16]
 8002dfc:	46a2      	mov	sl, r4
 8002dfe:	e7d2      	b.n	8002da6 <_vfiprintf_r+0xc6>
 8002e00:	9b03      	ldr	r3, [sp, #12]
 8002e02:	1d19      	adds	r1, r3, #4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	9103      	str	r1, [sp, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bfbb      	ittet	lt
 8002e0c:	425b      	neglt	r3, r3
 8002e0e:	f042 0202 	orrlt.w	r2, r2, #2
 8002e12:	9307      	strge	r3, [sp, #28]
 8002e14:	9307      	strlt	r3, [sp, #28]
 8002e16:	bfb8      	it	lt
 8002e18:	9204      	strlt	r2, [sp, #16]
 8002e1a:	7823      	ldrb	r3, [r4, #0]
 8002e1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e1e:	d10a      	bne.n	8002e36 <_vfiprintf_r+0x156>
 8002e20:	7863      	ldrb	r3, [r4, #1]
 8002e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e24:	d132      	bne.n	8002e8c <_vfiprintf_r+0x1ac>
 8002e26:	9b03      	ldr	r3, [sp, #12]
 8002e28:	1d1a      	adds	r2, r3, #4
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	9203      	str	r2, [sp, #12]
 8002e2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e32:	3402      	adds	r4, #2
 8002e34:	9305      	str	r3, [sp, #20]
 8002e36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002f0c <_vfiprintf_r+0x22c>
 8002e3a:	7821      	ldrb	r1, [r4, #0]
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	4650      	mov	r0, sl
 8002e40:	f7fd f9e6 	bl	8000210 <memchr>
 8002e44:	b138      	cbz	r0, 8002e56 <_vfiprintf_r+0x176>
 8002e46:	9b04      	ldr	r3, [sp, #16]
 8002e48:	eba0 000a 	sub.w	r0, r0, sl
 8002e4c:	2240      	movs	r2, #64	@ 0x40
 8002e4e:	4082      	lsls	r2, r0
 8002e50:	4313      	orrs	r3, r2
 8002e52:	3401      	adds	r4, #1
 8002e54:	9304      	str	r3, [sp, #16]
 8002e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e5a:	4829      	ldr	r0, [pc, #164]	@ (8002f00 <_vfiprintf_r+0x220>)
 8002e5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e60:	2206      	movs	r2, #6
 8002e62:	f7fd f9d5 	bl	8000210 <memchr>
 8002e66:	2800      	cmp	r0, #0
 8002e68:	d03f      	beq.n	8002eea <_vfiprintf_r+0x20a>
 8002e6a:	4b26      	ldr	r3, [pc, #152]	@ (8002f04 <_vfiprintf_r+0x224>)
 8002e6c:	bb1b      	cbnz	r3, 8002eb6 <_vfiprintf_r+0x1d6>
 8002e6e:	9b03      	ldr	r3, [sp, #12]
 8002e70:	3307      	adds	r3, #7
 8002e72:	f023 0307 	bic.w	r3, r3, #7
 8002e76:	3308      	adds	r3, #8
 8002e78:	9303      	str	r3, [sp, #12]
 8002e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e7c:	443b      	add	r3, r7
 8002e7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e80:	e76a      	b.n	8002d58 <_vfiprintf_r+0x78>
 8002e82:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e86:	460c      	mov	r4, r1
 8002e88:	2001      	movs	r0, #1
 8002e8a:	e7a8      	b.n	8002dde <_vfiprintf_r+0xfe>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	3401      	adds	r4, #1
 8002e90:	9305      	str	r3, [sp, #20]
 8002e92:	4619      	mov	r1, r3
 8002e94:	f04f 0c0a 	mov.w	ip, #10
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e9e:	3a30      	subs	r2, #48	@ 0x30
 8002ea0:	2a09      	cmp	r2, #9
 8002ea2:	d903      	bls.n	8002eac <_vfiprintf_r+0x1cc>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0c6      	beq.n	8002e36 <_vfiprintf_r+0x156>
 8002ea8:	9105      	str	r1, [sp, #20]
 8002eaa:	e7c4      	b.n	8002e36 <_vfiprintf_r+0x156>
 8002eac:	fb0c 2101 	mla	r1, ip, r1, r2
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e7f0      	b.n	8002e98 <_vfiprintf_r+0x1b8>
 8002eb6:	ab03      	add	r3, sp, #12
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	462a      	mov	r2, r5
 8002ebc:	4b12      	ldr	r3, [pc, #72]	@ (8002f08 <_vfiprintf_r+0x228>)
 8002ebe:	a904      	add	r1, sp, #16
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	f3af 8000 	nop.w
 8002ec6:	4607      	mov	r7, r0
 8002ec8:	1c78      	adds	r0, r7, #1
 8002eca:	d1d6      	bne.n	8002e7a <_vfiprintf_r+0x19a>
 8002ecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ece:	07d9      	lsls	r1, r3, #31
 8002ed0:	d405      	bmi.n	8002ede <_vfiprintf_r+0x1fe>
 8002ed2:	89ab      	ldrh	r3, [r5, #12]
 8002ed4:	059a      	lsls	r2, r3, #22
 8002ed6:	d402      	bmi.n	8002ede <_vfiprintf_r+0x1fe>
 8002ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002eda:	f7ff fddd 	bl	8002a98 <__retarget_lock_release_recursive>
 8002ede:	89ab      	ldrh	r3, [r5, #12]
 8002ee0:	065b      	lsls	r3, r3, #25
 8002ee2:	f53f af1f 	bmi.w	8002d24 <_vfiprintf_r+0x44>
 8002ee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ee8:	e71e      	b.n	8002d28 <_vfiprintf_r+0x48>
 8002eea:	ab03      	add	r3, sp, #12
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	462a      	mov	r2, r5
 8002ef0:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <_vfiprintf_r+0x228>)
 8002ef2:	a904      	add	r1, sp, #16
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f000 f879 	bl	8002fec <_printf_i>
 8002efa:	e7e4      	b.n	8002ec6 <_vfiprintf_r+0x1e6>
 8002efc:	0800350c 	.word	0x0800350c
 8002f00:	08003516 	.word	0x08003516
 8002f04:	00000000 	.word	0x00000000
 8002f08:	08002cbb 	.word	0x08002cbb
 8002f0c:	08003512 	.word	0x08003512

08002f10 <_printf_common>:
 8002f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f14:	4616      	mov	r6, r2
 8002f16:	4698      	mov	r8, r3
 8002f18:	688a      	ldr	r2, [r1, #8]
 8002f1a:	690b      	ldr	r3, [r1, #16]
 8002f1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f20:	4293      	cmp	r3, r2
 8002f22:	bfb8      	it	lt
 8002f24:	4613      	movlt	r3, r2
 8002f26:	6033      	str	r3, [r6, #0]
 8002f28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f2c:	4607      	mov	r7, r0
 8002f2e:	460c      	mov	r4, r1
 8002f30:	b10a      	cbz	r2, 8002f36 <_printf_common+0x26>
 8002f32:	3301      	adds	r3, #1
 8002f34:	6033      	str	r3, [r6, #0]
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	0699      	lsls	r1, r3, #26
 8002f3a:	bf42      	ittt	mi
 8002f3c:	6833      	ldrmi	r3, [r6, #0]
 8002f3e:	3302      	addmi	r3, #2
 8002f40:	6033      	strmi	r3, [r6, #0]
 8002f42:	6825      	ldr	r5, [r4, #0]
 8002f44:	f015 0506 	ands.w	r5, r5, #6
 8002f48:	d106      	bne.n	8002f58 <_printf_common+0x48>
 8002f4a:	f104 0a19 	add.w	sl, r4, #25
 8002f4e:	68e3      	ldr	r3, [r4, #12]
 8002f50:	6832      	ldr	r2, [r6, #0]
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	42ab      	cmp	r3, r5
 8002f56:	dc26      	bgt.n	8002fa6 <_printf_common+0x96>
 8002f58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	3b00      	subs	r3, #0
 8002f60:	bf18      	it	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	0692      	lsls	r2, r2, #26
 8002f66:	d42b      	bmi.n	8002fc0 <_printf_common+0xb0>
 8002f68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	4638      	mov	r0, r7
 8002f70:	47c8      	blx	r9
 8002f72:	3001      	adds	r0, #1
 8002f74:	d01e      	beq.n	8002fb4 <_printf_common+0xa4>
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	6922      	ldr	r2, [r4, #16]
 8002f7a:	f003 0306 	and.w	r3, r3, #6
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	bf02      	ittt	eq
 8002f82:	68e5      	ldreq	r5, [r4, #12]
 8002f84:	6833      	ldreq	r3, [r6, #0]
 8002f86:	1aed      	subeq	r5, r5, r3
 8002f88:	68a3      	ldr	r3, [r4, #8]
 8002f8a:	bf0c      	ite	eq
 8002f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f90:	2500      	movne	r5, #0
 8002f92:	4293      	cmp	r3, r2
 8002f94:	bfc4      	itt	gt
 8002f96:	1a9b      	subgt	r3, r3, r2
 8002f98:	18ed      	addgt	r5, r5, r3
 8002f9a:	2600      	movs	r6, #0
 8002f9c:	341a      	adds	r4, #26
 8002f9e:	42b5      	cmp	r5, r6
 8002fa0:	d11a      	bne.n	8002fd8 <_printf_common+0xc8>
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e008      	b.n	8002fb8 <_printf_common+0xa8>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	4652      	mov	r2, sl
 8002faa:	4641      	mov	r1, r8
 8002fac:	4638      	mov	r0, r7
 8002fae:	47c8      	blx	r9
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	d103      	bne.n	8002fbc <_printf_common+0xac>
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fbc:	3501      	adds	r5, #1
 8002fbe:	e7c6      	b.n	8002f4e <_printf_common+0x3e>
 8002fc0:	18e1      	adds	r1, r4, r3
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	2030      	movs	r0, #48	@ 0x30
 8002fc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002fca:	4422      	add	r2, r4
 8002fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002fd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	e7c7      	b.n	8002f68 <_printf_common+0x58>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	4622      	mov	r2, r4
 8002fdc:	4641      	mov	r1, r8
 8002fde:	4638      	mov	r0, r7
 8002fe0:	47c8      	blx	r9
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	d0e6      	beq.n	8002fb4 <_printf_common+0xa4>
 8002fe6:	3601      	adds	r6, #1
 8002fe8:	e7d9      	b.n	8002f9e <_printf_common+0x8e>
	...

08002fec <_printf_i>:
 8002fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff0:	7e0f      	ldrb	r7, [r1, #24]
 8002ff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ff4:	2f78      	cmp	r7, #120	@ 0x78
 8002ff6:	4691      	mov	r9, r2
 8002ff8:	4680      	mov	r8, r0
 8002ffa:	460c      	mov	r4, r1
 8002ffc:	469a      	mov	sl, r3
 8002ffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003002:	d807      	bhi.n	8003014 <_printf_i+0x28>
 8003004:	2f62      	cmp	r7, #98	@ 0x62
 8003006:	d80a      	bhi.n	800301e <_printf_i+0x32>
 8003008:	2f00      	cmp	r7, #0
 800300a:	f000 80d1 	beq.w	80031b0 <_printf_i+0x1c4>
 800300e:	2f58      	cmp	r7, #88	@ 0x58
 8003010:	f000 80b8 	beq.w	8003184 <_printf_i+0x198>
 8003014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800301c:	e03a      	b.n	8003094 <_printf_i+0xa8>
 800301e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003022:	2b15      	cmp	r3, #21
 8003024:	d8f6      	bhi.n	8003014 <_printf_i+0x28>
 8003026:	a101      	add	r1, pc, #4	@ (adr r1, 800302c <_printf_i+0x40>)
 8003028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800302c:	08003085 	.word	0x08003085
 8003030:	08003099 	.word	0x08003099
 8003034:	08003015 	.word	0x08003015
 8003038:	08003015 	.word	0x08003015
 800303c:	08003015 	.word	0x08003015
 8003040:	08003015 	.word	0x08003015
 8003044:	08003099 	.word	0x08003099
 8003048:	08003015 	.word	0x08003015
 800304c:	08003015 	.word	0x08003015
 8003050:	08003015 	.word	0x08003015
 8003054:	08003015 	.word	0x08003015
 8003058:	08003197 	.word	0x08003197
 800305c:	080030c3 	.word	0x080030c3
 8003060:	08003151 	.word	0x08003151
 8003064:	08003015 	.word	0x08003015
 8003068:	08003015 	.word	0x08003015
 800306c:	080031b9 	.word	0x080031b9
 8003070:	08003015 	.word	0x08003015
 8003074:	080030c3 	.word	0x080030c3
 8003078:	08003015 	.word	0x08003015
 800307c:	08003015 	.word	0x08003015
 8003080:	08003159 	.word	0x08003159
 8003084:	6833      	ldr	r3, [r6, #0]
 8003086:	1d1a      	adds	r2, r3, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6032      	str	r2, [r6, #0]
 800308c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003094:	2301      	movs	r3, #1
 8003096:	e09c      	b.n	80031d2 <_printf_i+0x1e6>
 8003098:	6833      	ldr	r3, [r6, #0]
 800309a:	6820      	ldr	r0, [r4, #0]
 800309c:	1d19      	adds	r1, r3, #4
 800309e:	6031      	str	r1, [r6, #0]
 80030a0:	0606      	lsls	r6, r0, #24
 80030a2:	d501      	bpl.n	80030a8 <_printf_i+0xbc>
 80030a4:	681d      	ldr	r5, [r3, #0]
 80030a6:	e003      	b.n	80030b0 <_printf_i+0xc4>
 80030a8:	0645      	lsls	r5, r0, #25
 80030aa:	d5fb      	bpl.n	80030a4 <_printf_i+0xb8>
 80030ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80030b0:	2d00      	cmp	r5, #0
 80030b2:	da03      	bge.n	80030bc <_printf_i+0xd0>
 80030b4:	232d      	movs	r3, #45	@ 0x2d
 80030b6:	426d      	negs	r5, r5
 80030b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030bc:	4858      	ldr	r0, [pc, #352]	@ (8003220 <_printf_i+0x234>)
 80030be:	230a      	movs	r3, #10
 80030c0:	e011      	b.n	80030e6 <_printf_i+0xfa>
 80030c2:	6821      	ldr	r1, [r4, #0]
 80030c4:	6833      	ldr	r3, [r6, #0]
 80030c6:	0608      	lsls	r0, r1, #24
 80030c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80030cc:	d402      	bmi.n	80030d4 <_printf_i+0xe8>
 80030ce:	0649      	lsls	r1, r1, #25
 80030d0:	bf48      	it	mi
 80030d2:	b2ad      	uxthmi	r5, r5
 80030d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80030d6:	4852      	ldr	r0, [pc, #328]	@ (8003220 <_printf_i+0x234>)
 80030d8:	6033      	str	r3, [r6, #0]
 80030da:	bf14      	ite	ne
 80030dc:	230a      	movne	r3, #10
 80030de:	2308      	moveq	r3, #8
 80030e0:	2100      	movs	r1, #0
 80030e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80030e6:	6866      	ldr	r6, [r4, #4]
 80030e8:	60a6      	str	r6, [r4, #8]
 80030ea:	2e00      	cmp	r6, #0
 80030ec:	db05      	blt.n	80030fa <_printf_i+0x10e>
 80030ee:	6821      	ldr	r1, [r4, #0]
 80030f0:	432e      	orrs	r6, r5
 80030f2:	f021 0104 	bic.w	r1, r1, #4
 80030f6:	6021      	str	r1, [r4, #0]
 80030f8:	d04b      	beq.n	8003192 <_printf_i+0x1a6>
 80030fa:	4616      	mov	r6, r2
 80030fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003100:	fb03 5711 	mls	r7, r3, r1, r5
 8003104:	5dc7      	ldrb	r7, [r0, r7]
 8003106:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800310a:	462f      	mov	r7, r5
 800310c:	42bb      	cmp	r3, r7
 800310e:	460d      	mov	r5, r1
 8003110:	d9f4      	bls.n	80030fc <_printf_i+0x110>
 8003112:	2b08      	cmp	r3, #8
 8003114:	d10b      	bne.n	800312e <_printf_i+0x142>
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	07df      	lsls	r7, r3, #31
 800311a:	d508      	bpl.n	800312e <_printf_i+0x142>
 800311c:	6923      	ldr	r3, [r4, #16]
 800311e:	6861      	ldr	r1, [r4, #4]
 8003120:	4299      	cmp	r1, r3
 8003122:	bfde      	ittt	le
 8003124:	2330      	movle	r3, #48	@ 0x30
 8003126:	f806 3c01 	strble.w	r3, [r6, #-1]
 800312a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800312e:	1b92      	subs	r2, r2, r6
 8003130:	6122      	str	r2, [r4, #16]
 8003132:	f8cd a000 	str.w	sl, [sp]
 8003136:	464b      	mov	r3, r9
 8003138:	aa03      	add	r2, sp, #12
 800313a:	4621      	mov	r1, r4
 800313c:	4640      	mov	r0, r8
 800313e:	f7ff fee7 	bl	8002f10 <_printf_common>
 8003142:	3001      	adds	r0, #1
 8003144:	d14a      	bne.n	80031dc <_printf_i+0x1f0>
 8003146:	f04f 30ff 	mov.w	r0, #4294967295
 800314a:	b004      	add	sp, #16
 800314c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	f043 0320 	orr.w	r3, r3, #32
 8003156:	6023      	str	r3, [r4, #0]
 8003158:	4832      	ldr	r0, [pc, #200]	@ (8003224 <_printf_i+0x238>)
 800315a:	2778      	movs	r7, #120	@ 0x78
 800315c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	6831      	ldr	r1, [r6, #0]
 8003164:	061f      	lsls	r7, r3, #24
 8003166:	f851 5b04 	ldr.w	r5, [r1], #4
 800316a:	d402      	bmi.n	8003172 <_printf_i+0x186>
 800316c:	065f      	lsls	r7, r3, #25
 800316e:	bf48      	it	mi
 8003170:	b2ad      	uxthmi	r5, r5
 8003172:	6031      	str	r1, [r6, #0]
 8003174:	07d9      	lsls	r1, r3, #31
 8003176:	bf44      	itt	mi
 8003178:	f043 0320 	orrmi.w	r3, r3, #32
 800317c:	6023      	strmi	r3, [r4, #0]
 800317e:	b11d      	cbz	r5, 8003188 <_printf_i+0x19c>
 8003180:	2310      	movs	r3, #16
 8003182:	e7ad      	b.n	80030e0 <_printf_i+0xf4>
 8003184:	4826      	ldr	r0, [pc, #152]	@ (8003220 <_printf_i+0x234>)
 8003186:	e7e9      	b.n	800315c <_printf_i+0x170>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	f023 0320 	bic.w	r3, r3, #32
 800318e:	6023      	str	r3, [r4, #0]
 8003190:	e7f6      	b.n	8003180 <_printf_i+0x194>
 8003192:	4616      	mov	r6, r2
 8003194:	e7bd      	b.n	8003112 <_printf_i+0x126>
 8003196:	6833      	ldr	r3, [r6, #0]
 8003198:	6825      	ldr	r5, [r4, #0]
 800319a:	6961      	ldr	r1, [r4, #20]
 800319c:	1d18      	adds	r0, r3, #4
 800319e:	6030      	str	r0, [r6, #0]
 80031a0:	062e      	lsls	r6, r5, #24
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	d501      	bpl.n	80031aa <_printf_i+0x1be>
 80031a6:	6019      	str	r1, [r3, #0]
 80031a8:	e002      	b.n	80031b0 <_printf_i+0x1c4>
 80031aa:	0668      	lsls	r0, r5, #25
 80031ac:	d5fb      	bpl.n	80031a6 <_printf_i+0x1ba>
 80031ae:	8019      	strh	r1, [r3, #0]
 80031b0:	2300      	movs	r3, #0
 80031b2:	6123      	str	r3, [r4, #16]
 80031b4:	4616      	mov	r6, r2
 80031b6:	e7bc      	b.n	8003132 <_printf_i+0x146>
 80031b8:	6833      	ldr	r3, [r6, #0]
 80031ba:	1d1a      	adds	r2, r3, #4
 80031bc:	6032      	str	r2, [r6, #0]
 80031be:	681e      	ldr	r6, [r3, #0]
 80031c0:	6862      	ldr	r2, [r4, #4]
 80031c2:	2100      	movs	r1, #0
 80031c4:	4630      	mov	r0, r6
 80031c6:	f7fd f823 	bl	8000210 <memchr>
 80031ca:	b108      	cbz	r0, 80031d0 <_printf_i+0x1e4>
 80031cc:	1b80      	subs	r0, r0, r6
 80031ce:	6060      	str	r0, [r4, #4]
 80031d0:	6863      	ldr	r3, [r4, #4]
 80031d2:	6123      	str	r3, [r4, #16]
 80031d4:	2300      	movs	r3, #0
 80031d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031da:	e7aa      	b.n	8003132 <_printf_i+0x146>
 80031dc:	6923      	ldr	r3, [r4, #16]
 80031de:	4632      	mov	r2, r6
 80031e0:	4649      	mov	r1, r9
 80031e2:	4640      	mov	r0, r8
 80031e4:	47d0      	blx	sl
 80031e6:	3001      	adds	r0, #1
 80031e8:	d0ad      	beq.n	8003146 <_printf_i+0x15a>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	079b      	lsls	r3, r3, #30
 80031ee:	d413      	bmi.n	8003218 <_printf_i+0x22c>
 80031f0:	68e0      	ldr	r0, [r4, #12]
 80031f2:	9b03      	ldr	r3, [sp, #12]
 80031f4:	4298      	cmp	r0, r3
 80031f6:	bfb8      	it	lt
 80031f8:	4618      	movlt	r0, r3
 80031fa:	e7a6      	b.n	800314a <_printf_i+0x15e>
 80031fc:	2301      	movs	r3, #1
 80031fe:	4632      	mov	r2, r6
 8003200:	4649      	mov	r1, r9
 8003202:	4640      	mov	r0, r8
 8003204:	47d0      	blx	sl
 8003206:	3001      	adds	r0, #1
 8003208:	d09d      	beq.n	8003146 <_printf_i+0x15a>
 800320a:	3501      	adds	r5, #1
 800320c:	68e3      	ldr	r3, [r4, #12]
 800320e:	9903      	ldr	r1, [sp, #12]
 8003210:	1a5b      	subs	r3, r3, r1
 8003212:	42ab      	cmp	r3, r5
 8003214:	dcf2      	bgt.n	80031fc <_printf_i+0x210>
 8003216:	e7eb      	b.n	80031f0 <_printf_i+0x204>
 8003218:	2500      	movs	r5, #0
 800321a:	f104 0619 	add.w	r6, r4, #25
 800321e:	e7f5      	b.n	800320c <_printf_i+0x220>
 8003220:	0800351d 	.word	0x0800351d
 8003224:	0800352e 	.word	0x0800352e

08003228 <__sflush_r>:
 8003228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800322c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003230:	0716      	lsls	r6, r2, #28
 8003232:	4605      	mov	r5, r0
 8003234:	460c      	mov	r4, r1
 8003236:	d454      	bmi.n	80032e2 <__sflush_r+0xba>
 8003238:	684b      	ldr	r3, [r1, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	dc02      	bgt.n	8003244 <__sflush_r+0x1c>
 800323e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	dd48      	ble.n	80032d6 <__sflush_r+0xae>
 8003244:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003246:	2e00      	cmp	r6, #0
 8003248:	d045      	beq.n	80032d6 <__sflush_r+0xae>
 800324a:	2300      	movs	r3, #0
 800324c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003250:	682f      	ldr	r7, [r5, #0]
 8003252:	6a21      	ldr	r1, [r4, #32]
 8003254:	602b      	str	r3, [r5, #0]
 8003256:	d030      	beq.n	80032ba <__sflush_r+0x92>
 8003258:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800325a:	89a3      	ldrh	r3, [r4, #12]
 800325c:	0759      	lsls	r1, r3, #29
 800325e:	d505      	bpl.n	800326c <__sflush_r+0x44>
 8003260:	6863      	ldr	r3, [r4, #4]
 8003262:	1ad2      	subs	r2, r2, r3
 8003264:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003266:	b10b      	cbz	r3, 800326c <__sflush_r+0x44>
 8003268:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800326a:	1ad2      	subs	r2, r2, r3
 800326c:	2300      	movs	r3, #0
 800326e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003270:	6a21      	ldr	r1, [r4, #32]
 8003272:	4628      	mov	r0, r5
 8003274:	47b0      	blx	r6
 8003276:	1c43      	adds	r3, r0, #1
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	d106      	bne.n	800328a <__sflush_r+0x62>
 800327c:	6829      	ldr	r1, [r5, #0]
 800327e:	291d      	cmp	r1, #29
 8003280:	d82b      	bhi.n	80032da <__sflush_r+0xb2>
 8003282:	4a2a      	ldr	r2, [pc, #168]	@ (800332c <__sflush_r+0x104>)
 8003284:	40ca      	lsrs	r2, r1
 8003286:	07d6      	lsls	r6, r2, #31
 8003288:	d527      	bpl.n	80032da <__sflush_r+0xb2>
 800328a:	2200      	movs	r2, #0
 800328c:	6062      	str	r2, [r4, #4]
 800328e:	04d9      	lsls	r1, r3, #19
 8003290:	6922      	ldr	r2, [r4, #16]
 8003292:	6022      	str	r2, [r4, #0]
 8003294:	d504      	bpl.n	80032a0 <__sflush_r+0x78>
 8003296:	1c42      	adds	r2, r0, #1
 8003298:	d101      	bne.n	800329e <__sflush_r+0x76>
 800329a:	682b      	ldr	r3, [r5, #0]
 800329c:	b903      	cbnz	r3, 80032a0 <__sflush_r+0x78>
 800329e:	6560      	str	r0, [r4, #84]	@ 0x54
 80032a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032a2:	602f      	str	r7, [r5, #0]
 80032a4:	b1b9      	cbz	r1, 80032d6 <__sflush_r+0xae>
 80032a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032aa:	4299      	cmp	r1, r3
 80032ac:	d002      	beq.n	80032b4 <__sflush_r+0x8c>
 80032ae:	4628      	mov	r0, r5
 80032b0:	f7ff fbf4 	bl	8002a9c <_free_r>
 80032b4:	2300      	movs	r3, #0
 80032b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80032b8:	e00d      	b.n	80032d6 <__sflush_r+0xae>
 80032ba:	2301      	movs	r3, #1
 80032bc:	4628      	mov	r0, r5
 80032be:	47b0      	blx	r6
 80032c0:	4602      	mov	r2, r0
 80032c2:	1c50      	adds	r0, r2, #1
 80032c4:	d1c9      	bne.n	800325a <__sflush_r+0x32>
 80032c6:	682b      	ldr	r3, [r5, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0c6      	beq.n	800325a <__sflush_r+0x32>
 80032cc:	2b1d      	cmp	r3, #29
 80032ce:	d001      	beq.n	80032d4 <__sflush_r+0xac>
 80032d0:	2b16      	cmp	r3, #22
 80032d2:	d11e      	bne.n	8003312 <__sflush_r+0xea>
 80032d4:	602f      	str	r7, [r5, #0]
 80032d6:	2000      	movs	r0, #0
 80032d8:	e022      	b.n	8003320 <__sflush_r+0xf8>
 80032da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032de:	b21b      	sxth	r3, r3
 80032e0:	e01b      	b.n	800331a <__sflush_r+0xf2>
 80032e2:	690f      	ldr	r7, [r1, #16]
 80032e4:	2f00      	cmp	r7, #0
 80032e6:	d0f6      	beq.n	80032d6 <__sflush_r+0xae>
 80032e8:	0793      	lsls	r3, r2, #30
 80032ea:	680e      	ldr	r6, [r1, #0]
 80032ec:	bf08      	it	eq
 80032ee:	694b      	ldreq	r3, [r1, #20]
 80032f0:	600f      	str	r7, [r1, #0]
 80032f2:	bf18      	it	ne
 80032f4:	2300      	movne	r3, #0
 80032f6:	eba6 0807 	sub.w	r8, r6, r7
 80032fa:	608b      	str	r3, [r1, #8]
 80032fc:	f1b8 0f00 	cmp.w	r8, #0
 8003300:	dde9      	ble.n	80032d6 <__sflush_r+0xae>
 8003302:	6a21      	ldr	r1, [r4, #32]
 8003304:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003306:	4643      	mov	r3, r8
 8003308:	463a      	mov	r2, r7
 800330a:	4628      	mov	r0, r5
 800330c:	47b0      	blx	r6
 800330e:	2800      	cmp	r0, #0
 8003310:	dc08      	bgt.n	8003324 <__sflush_r+0xfc>
 8003312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800331a:	81a3      	strh	r3, [r4, #12]
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003324:	4407      	add	r7, r0
 8003326:	eba8 0800 	sub.w	r8, r8, r0
 800332a:	e7e7      	b.n	80032fc <__sflush_r+0xd4>
 800332c:	20400001 	.word	0x20400001

08003330 <_fflush_r>:
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	690b      	ldr	r3, [r1, #16]
 8003334:	4605      	mov	r5, r0
 8003336:	460c      	mov	r4, r1
 8003338:	b913      	cbnz	r3, 8003340 <_fflush_r+0x10>
 800333a:	2500      	movs	r5, #0
 800333c:	4628      	mov	r0, r5
 800333e:	bd38      	pop	{r3, r4, r5, pc}
 8003340:	b118      	cbz	r0, 800334a <_fflush_r+0x1a>
 8003342:	6a03      	ldr	r3, [r0, #32]
 8003344:	b90b      	cbnz	r3, 800334a <_fflush_r+0x1a>
 8003346:	f7ff f9af 	bl	80026a8 <__sinit>
 800334a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f3      	beq.n	800333a <_fflush_r+0xa>
 8003352:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003354:	07d0      	lsls	r0, r2, #31
 8003356:	d404      	bmi.n	8003362 <_fflush_r+0x32>
 8003358:	0599      	lsls	r1, r3, #22
 800335a:	d402      	bmi.n	8003362 <_fflush_r+0x32>
 800335c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800335e:	f7ff fb9a 	bl	8002a96 <__retarget_lock_acquire_recursive>
 8003362:	4628      	mov	r0, r5
 8003364:	4621      	mov	r1, r4
 8003366:	f7ff ff5f 	bl	8003228 <__sflush_r>
 800336a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800336c:	07da      	lsls	r2, r3, #31
 800336e:	4605      	mov	r5, r0
 8003370:	d4e4      	bmi.n	800333c <_fflush_r+0xc>
 8003372:	89a3      	ldrh	r3, [r4, #12]
 8003374:	059b      	lsls	r3, r3, #22
 8003376:	d4e1      	bmi.n	800333c <_fflush_r+0xc>
 8003378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800337a:	f7ff fb8d 	bl	8002a98 <__retarget_lock_release_recursive>
 800337e:	e7dd      	b.n	800333c <_fflush_r+0xc>

08003380 <__swhatbuf_r>:
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	460c      	mov	r4, r1
 8003384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003388:	2900      	cmp	r1, #0
 800338a:	b096      	sub	sp, #88	@ 0x58
 800338c:	4615      	mov	r5, r2
 800338e:	461e      	mov	r6, r3
 8003390:	da0d      	bge.n	80033ae <__swhatbuf_r+0x2e>
 8003392:	89a3      	ldrh	r3, [r4, #12]
 8003394:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	bf14      	ite	ne
 800339e:	2340      	movne	r3, #64	@ 0x40
 80033a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80033a4:	2000      	movs	r0, #0
 80033a6:	6031      	str	r1, [r6, #0]
 80033a8:	602b      	str	r3, [r5, #0]
 80033aa:	b016      	add	sp, #88	@ 0x58
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
 80033ae:	466a      	mov	r2, sp
 80033b0:	f000 f848 	bl	8003444 <_fstat_r>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	dbec      	blt.n	8003392 <__swhatbuf_r+0x12>
 80033b8:	9901      	ldr	r1, [sp, #4]
 80033ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80033be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80033c2:	4259      	negs	r1, r3
 80033c4:	4159      	adcs	r1, r3
 80033c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033ca:	e7eb      	b.n	80033a4 <__swhatbuf_r+0x24>

080033cc <__smakebuf_r>:
 80033cc:	898b      	ldrh	r3, [r1, #12]
 80033ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033d0:	079d      	lsls	r5, r3, #30
 80033d2:	4606      	mov	r6, r0
 80033d4:	460c      	mov	r4, r1
 80033d6:	d507      	bpl.n	80033e8 <__smakebuf_r+0x1c>
 80033d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	6123      	str	r3, [r4, #16]
 80033e0:	2301      	movs	r3, #1
 80033e2:	6163      	str	r3, [r4, #20]
 80033e4:	b003      	add	sp, #12
 80033e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033e8:	ab01      	add	r3, sp, #4
 80033ea:	466a      	mov	r2, sp
 80033ec:	f7ff ffc8 	bl	8003380 <__swhatbuf_r>
 80033f0:	9f00      	ldr	r7, [sp, #0]
 80033f2:	4605      	mov	r5, r0
 80033f4:	4639      	mov	r1, r7
 80033f6:	4630      	mov	r0, r6
 80033f8:	f7ff fbbc 	bl	8002b74 <_malloc_r>
 80033fc:	b948      	cbnz	r0, 8003412 <__smakebuf_r+0x46>
 80033fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003402:	059a      	lsls	r2, r3, #22
 8003404:	d4ee      	bmi.n	80033e4 <__smakebuf_r+0x18>
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	f043 0302 	orr.w	r3, r3, #2
 800340e:	81a3      	strh	r3, [r4, #12]
 8003410:	e7e2      	b.n	80033d8 <__smakebuf_r+0xc>
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	6020      	str	r0, [r4, #0]
 8003416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800341a:	81a3      	strh	r3, [r4, #12]
 800341c:	9b01      	ldr	r3, [sp, #4]
 800341e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003422:	b15b      	cbz	r3, 800343c <__smakebuf_r+0x70>
 8003424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003428:	4630      	mov	r0, r6
 800342a:	f000 f81d 	bl	8003468 <_isatty_r>
 800342e:	b128      	cbz	r0, 800343c <__smakebuf_r+0x70>
 8003430:	89a3      	ldrh	r3, [r4, #12]
 8003432:	f023 0303 	bic.w	r3, r3, #3
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	81a3      	strh	r3, [r4, #12]
 800343c:	89a3      	ldrh	r3, [r4, #12]
 800343e:	431d      	orrs	r5, r3
 8003440:	81a5      	strh	r5, [r4, #12]
 8003442:	e7cf      	b.n	80033e4 <__smakebuf_r+0x18>

08003444 <_fstat_r>:
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	4d07      	ldr	r5, [pc, #28]	@ (8003464 <_fstat_r+0x20>)
 8003448:	2300      	movs	r3, #0
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	602b      	str	r3, [r5, #0]
 8003452:	f7fd faef 	bl	8000a34 <_fstat>
 8003456:	1c43      	adds	r3, r0, #1
 8003458:	d102      	bne.n	8003460 <_fstat_r+0x1c>
 800345a:	682b      	ldr	r3, [r5, #0]
 800345c:	b103      	cbz	r3, 8003460 <_fstat_r+0x1c>
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	bd38      	pop	{r3, r4, r5, pc}
 8003462:	bf00      	nop
 8003464:	20000210 	.word	0x20000210

08003468 <_isatty_r>:
 8003468:	b538      	push	{r3, r4, r5, lr}
 800346a:	4d06      	ldr	r5, [pc, #24]	@ (8003484 <_isatty_r+0x1c>)
 800346c:	2300      	movs	r3, #0
 800346e:	4604      	mov	r4, r0
 8003470:	4608      	mov	r0, r1
 8003472:	602b      	str	r3, [r5, #0]
 8003474:	f7fd faee 	bl	8000a54 <_isatty>
 8003478:	1c43      	adds	r3, r0, #1
 800347a:	d102      	bne.n	8003482 <_isatty_r+0x1a>
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	b103      	cbz	r3, 8003482 <_isatty_r+0x1a>
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	bd38      	pop	{r3, r4, r5, pc}
 8003484:	20000210 	.word	0x20000210

08003488 <_sbrk_r>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4d06      	ldr	r5, [pc, #24]	@ (80034a4 <_sbrk_r+0x1c>)
 800348c:	2300      	movs	r3, #0
 800348e:	4604      	mov	r4, r0
 8003490:	4608      	mov	r0, r1
 8003492:	602b      	str	r3, [r5, #0]
 8003494:	f7fd faf6 	bl	8000a84 <_sbrk>
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	d102      	bne.n	80034a2 <_sbrk_r+0x1a>
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	b103      	cbz	r3, 80034a2 <_sbrk_r+0x1a>
 80034a0:	6023      	str	r3, [r4, #0]
 80034a2:	bd38      	pop	{r3, r4, r5, pc}
 80034a4:	20000210 	.word	0x20000210

080034a8 <_init>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	bf00      	nop
 80034ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ae:	bc08      	pop	{r3}
 80034b0:	469e      	mov	lr, r3
 80034b2:	4770      	bx	lr

080034b4 <_fini>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr
